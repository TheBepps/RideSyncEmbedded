
BFTAG01_STM32L031F4_PVD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000033b8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08003478  08003478  00013478  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800353c  0800353c  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  0800353c  0800353c  0001353c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003544  08003544  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003544  08003544  00013544  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003548  08003548  00013548  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  0800354c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000014c  20000018  08003564  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000164  08003564  00020164  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eab0  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000270c  00000000  00000000  0002eaf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00006562  00000000  00000000  000311fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000890  00000000  00000000  00037760  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000011b8  00000000  00000000  00037ff0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00011cee  00000000  00000000  000391a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000a4fe  00000000  00000000  0004ae96  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0006805e  00000000  00000000  00055394  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000bd3f2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000018b4  00000000  00000000  000bd470  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000018 	.word	0x20000018
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003460 	.word	0x08003460

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000001c 	.word	0x2000001c
 8000104:	08003460 	.word	0x08003460

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__udivmoddi4>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	464f      	mov	r7, r9
 8000264:	4646      	mov	r6, r8
 8000266:	46d6      	mov	lr, sl
 8000268:	b5c0      	push	{r6, r7, lr}
 800026a:	0004      	movs	r4, r0
 800026c:	b082      	sub	sp, #8
 800026e:	000d      	movs	r5, r1
 8000270:	4691      	mov	r9, r2
 8000272:	4698      	mov	r8, r3
 8000274:	428b      	cmp	r3, r1
 8000276:	d82f      	bhi.n	80002d8 <__udivmoddi4+0x78>
 8000278:	d02c      	beq.n	80002d4 <__udivmoddi4+0x74>
 800027a:	4641      	mov	r1, r8
 800027c:	4648      	mov	r0, r9
 800027e:	f000 f8b1 	bl	80003e4 <__clzdi2>
 8000282:	0029      	movs	r1, r5
 8000284:	0006      	movs	r6, r0
 8000286:	0020      	movs	r0, r4
 8000288:	f000 f8ac 	bl	80003e4 <__clzdi2>
 800028c:	1a33      	subs	r3, r6, r0
 800028e:	469c      	mov	ip, r3
 8000290:	3b20      	subs	r3, #32
 8000292:	469a      	mov	sl, r3
 8000294:	d500      	bpl.n	8000298 <__udivmoddi4+0x38>
 8000296:	e076      	b.n	8000386 <__udivmoddi4+0x126>
 8000298:	464b      	mov	r3, r9
 800029a:	4652      	mov	r2, sl
 800029c:	4093      	lsls	r3, r2
 800029e:	001f      	movs	r7, r3
 80002a0:	464b      	mov	r3, r9
 80002a2:	4662      	mov	r2, ip
 80002a4:	4093      	lsls	r3, r2
 80002a6:	001e      	movs	r6, r3
 80002a8:	42af      	cmp	r7, r5
 80002aa:	d828      	bhi.n	80002fe <__udivmoddi4+0x9e>
 80002ac:	d025      	beq.n	80002fa <__udivmoddi4+0x9a>
 80002ae:	4653      	mov	r3, sl
 80002b0:	1ba4      	subs	r4, r4, r6
 80002b2:	41bd      	sbcs	r5, r7
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	da00      	bge.n	80002ba <__udivmoddi4+0x5a>
 80002b8:	e07b      	b.n	80003b2 <__udivmoddi4+0x152>
 80002ba:	2200      	movs	r2, #0
 80002bc:	2300      	movs	r3, #0
 80002be:	9200      	str	r2, [sp, #0]
 80002c0:	9301      	str	r3, [sp, #4]
 80002c2:	2301      	movs	r3, #1
 80002c4:	4652      	mov	r2, sl
 80002c6:	4093      	lsls	r3, r2
 80002c8:	9301      	str	r3, [sp, #4]
 80002ca:	2301      	movs	r3, #1
 80002cc:	4662      	mov	r2, ip
 80002ce:	4093      	lsls	r3, r2
 80002d0:	9300      	str	r3, [sp, #0]
 80002d2:	e018      	b.n	8000306 <__udivmoddi4+0xa6>
 80002d4:	4282      	cmp	r2, r0
 80002d6:	d9d0      	bls.n	800027a <__udivmoddi4+0x1a>
 80002d8:	2200      	movs	r2, #0
 80002da:	2300      	movs	r3, #0
 80002dc:	9200      	str	r2, [sp, #0]
 80002de:	9301      	str	r3, [sp, #4]
 80002e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <__udivmoddi4+0x8a>
 80002e6:	601c      	str	r4, [r3, #0]
 80002e8:	605d      	str	r5, [r3, #4]
 80002ea:	9800      	ldr	r0, [sp, #0]
 80002ec:	9901      	ldr	r1, [sp, #4]
 80002ee:	b002      	add	sp, #8
 80002f0:	bc1c      	pop	{r2, r3, r4}
 80002f2:	4690      	mov	r8, r2
 80002f4:	4699      	mov	r9, r3
 80002f6:	46a2      	mov	sl, r4
 80002f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002fa:	42a3      	cmp	r3, r4
 80002fc:	d9d7      	bls.n	80002ae <__udivmoddi4+0x4e>
 80002fe:	2200      	movs	r2, #0
 8000300:	2300      	movs	r3, #0
 8000302:	9200      	str	r2, [sp, #0]
 8000304:	9301      	str	r3, [sp, #4]
 8000306:	4663      	mov	r3, ip
 8000308:	2b00      	cmp	r3, #0
 800030a:	d0e9      	beq.n	80002e0 <__udivmoddi4+0x80>
 800030c:	07fb      	lsls	r3, r7, #31
 800030e:	4698      	mov	r8, r3
 8000310:	4641      	mov	r1, r8
 8000312:	0872      	lsrs	r2, r6, #1
 8000314:	430a      	orrs	r2, r1
 8000316:	087b      	lsrs	r3, r7, #1
 8000318:	4666      	mov	r6, ip
 800031a:	e00e      	b.n	800033a <__udivmoddi4+0xda>
 800031c:	42ab      	cmp	r3, r5
 800031e:	d101      	bne.n	8000324 <__udivmoddi4+0xc4>
 8000320:	42a2      	cmp	r2, r4
 8000322:	d80c      	bhi.n	800033e <__udivmoddi4+0xde>
 8000324:	1aa4      	subs	r4, r4, r2
 8000326:	419d      	sbcs	r5, r3
 8000328:	2001      	movs	r0, #1
 800032a:	1924      	adds	r4, r4, r4
 800032c:	416d      	adcs	r5, r5
 800032e:	2100      	movs	r1, #0
 8000330:	3e01      	subs	r6, #1
 8000332:	1824      	adds	r4, r4, r0
 8000334:	414d      	adcs	r5, r1
 8000336:	2e00      	cmp	r6, #0
 8000338:	d006      	beq.n	8000348 <__udivmoddi4+0xe8>
 800033a:	42ab      	cmp	r3, r5
 800033c:	d9ee      	bls.n	800031c <__udivmoddi4+0xbc>
 800033e:	3e01      	subs	r6, #1
 8000340:	1924      	adds	r4, r4, r4
 8000342:	416d      	adcs	r5, r5
 8000344:	2e00      	cmp	r6, #0
 8000346:	d1f8      	bne.n	800033a <__udivmoddi4+0xda>
 8000348:	9800      	ldr	r0, [sp, #0]
 800034a:	9901      	ldr	r1, [sp, #4]
 800034c:	4653      	mov	r3, sl
 800034e:	1900      	adds	r0, r0, r4
 8000350:	4169      	adcs	r1, r5
 8000352:	2b00      	cmp	r3, #0
 8000354:	db23      	blt.n	800039e <__udivmoddi4+0x13e>
 8000356:	002b      	movs	r3, r5
 8000358:	4652      	mov	r2, sl
 800035a:	40d3      	lsrs	r3, r2
 800035c:	002a      	movs	r2, r5
 800035e:	4664      	mov	r4, ip
 8000360:	40e2      	lsrs	r2, r4
 8000362:	001c      	movs	r4, r3
 8000364:	4653      	mov	r3, sl
 8000366:	0015      	movs	r5, r2
 8000368:	2b00      	cmp	r3, #0
 800036a:	db2d      	blt.n	80003c8 <__udivmoddi4+0x168>
 800036c:	0026      	movs	r6, r4
 800036e:	4657      	mov	r7, sl
 8000370:	40be      	lsls	r6, r7
 8000372:	0033      	movs	r3, r6
 8000374:	0026      	movs	r6, r4
 8000376:	4667      	mov	r7, ip
 8000378:	40be      	lsls	r6, r7
 800037a:	0032      	movs	r2, r6
 800037c:	1a80      	subs	r0, r0, r2
 800037e:	4199      	sbcs	r1, r3
 8000380:	9000      	str	r0, [sp, #0]
 8000382:	9101      	str	r1, [sp, #4]
 8000384:	e7ac      	b.n	80002e0 <__udivmoddi4+0x80>
 8000386:	4662      	mov	r2, ip
 8000388:	2320      	movs	r3, #32
 800038a:	1a9b      	subs	r3, r3, r2
 800038c:	464a      	mov	r2, r9
 800038e:	40da      	lsrs	r2, r3
 8000390:	4661      	mov	r1, ip
 8000392:	0013      	movs	r3, r2
 8000394:	4642      	mov	r2, r8
 8000396:	408a      	lsls	r2, r1
 8000398:	0017      	movs	r7, r2
 800039a:	431f      	orrs	r7, r3
 800039c:	e780      	b.n	80002a0 <__udivmoddi4+0x40>
 800039e:	4662      	mov	r2, ip
 80003a0:	2320      	movs	r3, #32
 80003a2:	1a9b      	subs	r3, r3, r2
 80003a4:	002a      	movs	r2, r5
 80003a6:	4666      	mov	r6, ip
 80003a8:	409a      	lsls	r2, r3
 80003aa:	0023      	movs	r3, r4
 80003ac:	40f3      	lsrs	r3, r6
 80003ae:	4313      	orrs	r3, r2
 80003b0:	e7d4      	b.n	800035c <__udivmoddi4+0xfc>
 80003b2:	4662      	mov	r2, ip
 80003b4:	2320      	movs	r3, #32
 80003b6:	2100      	movs	r1, #0
 80003b8:	1a9b      	subs	r3, r3, r2
 80003ba:	2200      	movs	r2, #0
 80003bc:	9100      	str	r1, [sp, #0]
 80003be:	9201      	str	r2, [sp, #4]
 80003c0:	2201      	movs	r2, #1
 80003c2:	40da      	lsrs	r2, r3
 80003c4:	9201      	str	r2, [sp, #4]
 80003c6:	e780      	b.n	80002ca <__udivmoddi4+0x6a>
 80003c8:	2320      	movs	r3, #32
 80003ca:	4662      	mov	r2, ip
 80003cc:	0026      	movs	r6, r4
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	40de      	lsrs	r6, r3
 80003d2:	002f      	movs	r7, r5
 80003d4:	46b0      	mov	r8, r6
 80003d6:	4666      	mov	r6, ip
 80003d8:	40b7      	lsls	r7, r6
 80003da:	4646      	mov	r6, r8
 80003dc:	003b      	movs	r3, r7
 80003de:	4333      	orrs	r3, r6
 80003e0:	e7c8      	b.n	8000374 <__udivmoddi4+0x114>
 80003e2:	46c0      	nop			; (mov r8, r8)

080003e4 <__clzdi2>:
 80003e4:	b510      	push	{r4, lr}
 80003e6:	2900      	cmp	r1, #0
 80003e8:	d103      	bne.n	80003f2 <__clzdi2+0xe>
 80003ea:	f000 f807 	bl	80003fc <__clzsi2>
 80003ee:	3020      	adds	r0, #32
 80003f0:	e002      	b.n	80003f8 <__clzdi2+0x14>
 80003f2:	1c08      	adds	r0, r1, #0
 80003f4:	f000 f802 	bl	80003fc <__clzsi2>
 80003f8:	bd10      	pop	{r4, pc}
 80003fa:	46c0      	nop			; (mov r8, r8)

080003fc <__clzsi2>:
 80003fc:	211c      	movs	r1, #28
 80003fe:	2301      	movs	r3, #1
 8000400:	041b      	lsls	r3, r3, #16
 8000402:	4298      	cmp	r0, r3
 8000404:	d301      	bcc.n	800040a <__clzsi2+0xe>
 8000406:	0c00      	lsrs	r0, r0, #16
 8000408:	3910      	subs	r1, #16
 800040a:	0a1b      	lsrs	r3, r3, #8
 800040c:	4298      	cmp	r0, r3
 800040e:	d301      	bcc.n	8000414 <__clzsi2+0x18>
 8000410:	0a00      	lsrs	r0, r0, #8
 8000412:	3908      	subs	r1, #8
 8000414:	091b      	lsrs	r3, r3, #4
 8000416:	4298      	cmp	r0, r3
 8000418:	d301      	bcc.n	800041e <__clzsi2+0x22>
 800041a:	0900      	lsrs	r0, r0, #4
 800041c:	3904      	subs	r1, #4
 800041e:	a202      	add	r2, pc, #8	; (adr r2, 8000428 <__clzsi2+0x2c>)
 8000420:	5c10      	ldrb	r0, [r2, r0]
 8000422:	1840      	adds	r0, r0, r1
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)
 8000428:	02020304 	.word	0x02020304
 800042c:	01010101 	.word	0x01010101
	...

08000438 <My_Main>:
	HAL_PWR_ConfigPVD(&sConfigPVD);			   	// Configure PVD
}

void My_Main(void){

	HAL_GPIO_WritePin(VHTS_GPIO_Port, VHTS_Pin, GPIO_PIN_RESET);
 8000438:	20a0      	movs	r0, #160	; 0xa0
void My_Main(void){
 800043a:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(VHTS_GPIO_Port, VHTS_Pin, GPIO_PIN_RESET);
 800043c:	2200      	movs	r2, #0
 800043e:	2120      	movs	r1, #32
 8000440:	05c0      	lsls	r0, r0, #23
 8000442:	f001 fbc3 	bl	8001bcc <HAL_GPIO_WritePin>

	sConfigPVD.PVDLevel = PWR_PVDLEVEL_5;      	// Set PVD Threshold to 3.0 Volt
 8000446:	23a0      	movs	r3, #160	; 0xa0
 8000448:	4815      	ldr	r0, [pc, #84]	; (80004a0 <My_Main+0x68>)
	*sensor_data = 27;		 // Temperature
	*(sensor_data + 1) = 50; // Humidity
#endif

#if FROM_FLASH
	transmission_params = (uint8_t*)DATA_EEPROM_BASE; 											   // DATA_EEPROM_BASE = 0x08080000 Address of the 1st Byte of the EEPPROM MEMORY
 800044a:	4c16      	ldr	r4, [pc, #88]	; (80004a4 <My_Main+0x6c>)
	sConfigPVD.PVDLevel = PWR_PVDLEVEL_5;      	// Set PVD Threshold to 3.0 Volt
 800044c:	6003      	str	r3, [r0, #0]
	sConfigPVD.Mode = PWR_PVD_MODE_IT_FALLING;	// Set PVD tp detect Rising Vdd
 800044e:	4b16      	ldr	r3, [pc, #88]	; (80004a8 <My_Main+0x70>)
 8000450:	6043      	str	r3, [r0, #4]
	HAL_PWR_ConfigPVD(&sConfigPVD);			   	// Configure PVD
 8000452:	f001 fd99 	bl	8001f88 <HAL_PWR_ConfigPVD>
	HAL_PWR_EnablePVD();	          			// Enable PVD
 8000456:	f001 fdd3 	bl	8002000 <HAL_PWR_EnablePVD>
	transmission_params = (uint8_t*)DATA_EEPROM_BASE; 											   // DATA_EEPROM_BASE = 0x08080000 Address of the 1st Byte of the EEPPROM MEMORY
 800045a:	4b14      	ldr	r3, [pc, #80]	; (80004ac <My_Main+0x74>)
 800045c:	601c      	str	r4, [r3, #0]

	if (*((uint32_t*)transmission_params) == 0) {   										       // 1) Check if the 1st Word of the EEPROM Memory is Empty
 800045e:	6823      	ldr	r3, [r4, #0]
 8000460:	2b00      	cmp	r3, #0
 8000462:	d00d      	beq.n	8000480 <My_Main+0x48>
		HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_BYTE, DATA_EEPROM_BASE, NTB);         // 3) Program the 1st BYTE of the EEPROM with the NTB value
		HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_BYTE, DATA_EEPROM_BASE + 1, RTPS);    // 4) Program the 2nd BYTE of the EEPROM with the RTPS value
		HAL_FLASHEx_DATAEEPROM_Lock();                                							   // 5) Lock the EEPROM
	}
	else {
		ntb  = *(transmission_params);      // Extracting ntb From Flash
 8000464:	7822      	ldrb	r2, [r4, #0]
 8000466:	4b12      	ldr	r3, [pc, #72]	; (80004b0 <My_Main+0x78>)
 8000468:	701a      	strb	r2, [r3, #0]
		rtps = *(transmission_params + 1);	// Extracting rtps From Flash
 800046a:	7862      	ldrb	r2, [r4, #1]
 800046c:	4b11      	ldr	r3, [pc, #68]	; (80004b4 <My_Main+0x7c>)
 800046e:	701a      	strb	r2, [r3, #0]
#else
	rtps = RTPS;
	ntb  = NTB;
#endif

	HAL_UART_MspDeInit(&hlpuart1);           // Deactivate LPUART to save energy
 8000470:	4811      	ldr	r0, [pc, #68]	; (80004b8 <My_Main+0x80>)
 8000472:	f000 fd21 	bl	8000eb8 <HAL_UART_MspDeInit>
	HAL_LPTIM_Counter_Start(&hlptim1, ARR);  // Start the LPTIM1 Counter
 8000476:	4911      	ldr	r1, [pc, #68]	; (80004bc <My_Main+0x84>)
 8000478:	4811      	ldr	r0, [pc, #68]	; (80004c0 <My_Main+0x88>)
 800047a:	f001 fc23 	bl	8001cc4 <HAL_LPTIM_Counter_Start>
}
 800047e:	bd10      	pop	{r4, pc}
		HAL_FLASHEx_DATAEEPROM_Unlock();                                						   // 2) UnLock the EEPROM
 8000480:	f001 f9e4 	bl	800184c <HAL_FLASHEx_DATAEEPROM_Unlock>
		HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_BYTE, DATA_EEPROM_BASE, NTB);         // 3) Program the 1st BYTE of the EEPROM with the NTB value
 8000484:	0021      	movs	r1, r4
 8000486:	2206      	movs	r2, #6
 8000488:	2000      	movs	r0, #0
 800048a:	f001 fa01 	bl	8001890 <HAL_FLASHEx_DATAEEPROM_Program>
		HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_BYTE, DATA_EEPROM_BASE + 1, RTPS);    // 4) Program the 2nd BYTE of the EEPROM with the RTPS value
 800048e:	2214      	movs	r2, #20
 8000490:	490c      	ldr	r1, [pc, #48]	; (80004c4 <My_Main+0x8c>)
 8000492:	2000      	movs	r0, #0
 8000494:	f001 f9fc 	bl	8001890 <HAL_FLASHEx_DATAEEPROM_Program>
		HAL_FLASHEx_DATAEEPROM_Lock();                                							   // 5) Lock the EEPROM
 8000498:	f001 f9f0 	bl	800187c <HAL_FLASHEx_DATAEEPROM_Lock>
 800049c:	e7e8      	b.n	8000470 <My_Main+0x38>
 800049e:	46c0      	nop			; (mov r8, r8)
 80004a0:	20000044 	.word	0x20000044
 80004a4:	08080000 	.word	0x08080000
 80004a8:	00010002 	.word	0x00010002
 80004ac:	2000004c 	.word	0x2000004c
 80004b0:	20000037 	.word	0x20000037
 80004b4:	2000003c 	.word	0x2000003c
 80004b8:	20000050 	.word	0x20000050
 80004bc:	0000ffff 	.word	0x0000ffff
 80004c0:	200000d0 	.word	0x200000d0
 80004c4:	08080001 	.word	0x08080001

080004c8 <My_While>:

void My_While(void){
 80004c8:	b5f0      	push	{r4, r5, r6, r7, lr}

	HAL_GPIO_TogglePin(TEST_GPIO_Port, TEST_Pin);
 80004ca:	20a0      	movs	r0, #160	; 0xa0
void My_While(void){
 80004cc:	46c6      	mov	lr, r8
	HAL_GPIO_TogglePin(TEST_GPIO_Port, TEST_Pin);
 80004ce:	2101      	movs	r1, #1
void My_While(void){
 80004d0:	b500      	push	{lr}
	HAL_GPIO_TogglePin(TEST_GPIO_Port, TEST_Pin);
 80004d2:	05c0      	lsls	r0, r0, #23
 80004d4:	f001 fb80 	bl	8001bd8 <HAL_GPIO_TogglePin>

	sConfigPVD.PVDLevel = PWR_PVDLEVEL_6;      	  // Set PVD Threshold to 3.0 Volt
 80004d8:	23c0      	movs	r3, #192	; 0xc0
 80004da:	4cbe      	ldr	r4, [pc, #760]	; (80007d4 <My_While+0x30c>)
	sConfigPVD.Mode = PWR_PVD_MODE_NORMAL;	      // Set PVD Normal
	HAL_PWR_ConfigPVD(&sConfigPVD);			   	  // Configure PVD

	if(__HAL_PWR_GET_FLAG(PWR_FLAG_PVDO) == 0){   // if Vstor is > 3.0 Volt
 80004dc:	2604      	movs	r6, #4
	sConfigPVD.PVDLevel = PWR_PVDLEVEL_6;      	  // Set PVD Threshold to 3.0 Volt
 80004de:	6023      	str	r3, [r4, #0]
	sConfigPVD.Mode = PWR_PVD_MODE_NORMAL;	      // Set PVD Normal
 80004e0:	2300      	movs	r3, #0
	if(__HAL_PWR_GET_FLAG(PWR_FLAG_PVDO) == 0){   // if Vstor is > 3.0 Volt
 80004e2:	4dbd      	ldr	r5, [pc, #756]	; (80007d8 <My_While+0x310>)
	HAL_PWR_ConfigPVD(&sConfigPVD);			   	  // Configure PVD
 80004e4:	0020      	movs	r0, r4
	sConfigPVD.Mode = PWR_PVD_MODE_NORMAL;	      // Set PVD Normal
 80004e6:	6063      	str	r3, [r4, #4]
	HAL_PWR_ConfigPVD(&sConfigPVD);			   	  // Configure PVD
 80004e8:	f001 fd4e 	bl	8001f88 <HAL_PWR_ConfigPVD>
	if(__HAL_PWR_GET_FLAG(PWR_FLAG_PVDO) == 0){   // if Vstor is > 3.0 Volt
 80004ec:	686b      	ldr	r3, [r5, #4]
 80004ee:	421e      	tst	r6, r3
 80004f0:	d100      	bne.n	80004f4 <My_While+0x2c>
 80004f2:	e08d      	b.n	8000610 <My_While+0x148>
		HAL_PWR_ConfigPVD(&sConfigPVD);			  // Configure PVD
		My_Enter_Stop_Mode_WFI_PVD();  			  // Enter Stop Mode and WFI from PVD
		My_Ble_Off();				   			  // Turn BLE OFF
	}

	if ((__HAL_PWR_GET_FLAG(PWR_FLAG_PVDO) == 1) && (__HAL_PWR_GET_FLAG(PWR_CSR_VREFINTRDYF) == 1)) { // if Vstor < 3.0 Volt and Internal Reference is Ready
 80004f4:	4bb8      	ldr	r3, [pc, #736]	; (80007d8 <My_While+0x310>)
 80004f6:	685a      	ldr	r2, [r3, #4]
 80004f8:	0752      	lsls	r2, r2, #29
 80004fa:	d503      	bpl.n	8000504 <My_While+0x3c>
 80004fc:	685b      	ldr	r3, [r3, #4]
 80004fe:	071b      	lsls	r3, r3, #28
 8000500:	d500      	bpl.n	8000504 <My_While+0x3c>
 8000502:	e130      	b.n	8000766 <My_While+0x29e>
 8000504:	4cb5      	ldr	r4, [pc, #724]	; (80007dc <My_While+0x314>)
		My_Set_Vh();
		pvdi = 0;		            			  // Reset pvdi
		My_Enter_Stop_Mode_WFI();   			  // Enter Stop Mode and WFI from PVD or LPTIM
	}

	if (pvdi == 0){ 											 // If pvdi = 0
 8000506:	7823      	ldrb	r3, [r4, #0]
 8000508:	2b00      	cmp	r3, #0
 800050a:	d111      	bne.n	8000530 <My_While+0x68>
		ms = DARK;												 // Set Mode State to DARK
 800050c:	2102      	movs	r1, #2
 800050e:	4ab4      	ldr	r2, [pc, #720]	; (80007e0 <My_While+0x318>)
 8000510:	7011      	strb	r1, [r2, #0]
		if (__HAL_PWR_GET_FLAG(PWR_FLAG_PVDO) == 1) {            // Check if Vstor < 3.0V
 8000512:	4ab1      	ldr	r2, [pc, #708]	; (80007d8 <My_While+0x310>)
 8000514:	6852      	ldr	r2, [r2, #4]
 8000516:	0752      	lsls	r2, r2, #29
 8000518:	d507      	bpl.n	800052a <My_While+0x62>
			if (++cnt_ovf >= NOVF){ 					 		 // If Overflow
 800051a:	49b2      	ldr	r1, [pc, #712]	; (80007e4 <My_While+0x31c>)
 800051c:	780a      	ldrb	r2, [r1, #0]
 800051e:	3201      	adds	r2, #1
 8000520:	b2d2      	uxtb	r2, r2
 8000522:	2a11      	cmp	r2, #17
 8000524:	d900      	bls.n	8000528 <My_While+0x60>
 8000526:	e179      	b.n	800081c <My_While+0x354>
 8000528:	700a      	strb	r2, [r1, #0]
		HAL_UART_Transmit(&hlpuart1, sensor_data, NOD_SENSORS, (uint32_t)(SF*TAFV_MIN)); // Transmit Data
		HAL_UART_MspDeInit(&hlpuart1);
	}
#endif

}
 800052a:	bc04      	pop	{r2}
 800052c:	4690      	mov	r8, r2
 800052e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		cdark = 0;
 8000530:	2200      	movs	r2, #0
		if (ms == DARK){
 8000532:	4eab      	ldr	r6, [pc, #684]	; (80007e0 <My_While+0x318>)
		cdark = 0;
 8000534:	4bac      	ldr	r3, [pc, #688]	; (80007e8 <My_While+0x320>)
		if (ms == DARK){
 8000536:	7835      	ldrb	r5, [r6, #0]
		cdark = 0;
 8000538:	701a      	strb	r2, [r3, #0]
		if (ms == DARK){
 800053a:	2d02      	cmp	r5, #2
 800053c:	d100      	bne.n	8000540 <My_While+0x78>
 800053e:	e0c3      	b.n	80006c8 <My_While+0x200>
		if (ms == SEND){
 8000540:	2d01      	cmp	r5, #1
 8000542:	d100      	bne.n	8000546 <My_While+0x7e>
 8000544:	e0c2      	b.n	80006cc <My_While+0x204>
		else if (ms == WAIT){
 8000546:	2d00      	cmp	r5, #0
 8000548:	d1ef      	bne.n	800052a <My_While+0x62>
			if (HAL_LPTIM_ReadCounter(&hlptim1) < rtp){
 800054a:	4ca8      	ldr	r4, [pc, #672]	; (80007ec <My_While+0x324>)
 800054c:	0020      	movs	r0, r4
 800054e:	f001 fcab 	bl	8001ea8 <HAL_LPTIM_ReadCounter>
 8000552:	4ba7      	ldr	r3, [pc, #668]	; (80007f0 <My_While+0x328>)
 8000554:	881b      	ldrh	r3, [r3, #0]
 8000556:	4298      	cmp	r0, r3
 8000558:	d200      	bcs.n	800055c <My_While+0x94>
 800055a:	e255      	b.n	8000a08 <My_While+0x540>
				ms = SEND;
 800055c:	2301      	movs	r3, #1
 800055e:	7033      	strb	r3, [r6, #0]
				cnt_ovf = 0;							   // Reset cnt_ovf
 8000560:	4ba0      	ldr	r3, [pc, #640]	; (80007e4 <My_While+0x31c>)
				HAL_NVIC_EnableIRQ(LPTIM1_IRQn);		   // Enable LPTIM1 Interrupts
 8000562:	200d      	movs	r0, #13
				cnt_ovf = 0;							   // Reset cnt_ovf
 8000564:	701d      	strb	r5, [r3, #0]
				HAL_NVIC_EnableIRQ(LPTIM1_IRQn);		   // Enable LPTIM1 Interrupts
 8000566:	f000 fdcf 	bl	8001108 <HAL_NVIC_EnableIRQ>
				HAL_LPTIM_Counter_Stop(&hlptim1);          // Stop  LPTIM1 Counter
 800056a:	0020      	movs	r0, r4
 800056c:	f001 fbcc 	bl	8001d08 <HAL_LPTIM_Counter_Stop>
				HAL_LPTIM_Counter_Start_IT(&hlptim1, ARR); // Start LPTIM1 Counter
 8000570:	49a0      	ldr	r1, [pc, #640]	; (80007f4 <My_While+0x32c>)
 8000572:	0020      	movs	r0, r4
 8000574:	f001 fc66 	bl	8001e44 <HAL_LPTIM_Counter_Start_IT>
	HAL_GPIO_WritePin(BLE_TXE_GPIO_Port, BLE_TXE_Pin, GPIO_PIN_RESET);  // Enable the BLE to transmit
 8000578:	2180      	movs	r1, #128	; 0x80
 800057a:	2200      	movs	r2, #0
 800057c:	0209      	lsls	r1, r1, #8
 800057e:	489e      	ldr	r0, [pc, #632]	; (80007f8 <My_While+0x330>)
 8000580:	f001 fb24 	bl	8001bcc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(VBLUE_GPIO_Port,   VBLUE_Pin,   GPIO_PIN_SET);    // Turn on the   BLE IC
 8000584:	2201      	movs	r2, #1
 8000586:	2102      	movs	r1, #2
 8000588:	489c      	ldr	r0, [pc, #624]	; (80007fc <My_While+0x334>)
 800058a:	f001 fb1f 	bl	8001bcc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(VBLUE1_GPIO_Port,  VBLUE1_Pin,  GPIO_PIN_SET);    // Turn on the   BLE IC
 800058e:	20a0      	movs	r0, #160	; 0xa0
 8000590:	2201      	movs	r2, #1
 8000592:	2180      	movs	r1, #128	; 0x80
 8000594:	05c0      	lsls	r0, r0, #23
 8000596:	f001 fb19 	bl	8001bcc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(VBLUE2_GPIO_Port,  VBLUE2_Pin,  GPIO_PIN_SET);    // Turn on the   BLE IC
 800059a:	20a0      	movs	r0, #160	; 0xa0
 800059c:	2201      	movs	r2, #1
 800059e:	2140      	movs	r1, #64	; 0x40
 80005a0:	05c0      	lsls	r0, r0, #23
 80005a2:	f001 fb13 	bl	8001bcc <HAL_GPIO_WritePin>
	HAL_Delay(1); 														// Reset must be released at least 30 usec after the VBLUE is up and stable
 80005a6:	2001      	movs	r0, #1
 80005a8:	f000 fd70 	bl	800108c <HAL_Delay>
	HAL_GPIO_WritePin(BLE_RST_GPIO_Port, BLE_RST_Pin, GPIO_PIN_SET);  	// Un-Reset the  BLE IC
 80005ac:	2180      	movs	r1, #128	; 0x80
 80005ae:	2201      	movs	r2, #1
 80005b0:	01c9      	lsls	r1, r1, #7
 80005b2:	4891      	ldr	r0, [pc, #580]	; (80007f8 <My_While+0x330>)
 80005b4:	f001 fb0a 	bl	8001bcc <HAL_GPIO_WritePin>
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 80005b8:	2104      	movs	r1, #4
 80005ba:	4a87      	ldr	r2, [pc, #540]	; (80007d8 <My_While+0x310>)
	HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI); // Device in Stop Mode and WFI from PVD and LPTIM1
 80005bc:	2001      	movs	r0, #1
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 80005be:	6813      	ldr	r3, [r2, #0]
 80005c0:	430b      	orrs	r3, r1
 80005c2:	6013      	str	r3, [r2, #0]
	HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI); // Device in Stop Mode and WFI from PVD and LPTIM1
 80005c4:	3903      	subs	r1, #3
 80005c6:	f001 fd23 	bl	8002010 <HAL_PWR_EnterSTOPMode>
	HAL_GPIO_WritePin(BLE_TXE_GPIO_Port,   BLE_TXE_Pin,   GPIO_PIN_RESET);	// Reset the    BLE_TXE (Back to Harvest)
 80005ca:	2180      	movs	r1, #128	; 0x80
 80005cc:	2200      	movs	r2, #0
 80005ce:	0209      	lsls	r1, r1, #8
 80005d0:	4889      	ldr	r0, [pc, #548]	; (80007f8 <My_While+0x330>)
 80005d2:	f001 fafb 	bl	8001bcc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(VBLUE_GPIO_Port,     VBLUE_Pin,     GPIO_PIN_RESET); 	// Turn OFF the BLE (Back to Harvest)
 80005d6:	2200      	movs	r2, #0
 80005d8:	2102      	movs	r1, #2
 80005da:	4888      	ldr	r0, [pc, #544]	; (80007fc <My_While+0x334>)
 80005dc:	f001 faf6 	bl	8001bcc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(VBLUE1_GPIO_Port,    VBLUE1_Pin,    GPIO_PIN_RESET); 	// Turn OFF the BLE (Back to Harvest)
 80005e0:	20a0      	movs	r0, #160	; 0xa0
 80005e2:	2200      	movs	r2, #0
 80005e4:	2180      	movs	r1, #128	; 0x80
 80005e6:	05c0      	lsls	r0, r0, #23
 80005e8:	f001 faf0 	bl	8001bcc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(VBLUE2_GPIO_Port,    VBLUE2_Pin,    GPIO_PIN_RESET); 	// Turn OFF the BLE (Back to Harvest)
 80005ec:	20a0      	movs	r0, #160	; 0xa0
 80005ee:	2200      	movs	r2, #0
 80005f0:	2140      	movs	r1, #64	; 0x40
 80005f2:	05c0      	lsls	r0, r0, #23
 80005f4:	f001 faea 	bl	8001bcc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BLE_RST_GPIO_Port,   BLE_RST_Pin,   GPIO_PIN_RESET); 	// Reset the    BLE (Back to Harvest)
 80005f8:	2180      	movs	r1, #128	; 0x80
 80005fa:	2200      	movs	r2, #0
 80005fc:	01c9      	lsls	r1, r1, #7
 80005fe:	487e      	ldr	r0, [pc, #504]	; (80007f8 <My_While+0x330>)
 8000600:	f001 fae4 	bl	8001bcc <HAL_GPIO_WritePin>
				tadv = HAL_LPTIM_ReadCounter(&hlptim1);    // Time Stamp tadv
 8000604:	0020      	movs	r0, r4
 8000606:	f001 fc4f 	bl	8001ea8 <HAL_LPTIM_ReadCounter>
 800060a:	4b7d      	ldr	r3, [pc, #500]	; (8000800 <My_While+0x338>)
 800060c:	8018      	strh	r0, [r3, #0]
}
 800060e:	e78c      	b.n	800052a <My_While+0x62>
	HAL_GPIO_WritePin(BLE_TXE_GPIO_Port, BLE_TXE_Pin, GPIO_PIN_RESET);  // Enable the BLE to transmit
 8000610:	2180      	movs	r1, #128	; 0x80
 8000612:	2200      	movs	r2, #0
 8000614:	0209      	lsls	r1, r1, #8
 8000616:	4878      	ldr	r0, [pc, #480]	; (80007f8 <My_While+0x330>)
 8000618:	f001 fad8 	bl	8001bcc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(VBLUE_GPIO_Port,   VBLUE_Pin,   GPIO_PIN_SET);    // Turn on the   BLE IC
 800061c:	2201      	movs	r2, #1
 800061e:	2102      	movs	r1, #2
 8000620:	4876      	ldr	r0, [pc, #472]	; (80007fc <My_While+0x334>)
 8000622:	f001 fad3 	bl	8001bcc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(VBLUE1_GPIO_Port,  VBLUE1_Pin,  GPIO_PIN_SET);    // Turn on the   BLE IC
 8000626:	20a0      	movs	r0, #160	; 0xa0
 8000628:	2201      	movs	r2, #1
 800062a:	2180      	movs	r1, #128	; 0x80
 800062c:	05c0      	lsls	r0, r0, #23
 800062e:	f001 facd 	bl	8001bcc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(VBLUE2_GPIO_Port,  VBLUE2_Pin,  GPIO_PIN_SET);    // Turn on the   BLE IC
 8000632:	20a0      	movs	r0, #160	; 0xa0
 8000634:	2201      	movs	r2, #1
 8000636:	2140      	movs	r1, #64	; 0x40
 8000638:	05c0      	lsls	r0, r0, #23
 800063a:	f001 fac7 	bl	8001bcc <HAL_GPIO_WritePin>
	HAL_Delay(1); 														// Reset must be released at least 30 usec after the VBLUE is up and stable
 800063e:	2001      	movs	r0, #1
 8000640:	f000 fd24 	bl	800108c <HAL_Delay>
	HAL_GPIO_WritePin(BLE_RST_GPIO_Port, BLE_RST_Pin, GPIO_PIN_SET);  	// Un-Reset the  BLE IC
 8000644:	2180      	movs	r1, #128	; 0x80
 8000646:	2201      	movs	r2, #1
 8000648:	01c9      	lsls	r1, r1, #7
 800064a:	486b      	ldr	r0, [pc, #428]	; (80007f8 <My_While+0x330>)
 800064c:	f001 fabe 	bl	8001bcc <HAL_GPIO_WritePin>
		sConfigPVD.PVDLevel = PWR_PVDLEVEL_4;     // Set PVD Threshold to 2.6 Volt
 8000650:	2380      	movs	r3, #128	; 0x80
 8000652:	6023      	str	r3, [r4, #0]
		sConfigPVD.Mode = PWR_PVD_MODE_IT_RISING; // Set PVD to detect Falling Vdd
 8000654:	4b6b      	ldr	r3, [pc, #428]	; (8000804 <My_While+0x33c>)
		HAL_PWR_ConfigPVD(&sConfigPVD);			  // Configure PVD
 8000656:	0020      	movs	r0, r4
		sConfigPVD.Mode = PWR_PVD_MODE_IT_RISING; // Set PVD to detect Falling Vdd
 8000658:	6063      	str	r3, [r4, #4]
		HAL_PWR_ConfigPVD(&sConfigPVD);			  // Configure PVD
 800065a:	f001 fc95 	bl	8001f88 <HAL_PWR_ConfigPVD>
	HAL_NVIC_EnableIRQ(PVD_IRQn);
 800065e:	2001      	movs	r0, #1
 8000660:	f000 fd52 	bl	8001108 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_ClearPendingIRQ(PVD_IRQn);
 8000664:	2001      	movs	r0, #1
 8000666:	f000 fd8d 	bl	8001184 <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_ClearPendingIRQ(EXTI4_15_IRQn);
 800066a:	2007      	movs	r0, #7
 800066c:	f000 fd8a 	bl	8001184 <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_ClearPendingIRQ(LPTIM1_IRQn);
 8000670:	200d      	movs	r0, #13
 8000672:	f000 fd87 	bl	8001184 <HAL_NVIC_ClearPendingIRQ>
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_PVDO);									// CLear Flag
 8000676:	2210      	movs	r2, #16
 8000678:	682b      	ldr	r3, [r5, #0]
	HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI); 	// Device in Stop Mode and WFI from PVD and LPTIM1
 800067a:	2101      	movs	r1, #1
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_PVDO);									// CLear Flag
 800067c:	4313      	orrs	r3, r2
 800067e:	602b      	str	r3, [r5, #0]
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);										// CLear Flag
 8000680:	682b      	ldr	r3, [r5, #0]
	HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI); 	// Device in Stop Mode and WFI from PVD and LPTIM1
 8000682:	2001      	movs	r0, #1
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);										// CLear Flag
 8000684:	431e      	orrs	r6, r3
 8000686:	602e      	str	r6, [r5, #0]
	HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI); 	// Device in Stop Mode and WFI from PVD and LPTIM1
 8000688:	f001 fcc2 	bl	8002010 <HAL_PWR_EnterSTOPMode>
	HAL_GPIO_WritePin(BLE_TXE_GPIO_Port,   BLE_TXE_Pin,   GPIO_PIN_RESET);	// Reset the    BLE_TXE (Back to Harvest)
 800068c:	2180      	movs	r1, #128	; 0x80
 800068e:	2200      	movs	r2, #0
 8000690:	0209      	lsls	r1, r1, #8
 8000692:	4859      	ldr	r0, [pc, #356]	; (80007f8 <My_While+0x330>)
 8000694:	f001 fa9a 	bl	8001bcc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(VBLUE_GPIO_Port,     VBLUE_Pin,     GPIO_PIN_RESET); 	// Turn OFF the BLE (Back to Harvest)
 8000698:	2200      	movs	r2, #0
 800069a:	2102      	movs	r1, #2
 800069c:	4857      	ldr	r0, [pc, #348]	; (80007fc <My_While+0x334>)
 800069e:	f001 fa95 	bl	8001bcc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(VBLUE1_GPIO_Port,    VBLUE1_Pin,    GPIO_PIN_RESET); 	// Turn OFF the BLE (Back to Harvest)
 80006a2:	20a0      	movs	r0, #160	; 0xa0
 80006a4:	2200      	movs	r2, #0
 80006a6:	2180      	movs	r1, #128	; 0x80
 80006a8:	05c0      	lsls	r0, r0, #23
 80006aa:	f001 fa8f 	bl	8001bcc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(VBLUE2_GPIO_Port,    VBLUE2_Pin,    GPIO_PIN_RESET); 	// Turn OFF the BLE (Back to Harvest)
 80006ae:	20a0      	movs	r0, #160	; 0xa0
 80006b0:	2200      	movs	r2, #0
 80006b2:	2140      	movs	r1, #64	; 0x40
 80006b4:	05c0      	lsls	r0, r0, #23
 80006b6:	f001 fa89 	bl	8001bcc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BLE_RST_GPIO_Port,   BLE_RST_Pin,   GPIO_PIN_RESET); 	// Reset the    BLE (Back to Harvest)
 80006ba:	2180      	movs	r1, #128	; 0x80
 80006bc:	2200      	movs	r2, #0
 80006be:	01c9      	lsls	r1, r1, #7
 80006c0:	484d      	ldr	r0, [pc, #308]	; (80007f8 <My_While+0x330>)
 80006c2:	f001 fa83 	bl	8001bcc <HAL_GPIO_WritePin>
 80006c6:	e715      	b.n	80004f4 <My_While+0x2c>
			ms = SEND;
 80006c8:	2301      	movs	r3, #1
 80006ca:	7033      	strb	r3, [r6, #0]
			if (cnt_ntb++ < ntb){						   // Check Number of Transmitted Beacons
 80006cc:	4c4e      	ldr	r4, [pc, #312]	; (8000808 <My_While+0x340>)
 80006ce:	7823      	ldrb	r3, [r4, #0]
 80006d0:	1c5a      	adds	r2, r3, #1
 80006d2:	7022      	strb	r2, [r4, #0]
 80006d4:	4a4d      	ldr	r2, [pc, #308]	; (800080c <My_While+0x344>)
 80006d6:	7812      	ldrb	r2, [r2, #0]
 80006d8:	429a      	cmp	r2, r3
 80006da:	d800      	bhi.n	80006de <My_While+0x216>
 80006dc:	e0f3      	b.n	80008c6 <My_While+0x3fe>
				cnt_ovf = 0;							   // Reset cnt_ovf
 80006de:	2200      	movs	r2, #0
	HAL_GPIO_WritePin(BLE_TXE_GPIO_Port, BLE_TXE_Pin, GPIO_PIN_SET);    // Enable the BLE to transmit
 80006e0:	2180      	movs	r1, #128	; 0x80
				cnt_ovf = 0;							   // Reset cnt_ovf
 80006e2:	4b40      	ldr	r3, [pc, #256]	; (80007e4 <My_While+0x31c>)
	HAL_GPIO_WritePin(BLE_TXE_GPIO_Port, BLE_TXE_Pin, GPIO_PIN_SET);    // Enable the BLE to transmit
 80006e4:	0209      	lsls	r1, r1, #8
				cnt_ovf = 0;							   // Reset cnt_ovf
 80006e6:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(BLE_TXE_GPIO_Port, BLE_TXE_Pin, GPIO_PIN_SET);    // Enable the BLE to transmit
 80006e8:	4843      	ldr	r0, [pc, #268]	; (80007f8 <My_While+0x330>)
 80006ea:	3201      	adds	r2, #1
 80006ec:	f001 fa6e 	bl	8001bcc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(VBLUE_GPIO_Port,   VBLUE_Pin,   GPIO_PIN_SET);   	// Turn on the   BLE IC
 80006f0:	2201      	movs	r2, #1
 80006f2:	2102      	movs	r1, #2
 80006f4:	4841      	ldr	r0, [pc, #260]	; (80007fc <My_While+0x334>)
 80006f6:	f001 fa69 	bl	8001bcc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(VBLUE1_GPIO_Port,  VBLUE1_Pin,  GPIO_PIN_SET);   	// Turn on the   BLE IC
 80006fa:	20a0      	movs	r0, #160	; 0xa0
 80006fc:	2201      	movs	r2, #1
 80006fe:	2180      	movs	r1, #128	; 0x80
 8000700:	05c0      	lsls	r0, r0, #23
 8000702:	f001 fa63 	bl	8001bcc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(VBLUE2_GPIO_Port,  VBLUE2_Pin,  GPIO_PIN_SET);   	// Turn on the   BLE IC
 8000706:	20a0      	movs	r0, #160	; 0xa0
 8000708:	2201      	movs	r2, #1
 800070a:	2140      	movs	r1, #64	; 0x40
 800070c:	05c0      	lsls	r0, r0, #23
 800070e:	f001 fa5d 	bl	8001bcc <HAL_GPIO_WritePin>
	HAL_Delay(1); 														// Reset must be released at least 30 usec after the VBLUE is up and stable
 8000712:	2001      	movs	r0, #1
 8000714:	f000 fcba 	bl	800108c <HAL_Delay>
	HAL_GPIO_WritePin(BLE_RST_GPIO_Port, BLE_RST_Pin, GPIO_PIN_SET);  	// Un-Reset the  BLE IC
 8000718:	2180      	movs	r1, #128	; 0x80
 800071a:	2201      	movs	r2, #1
 800071c:	01c9      	lsls	r1, r1, #7
 800071e:	4836      	ldr	r0, [pc, #216]	; (80007f8 <My_While+0x330>)
 8000720:	f001 fa54 	bl	8001bcc <HAL_GPIO_WritePin>
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8000724:	2104      	movs	r1, #4
 8000726:	4a2c      	ldr	r2, [pc, #176]	; (80007d8 <My_While+0x310>)
	HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI); // Device in Stop Mode and WFI from PVD and LPTIM1
 8000728:	2001      	movs	r0, #1
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 800072a:	6813      	ldr	r3, [r2, #0]
 800072c:	430b      	orrs	r3, r1
 800072e:	6013      	str	r3, [r2, #0]
	HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI); // Device in Stop Mode and WFI from PVD and LPTIM1
 8000730:	3903      	subs	r1, #3
 8000732:	f001 fc6d 	bl	8002010 <HAL_PWR_EnterSTOPMode>
	tadv = HAL_LPTIM_ReadCounter(&hlptim1) - tadv;	// Measure Advertising Time After Transmission
 8000736:	4c2d      	ldr	r4, [pc, #180]	; (80007ec <My_While+0x324>)
 8000738:	0020      	movs	r0, r4
 800073a:	f001 fbb5 	bl	8001ea8 <HAL_LPTIM_ReadCounter>
 800073e:	4e30      	ldr	r6, [pc, #192]	; (8000800 <My_While+0x338>)
 8000740:	8833      	ldrh	r3, [r6, #0]
 8000742:	1ac0      	subs	r0, r0, r3
 8000744:	b280      	uxth	r0, r0
 8000746:	8030      	strh	r0, [r6, #0]
	if (tadv <= TADV_MIN) {							// Check compliancy with the Minimum Adertising Time
 8000748:	281e      	cmp	r0, #30
 800074a:	d900      	bls.n	800074e <My_While+0x286>
 800074c:	e1b8      	b.n	8000ac0 <My_While+0x5f8>
		tadv_del = HAL_LPTIM_ReadCounter(&hlptim1);
 800074e:	0020      	movs	r0, r4
 8000750:	f001 fbaa 	bl	8001ea8 <HAL_LPTIM_ReadCounter>
 8000754:	0405      	lsls	r5, r0, #16
 8000756:	0c2d      	lsrs	r5, r5, #16
 8000758:	351e      	adds	r5, #30
		while(HAL_LPTIM_ReadCounter(&hlptim1) < tadv_del + TADV_MIN); // Set tadv Delay
 800075a:	0020      	movs	r0, r4
 800075c:	f001 fba4 	bl	8001ea8 <HAL_LPTIM_ReadCounter>
 8000760:	42a8      	cmp	r0, r5
 8000762:	d3fa      	bcc.n	800075a <My_While+0x292>
 8000764:	e18a      	b.n	8000a7c <My_While+0x5b4>
	if (cdark == 0){
 8000766:	4b20      	ldr	r3, [pc, #128]	; (80007e8 <My_While+0x320>)
 8000768:	781b      	ldrb	r3, [r3, #0]
 800076a:	2b00      	cmp	r3, #0
 800076c:	d100      	bne.n	8000770 <My_While+0x2a8>
 800076e:	e110      	b.n	8000992 <My_While+0x4ca>
	if (sConfigPVD.PVDLevel == PWR_PVDLEVEL_5){
 8000770:	6823      	ldr	r3, [r4, #0]
 8000772:	2ba0      	cmp	r3, #160	; 0xa0
 8000774:	d100      	bne.n	8000778 <My_While+0x2b0>
 8000776:	e1ea      	b.n	8000b4e <My_While+0x686>
	else if (sConfigPVD.PVDLevel == PWR_PVDLEVEL_4){
 8000778:	2b80      	cmp	r3, #128	; 0x80
 800077a:	d100      	bne.n	800077e <My_While+0x2b6>
 800077c:	e1ac      	b.n	8000ad8 <My_While+0x610>
	else if (sConfigPVD.PVDLevel == PWR_PVDLEVEL_3){
 800077e:	2b60      	cmp	r3, #96	; 0x60
 8000780:	d100      	bne.n	8000784 <My_While+0x2bc>
 8000782:	e1ec      	b.n	8000b5e <My_While+0x696>
	else if (sConfigPVD.PVDLevel == PWR_PVDLEVEL_2){
 8000784:	2b40      	cmp	r3, #64	; 0x40
 8000786:	d100      	bne.n	800078a <My_While+0x2c2>
 8000788:	e1f1      	b.n	8000b6e <My_While+0x6a6>
 800078a:	4b21      	ldr	r3, [pc, #132]	; (8000810 <My_While+0x348>)
 800078c:	4698      	mov	r8, r3
 800078e:	681b      	ldr	r3, [r3, #0]
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_PVDO);
 8000790:	2710      	movs	r7, #16
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8000792:	2604      	movs	r6, #4
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_PVDO);
 8000794:	4d10      	ldr	r5, [pc, #64]	; (80007d8 <My_While+0x310>)
	HAL_PWR_ConfigPVD(&sConfigPVD);
 8000796:	0020      	movs	r0, r4
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_PVDO);
 8000798:	682a      	ldr	r2, [r5, #0]
 800079a:	433a      	orrs	r2, r7
 800079c:	602a      	str	r2, [r5, #0]
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 800079e:	682a      	ldr	r2, [r5, #0]
 80007a0:	4332      	orrs	r2, r6
 80007a2:	602a      	str	r2, [r5, #0]
	sConfigPVD.PVDLevel = vh;
 80007a4:	6023      	str	r3, [r4, #0]
	sConfigPVD.Mode = PWR_PVD_MODE_NORMAL;
 80007a6:	2300      	movs	r3, #0
 80007a8:	6063      	str	r3, [r4, #4]
	HAL_PWR_ConfigPVD(&sConfigPVD);
 80007aa:	f001 fbed 	bl	8001f88 <HAL_PWR_ConfigPVD>
		if ((__HAL_PWR_GET_FLAG(PWR_FLAG_PVDO) == 1)) {	// Check if Vstor is below the Decreased Threshold
 80007ae:	686b      	ldr	r3, [r5, #4]
 80007b0:	421e      	tst	r6, r3
 80007b2:	d000      	beq.n	80007b6 <My_While+0x2ee>
 80007b4:	e1c3      	b.n	8000b3e <My_While+0x676>
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_PVDO);	    // CLear Flag
 80007b6:	682b      	ldr	r3, [r5, #0]
 80007b8:	431f      	orrs	r7, r3
 80007ba:	602f      	str	r7, [r5, #0]
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);			// CLear Flag
 80007bc:	682b      	ldr	r3, [r5, #0]
 80007be:	431e      	orrs	r6, r3
	sConfigPVD.PVDLevel = vhi;          	    // Set PVD Threshold  to vhi
 80007c0:	4b14      	ldr	r3, [pc, #80]	; (8000814 <My_While+0x34c>)
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);			// CLear Flag
 80007c2:	602e      	str	r6, [r5, #0]
	sConfigPVD.PVDLevel = vhi;          	    // Set PVD Threshold  to vhi
 80007c4:	681b      	ldr	r3, [r3, #0]
	HAL_PWR_ConfigPVD(&sConfigPVD);			   	// Configure PVD
 80007c6:	0020      	movs	r0, r4
	sConfigPVD.PVDLevel = vhi;          	    // Set PVD Threshold  to vhi
 80007c8:	6023      	str	r3, [r4, #0]
	sConfigPVD.Mode = PWR_PVD_MODE_IT_FALLING;	// Set PVD to detect Rising Vdd and set Interrupt
 80007ca:	4b13      	ldr	r3, [pc, #76]	; (8000818 <My_While+0x350>)
 80007cc:	6063      	str	r3, [r4, #4]
	HAL_PWR_ConfigPVD(&sConfigPVD);			   	// Configure PVD
 80007ce:	f001 fbdb 	bl	8001f88 <HAL_PWR_ConfigPVD>
 80007d2:	e0f9      	b.n	80009c8 <My_While+0x500>
 80007d4:	20000044 	.word	0x20000044
 80007d8:	40007000 	.word	0x40007000
 80007dc:	20000038 	.word	0x20000038
 80007e0:	20000000 	.word	0x20000000
 80007e4:	20000036 	.word	0x20000036
 80007e8:	20000034 	.word	0x20000034
 80007ec:	200000d0 	.word	0x200000d0
 80007f0:	2000003a 	.word	0x2000003a
 80007f4:	0000ffff 	.word	0x0000ffff
 80007f8:	50000800 	.word	0x50000800
 80007fc:	50000400 	.word	0x50000400
 8000800:	20000040 	.word	0x20000040
 8000804:	00010001 	.word	0x00010001
 8000808:	20000035 	.word	0x20000035
 800080c:	20000037 	.word	0x20000037
 8000810:	20000004 	.word	0x20000004
 8000814:	20000008 	.word	0x20000008
 8000818:	00010002 	.word	0x00010002
				cnt_ovf = 0;							 		 // Reset Overflow Counter
 800081c:	700b      	strb	r3, [r1, #0]
	HAL_GPIO_WritePin(BLE_TXE_GPIO_Port, BLE_TXE_Pin, GPIO_PIN_SET);    // Enable the BLE to transmit
 800081e:	2180      	movs	r1, #128	; 0x80
				cdark++;								 		 // Increase cdark
 8000820:	4ad6      	ldr	r2, [pc, #856]	; (8000b7c <My_While+0x6b4>)
	HAL_GPIO_WritePin(BLE_TXE_GPIO_Port, BLE_TXE_Pin, GPIO_PIN_SET);    // Enable the BLE to transmit
 8000822:	0209      	lsls	r1, r1, #8
				cdark++;								 		 // Increase cdark
 8000824:	7813      	ldrb	r3, [r2, #0]
	HAL_GPIO_WritePin(BLE_TXE_GPIO_Port, BLE_TXE_Pin, GPIO_PIN_SET);    // Enable the BLE to transmit
 8000826:	48d6      	ldr	r0, [pc, #856]	; (8000b80 <My_While+0x6b8>)
				cdark++;								 		 // Increase cdark
 8000828:	3301      	adds	r3, #1
 800082a:	7013      	strb	r3, [r2, #0]
	HAL_GPIO_WritePin(BLE_TXE_GPIO_Port, BLE_TXE_Pin, GPIO_PIN_SET);    // Enable the BLE to transmit
 800082c:	2201      	movs	r2, #1
 800082e:	f001 f9cd 	bl	8001bcc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(VBLUE_GPIO_Port,   VBLUE_Pin,   GPIO_PIN_SET);   	// Turn on the   BLE IC
 8000832:	2201      	movs	r2, #1
 8000834:	2102      	movs	r1, #2
 8000836:	48d3      	ldr	r0, [pc, #844]	; (8000b84 <My_While+0x6bc>)
 8000838:	f001 f9c8 	bl	8001bcc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(VBLUE1_GPIO_Port,  VBLUE1_Pin,  GPIO_PIN_SET);   	// Turn on the   BLE IC
 800083c:	20a0      	movs	r0, #160	; 0xa0
 800083e:	2201      	movs	r2, #1
 8000840:	2180      	movs	r1, #128	; 0x80
 8000842:	05c0      	lsls	r0, r0, #23
 8000844:	f001 f9c2 	bl	8001bcc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(VBLUE2_GPIO_Port,  VBLUE2_Pin,  GPIO_PIN_SET);   	// Turn on the   BLE IC
 8000848:	20a0      	movs	r0, #160	; 0xa0
 800084a:	2201      	movs	r2, #1
 800084c:	2140      	movs	r1, #64	; 0x40
 800084e:	05c0      	lsls	r0, r0, #23
 8000850:	f001 f9bc 	bl	8001bcc <HAL_GPIO_WritePin>
	HAL_Delay(1); 														// Reset must be released at least 30 usec after the VBLUE is up and stable
 8000854:	2001      	movs	r0, #1
 8000856:	f000 fc19 	bl	800108c <HAL_Delay>
	HAL_GPIO_WritePin(BLE_RST_GPIO_Port, BLE_RST_Pin, GPIO_PIN_SET);  	// Un-Reset the  BLE IC
 800085a:	2180      	movs	r1, #128	; 0x80
 800085c:	2201      	movs	r2, #1
 800085e:	01c9      	lsls	r1, r1, #7
 8000860:	48c7      	ldr	r0, [pc, #796]	; (8000b80 <My_While+0x6b8>)
 8000862:	f001 f9b3 	bl	8001bcc <HAL_GPIO_WritePin>
				t_ble_on_dark = HAL_LPTIM_ReadCounter(&hlptim1); // Time Stamp Transmission Window
 8000866:	4cc8      	ldr	r4, [pc, #800]	; (8000b88 <My_While+0x6c0>)
 8000868:	0020      	movs	r0, r4
 800086a:	f001 fb1d 	bl	8001ea8 <HAL_LPTIM_ReadCounter>
 800086e:	4dc7      	ldr	r5, [pc, #796]	; (8000b8c <My_While+0x6c4>)
 8000870:	4ec7      	ldr	r6, [pc, #796]	; (8000b90 <My_While+0x6c8>)
 8000872:	8028      	strh	r0, [r5, #0]
				while(HAL_LPTIM_ReadCounter(&hlptim1) < (t_ble_on_dark + ntb*TADV_MIN)); // Time Window for BLE transmission
 8000874:	0020      	movs	r0, r4
 8000876:	f001 fb17 	bl	8001ea8 <HAL_LPTIM_ReadCounter>
 800087a:	7832      	ldrb	r2, [r6, #0]
 800087c:	0113      	lsls	r3, r2, #4
 800087e:	1a9b      	subs	r3, r3, r2
 8000880:	882a      	ldrh	r2, [r5, #0]
 8000882:	005b      	lsls	r3, r3, #1
 8000884:	189b      	adds	r3, r3, r2
 8000886:	4298      	cmp	r0, r3
 8000888:	d3f4      	bcc.n	8000874 <My_While+0x3ac>
	HAL_GPIO_WritePin(BLE_TXE_GPIO_Port,   BLE_TXE_Pin,   GPIO_PIN_RESET);	// Reset the    BLE_TXE (Back to Harvest)
 800088a:	2180      	movs	r1, #128	; 0x80
 800088c:	2200      	movs	r2, #0
 800088e:	0209      	lsls	r1, r1, #8
 8000890:	48bb      	ldr	r0, [pc, #748]	; (8000b80 <My_While+0x6b8>)
 8000892:	f001 f99b 	bl	8001bcc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(VBLUE_GPIO_Port,     VBLUE_Pin,     GPIO_PIN_RESET); 	// Turn OFF the BLE (Back to Harvest)
 8000896:	2200      	movs	r2, #0
 8000898:	2102      	movs	r1, #2
 800089a:	48ba      	ldr	r0, [pc, #744]	; (8000b84 <My_While+0x6bc>)
 800089c:	f001 f996 	bl	8001bcc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(VBLUE1_GPIO_Port,    VBLUE1_Pin,    GPIO_PIN_RESET); 	// Turn OFF the BLE (Back to Harvest)
 80008a0:	20a0      	movs	r0, #160	; 0xa0
 80008a2:	2200      	movs	r2, #0
 80008a4:	2180      	movs	r1, #128	; 0x80
 80008a6:	05c0      	lsls	r0, r0, #23
 80008a8:	f001 f990 	bl	8001bcc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(VBLUE2_GPIO_Port,    VBLUE2_Pin,    GPIO_PIN_RESET); 	// Turn OFF the BLE (Back to Harvest)
 80008ac:	20a0      	movs	r0, #160	; 0xa0
 80008ae:	2200      	movs	r2, #0
 80008b0:	2140      	movs	r1, #64	; 0x40
 80008b2:	05c0      	lsls	r0, r0, #23
 80008b4:	f001 f98a 	bl	8001bcc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BLE_RST_GPIO_Port,   BLE_RST_Pin,   GPIO_PIN_RESET); 	// Reset the    BLE (Back to Harvest)
 80008b8:	2180      	movs	r1, #128	; 0x80
 80008ba:	2200      	movs	r2, #0
 80008bc:	01c9      	lsls	r1, r1, #7
 80008be:	48b0      	ldr	r0, [pc, #704]	; (8000b80 <My_While+0x6b8>)
 80008c0:	f001 f984 	bl	8001bcc <HAL_GPIO_WritePin>
 80008c4:	e631      	b.n	800052a <My_While+0x62>
				ms  = WAIT;
 80008c6:	2700      	movs	r7, #0
				cnt_ovf = 0;							   // Reset cnt_ovf
 80008c8:	4bb2      	ldr	r3, [pc, #712]	; (8000b94 <My_While+0x6cc>)
				HAL_NVIC_EnableIRQ(LPTIM1_IRQn);		   // Enable LPTIM1 Interrupts
 80008ca:	200d      	movs	r0, #13
				cnt_ovf = 0;							   // Reset cnt_ovf
 80008cc:	701f      	strb	r7, [r3, #0]
				ms  = WAIT;
 80008ce:	7037      	strb	r7, [r6, #0]
				HAL_NVIC_EnableIRQ(LPTIM1_IRQn);		   // Enable LPTIM1 Interrupts
 80008d0:	f000 fc1a 	bl	8001108 <HAL_NVIC_EnableIRQ>
				HAL_LPTIM_Counter_Stop(&hlptim1);          // Stop  LPTIM1 Counter
 80008d4:	4dac      	ldr	r5, [pc, #688]	; (8000b88 <My_While+0x6c0>)
 80008d6:	0028      	movs	r0, r5
 80008d8:	f001 fa16 	bl	8001d08 <HAL_LPTIM_Counter_Stop>
				HAL_LPTIM_Counter_Start_IT(&hlptim1, ARR); // Start LPTIM1 Counter
 80008dc:	49ae      	ldr	r1, [pc, #696]	; (8000b98 <My_While+0x6d0>)
 80008de:	0028      	movs	r0, r5
 80008e0:	f001 fab0 	bl	8001e44 <HAL_LPTIM_Counter_Start_IT>
	HAL_GPIO_WritePin(BLE_TXE_GPIO_Port, BLE_TXE_Pin, GPIO_PIN_RESET);  // Enable the BLE to transmit
 80008e4:	2180      	movs	r1, #128	; 0x80
				rtp = (uint16_t)rtps*LPTIM_TIME_UNIT;	   // Set rtp
 80008e6:	4bad      	ldr	r3, [pc, #692]	; (8000b9c <My_While+0x6d4>)
	HAL_GPIO_WritePin(BLE_TXE_GPIO_Port, BLE_TXE_Pin, GPIO_PIN_RESET);  // Enable the BLE to transmit
 80008e8:	0209      	lsls	r1, r1, #8
				rtp = (uint16_t)rtps*LPTIM_TIME_UNIT;	   // Set rtp
 80008ea:	781b      	ldrb	r3, [r3, #0]
	HAL_GPIO_WritePin(BLE_TXE_GPIO_Port, BLE_TXE_Pin, GPIO_PIN_RESET);  // Enable the BLE to transmit
 80008ec:	48a4      	ldr	r0, [pc, #656]	; (8000b80 <My_While+0x6b8>)
				rtp = (uint16_t)rtps*LPTIM_TIME_UNIT;	   // Set rtp
 80008ee:	005a      	lsls	r2, r3, #1
 80008f0:	189a      	adds	r2, r3, r2
 80008f2:	0152      	lsls	r2, r2, #5
 80008f4:	189b      	adds	r3, r3, r2
 80008f6:	009a      	lsls	r2, r3, #2
 80008f8:	1ad3      	subs	r3, r2, r3
 80008fa:	4aa9      	ldr	r2, [pc, #676]	; (8000ba0 <My_While+0x6d8>)
				cnt_ntb = 0;							   // Reset cnt_ntb
 80008fc:	7027      	strb	r7, [r4, #0]
				rtp = (uint16_t)rtps*LPTIM_TIME_UNIT;	   // Set rtp
 80008fe:	8013      	strh	r3, [r2, #0]
	HAL_GPIO_WritePin(BLE_TXE_GPIO_Port, BLE_TXE_Pin, GPIO_PIN_RESET);  // Enable the BLE to transmit
 8000900:	2200      	movs	r2, #0
 8000902:	f001 f963 	bl	8001bcc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(VBLUE_GPIO_Port,   VBLUE_Pin,   GPIO_PIN_SET);    // Turn on the   BLE IC
 8000906:	2201      	movs	r2, #1
 8000908:	2102      	movs	r1, #2
 800090a:	489e      	ldr	r0, [pc, #632]	; (8000b84 <My_While+0x6bc>)
 800090c:	f001 f95e 	bl	8001bcc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(VBLUE1_GPIO_Port,  VBLUE1_Pin,  GPIO_PIN_SET);    // Turn on the   BLE IC
 8000910:	20a0      	movs	r0, #160	; 0xa0
 8000912:	2201      	movs	r2, #1
 8000914:	2180      	movs	r1, #128	; 0x80
 8000916:	05c0      	lsls	r0, r0, #23
 8000918:	f001 f958 	bl	8001bcc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(VBLUE2_GPIO_Port,  VBLUE2_Pin,  GPIO_PIN_SET);    // Turn on the   BLE IC
 800091c:	20a0      	movs	r0, #160	; 0xa0
 800091e:	2201      	movs	r2, #1
 8000920:	2140      	movs	r1, #64	; 0x40
 8000922:	05c0      	lsls	r0, r0, #23
 8000924:	f001 f952 	bl	8001bcc <HAL_GPIO_WritePin>
	HAL_Delay(1); 														// Reset must be released at least 30 usec after the VBLUE is up and stable
 8000928:	2001      	movs	r0, #1
 800092a:	f000 fbaf 	bl	800108c <HAL_Delay>
	HAL_GPIO_WritePin(BLE_RST_GPIO_Port, BLE_RST_Pin, GPIO_PIN_SET);  	// Un-Reset the  BLE IC
 800092e:	2180      	movs	r1, #128	; 0x80
 8000930:	2201      	movs	r2, #1
 8000932:	01c9      	lsls	r1, r1, #7
 8000934:	4892      	ldr	r0, [pc, #584]	; (8000b80 <My_While+0x6b8>)
 8000936:	f001 f949 	bl	8001bcc <HAL_GPIO_WritePin>
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 800093a:	2104      	movs	r1, #4
 800093c:	4a99      	ldr	r2, [pc, #612]	; (8000ba4 <My_While+0x6dc>)
	HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI); // Device in Stop Mode and WFI from PVD and LPTIM1
 800093e:	2001      	movs	r0, #1
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8000940:	6813      	ldr	r3, [r2, #0]
 8000942:	430b      	orrs	r3, r1
 8000944:	6013      	str	r3, [r2, #0]
	HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI); // Device in Stop Mode and WFI from PVD and LPTIM1
 8000946:	3903      	subs	r1, #3
 8000948:	f001 fb62 	bl	8002010 <HAL_PWR_EnterSTOPMode>
	HAL_GPIO_WritePin(BLE_TXE_GPIO_Port,   BLE_TXE_Pin,   GPIO_PIN_RESET);	// Reset the    BLE_TXE (Back to Harvest)
 800094c:	2180      	movs	r1, #128	; 0x80
 800094e:	2200      	movs	r2, #0
 8000950:	0209      	lsls	r1, r1, #8
 8000952:	488b      	ldr	r0, [pc, #556]	; (8000b80 <My_While+0x6b8>)
 8000954:	f001 f93a 	bl	8001bcc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(VBLUE_GPIO_Port,     VBLUE_Pin,     GPIO_PIN_RESET); 	// Turn OFF the BLE (Back to Harvest)
 8000958:	2200      	movs	r2, #0
 800095a:	2102      	movs	r1, #2
 800095c:	4889      	ldr	r0, [pc, #548]	; (8000b84 <My_While+0x6bc>)
 800095e:	f001 f935 	bl	8001bcc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(VBLUE1_GPIO_Port,    VBLUE1_Pin,    GPIO_PIN_RESET); 	// Turn OFF the BLE (Back to Harvest)
 8000962:	20a0      	movs	r0, #160	; 0xa0
 8000964:	2200      	movs	r2, #0
 8000966:	2180      	movs	r1, #128	; 0x80
 8000968:	05c0      	lsls	r0, r0, #23
 800096a:	f001 f92f 	bl	8001bcc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(VBLUE2_GPIO_Port,    VBLUE2_Pin,    GPIO_PIN_RESET); 	// Turn OFF the BLE (Back to Harvest)
 800096e:	20a0      	movs	r0, #160	; 0xa0
 8000970:	2200      	movs	r2, #0
 8000972:	2140      	movs	r1, #64	; 0x40
 8000974:	05c0      	lsls	r0, r0, #23
 8000976:	f001 f929 	bl	8001bcc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BLE_RST_GPIO_Port,   BLE_RST_Pin,   GPIO_PIN_RESET); 	// Reset the    BLE (Back to Harvest)
 800097a:	2180      	movs	r1, #128	; 0x80
 800097c:	2200      	movs	r2, #0
 800097e:	01c9      	lsls	r1, r1, #7
 8000980:	487f      	ldr	r0, [pc, #508]	; (8000b80 <My_While+0x6b8>)
 8000982:	f001 f923 	bl	8001bcc <HAL_GPIO_WritePin>
				tadv = HAL_LPTIM_ReadCounter(&hlptim1);    // Time Stamp tadv
 8000986:	0028      	movs	r0, r5
 8000988:	f001 fa8e 	bl	8001ea8 <HAL_LPTIM_ReadCounter>
 800098c:	4b86      	ldr	r3, [pc, #536]	; (8000ba8 <My_While+0x6e0>)
 800098e:	8018      	strh	r0, [r3, #0]
 8000990:	e5cb      	b.n	800052a <My_While+0x62>
	if (vh == PWR_PVDLEVEL_2){
 8000992:	4a86      	ldr	r2, [pc, #536]	; (8000bac <My_While+0x6e4>)
 8000994:	6813      	ldr	r3, [r2, #0]
 8000996:	2b40      	cmp	r3, #64	; 0x40
 8000998:	d005      	beq.n	80009a6 <My_While+0x4de>
	else if (vh == PWR_PVDLEVEL_3){
 800099a:	2b60      	cmp	r3, #96	; 0x60
 800099c:	d003      	beq.n	80009a6 <My_While+0x4de>
	else if (vh == PWR_PVDLEVEL_4){
 800099e:	2120      	movs	r1, #32
 80009a0:	438b      	bics	r3, r1
 80009a2:	2b80      	cmp	r3, #128	; 0x80
 80009a4:	d102      	bne.n	80009ac <My_While+0x4e4>
		sConfigPVD.PVDLevel = PWR_PVDLEVEL_5;
 80009a6:	3320      	adds	r3, #32
 80009a8:	6023      	str	r3, [r4, #0]
		vh = PWR_PVDLEVEL_5; // Vh = 2.8V
 80009aa:	6013      	str	r3, [r2, #0]
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_PVDO);		// CLear Flag
 80009ac:	2110      	movs	r1, #16
 80009ae:	4b7d      	ldr	r3, [pc, #500]	; (8000ba4 <My_While+0x6dc>)
	HAL_PWR_ConfigPVD(&sConfigPVD);			   	// Configure PVD
 80009b0:	0020      	movs	r0, r4
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_PVDO);		// CLear Flag
 80009b2:	681a      	ldr	r2, [r3, #0]
 80009b4:	430a      	orrs	r2, r1
 80009b6:	601a      	str	r2, [r3, #0]
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);			// CLear Flag
 80009b8:	681a      	ldr	r2, [r3, #0]
 80009ba:	390c      	subs	r1, #12
 80009bc:	430a      	orrs	r2, r1
 80009be:	601a      	str	r2, [r3, #0]
	sConfigPVD.Mode = PWR_PVD_MODE_IT_FALLING;	// Set PVD to detect Rising Vdd
 80009c0:	4b7b      	ldr	r3, [pc, #492]	; (8000bb0 <My_While+0x6e8>)
 80009c2:	6063      	str	r3, [r4, #4]
	HAL_PWR_ConfigPVD(&sConfigPVD);			   	// Configure PVD
 80009c4:	f001 fae0 	bl	8001f88 <HAL_PWR_ConfigPVD>
		pvdi = 0;		            			  // Reset pvdi
 80009c8:	2300      	movs	r3, #0
 80009ca:	4c7a      	ldr	r4, [pc, #488]	; (8000bb4 <My_While+0x6ec>)
	HAL_NVIC_EnableIRQ(PVD_IRQn);
 80009cc:	2001      	movs	r0, #1
		pvdi = 0;		            			  // Reset pvdi
 80009ce:	7023      	strb	r3, [r4, #0]
	HAL_NVIC_EnableIRQ(PVD_IRQn);
 80009d0:	f000 fb9a 	bl	8001108 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 80009d4:	200d      	movs	r0, #13
 80009d6:	f000 fb97 	bl	8001108 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_ClearPendingIRQ(PVD_IRQn);
 80009da:	2001      	movs	r0, #1
 80009dc:	f000 fbd2 	bl	8001184 <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_ClearPendingIRQ(EXTI4_15_IRQn);
 80009e0:	2007      	movs	r0, #7
 80009e2:	f000 fbcf 	bl	8001184 <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_ClearPendingIRQ(LPTIM1_IRQn);
 80009e6:	200d      	movs	r0, #13
 80009e8:	f000 fbcc 	bl	8001184 <HAL_NVIC_ClearPendingIRQ>
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_PVDO);									// CLear Flag
 80009ec:	2110      	movs	r1, #16
 80009ee:	4b6d      	ldr	r3, [pc, #436]	; (8000ba4 <My_While+0x6dc>)
	HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI); 	// Device in Stop Mode and WFI from PVD and LPTIM1
 80009f0:	2001      	movs	r0, #1
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_PVDO);									// CLear Flag
 80009f2:	681a      	ldr	r2, [r3, #0]
 80009f4:	430a      	orrs	r2, r1
 80009f6:	601a      	str	r2, [r3, #0]
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);										// CLear Flag
 80009f8:	681a      	ldr	r2, [r3, #0]
 80009fa:	390c      	subs	r1, #12
 80009fc:	430a      	orrs	r2, r1
 80009fe:	601a      	str	r2, [r3, #0]
	HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI); 	// Device in Stop Mode and WFI from PVD and LPTIM1
 8000a00:	3903      	subs	r1, #3
 8000a02:	f001 fb05 	bl	8002010 <HAL_PWR_EnterSTOPMode>
 8000a06:	e57e      	b.n	8000506 <My_While+0x3e>
				tadv = HAL_LPTIM_ReadCounter(&hlptim1);    // Time Stamp of Advertising Time
 8000a08:	0020      	movs	r0, r4
 8000a0a:	f001 fa4d 	bl	8001ea8 <HAL_LPTIM_ReadCounter>
	HAL_GPIO_WritePin(BLE_TXE_GPIO_Port, BLE_TXE_Pin, GPIO_PIN_RESET);  // Enable the BLE to transmit
 8000a0e:	2180      	movs	r1, #128	; 0x80
				tadv = HAL_LPTIM_ReadCounter(&hlptim1);    // Time Stamp of Advertising Time
 8000a10:	4e65      	ldr	r6, [pc, #404]	; (8000ba8 <My_While+0x6e0>)
				cnt_ovf = 0;							   // Reset cnt_ovf
 8000a12:	4b60      	ldr	r3, [pc, #384]	; (8000b94 <My_While+0x6cc>)
				tadv = HAL_LPTIM_ReadCounter(&hlptim1);    // Time Stamp of Advertising Time
 8000a14:	8030      	strh	r0, [r6, #0]
	HAL_GPIO_WritePin(BLE_TXE_GPIO_Port, BLE_TXE_Pin, GPIO_PIN_RESET);  // Enable the BLE to transmit
 8000a16:	2200      	movs	r2, #0
 8000a18:	0209      	lsls	r1, r1, #8
 8000a1a:	4859      	ldr	r0, [pc, #356]	; (8000b80 <My_While+0x6b8>)
				cnt_ovf = 0;							   // Reset cnt_ovf
 8000a1c:	701d      	strb	r5, [r3, #0]
	HAL_GPIO_WritePin(BLE_TXE_GPIO_Port, BLE_TXE_Pin, GPIO_PIN_RESET);  // Enable the BLE to transmit
 8000a1e:	f001 f8d5 	bl	8001bcc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(VBLUE_GPIO_Port,   VBLUE_Pin,   GPIO_PIN_SET);    // Turn on the   BLE IC
 8000a22:	2201      	movs	r2, #1
 8000a24:	2102      	movs	r1, #2
 8000a26:	4857      	ldr	r0, [pc, #348]	; (8000b84 <My_While+0x6bc>)
 8000a28:	f001 f8d0 	bl	8001bcc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(VBLUE1_GPIO_Port,  VBLUE1_Pin,  GPIO_PIN_SET);    // Turn on the   BLE IC
 8000a2c:	20a0      	movs	r0, #160	; 0xa0
 8000a2e:	2201      	movs	r2, #1
 8000a30:	2180      	movs	r1, #128	; 0x80
 8000a32:	05c0      	lsls	r0, r0, #23
 8000a34:	f001 f8ca 	bl	8001bcc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(VBLUE2_GPIO_Port,  VBLUE2_Pin,  GPIO_PIN_SET);    // Turn on the   BLE IC
 8000a38:	20a0      	movs	r0, #160	; 0xa0
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	2140      	movs	r1, #64	; 0x40
 8000a3e:	05c0      	lsls	r0, r0, #23
 8000a40:	f001 f8c4 	bl	8001bcc <HAL_GPIO_WritePin>
	HAL_Delay(1); 														// Reset must be released at least 30 usec after the VBLUE is up and stable
 8000a44:	2001      	movs	r0, #1
 8000a46:	f000 fb21 	bl	800108c <HAL_Delay>
	HAL_GPIO_WritePin(BLE_RST_GPIO_Port, BLE_RST_Pin, GPIO_PIN_SET);  	// Un-Reset the  BLE IC
 8000a4a:	2180      	movs	r1, #128	; 0x80
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	01c9      	lsls	r1, r1, #7
 8000a50:	484b      	ldr	r0, [pc, #300]	; (8000b80 <My_While+0x6b8>)
 8000a52:	f001 f8bb 	bl	8001bcc <HAL_GPIO_WritePin>
	HAL_Delay(6);															 // Delay to allow the settling of the BLE_WFE signal
 8000a56:	2006      	movs	r0, #6
 8000a58:	f000 fb18 	bl	800108c <HAL_Delay>
	if (HAL_GPIO_ReadPin(BLE_WFE_GPIO_Port, BLE_WFE_Pin) == 1) {		     // 1) Check if BLE is ready to send Data
 8000a5c:	20a0      	movs	r0, #160	; 0xa0
 8000a5e:	2108      	movs	r1, #8
 8000a60:	05c0      	lsls	r0, r0, #23
 8000a62:	f001 f8ad 	bl	8001bc0 <HAL_GPIO_ReadPin>
 8000a66:	2801      	cmp	r0, #1
 8000a68:	d03e      	beq.n	8000ae8 <My_While+0x620>
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8000a6a:	2104      	movs	r1, #4
 8000a6c:	4a4d      	ldr	r2, [pc, #308]	; (8000ba4 <My_While+0x6dc>)
	HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI); // Device in Stop Mode and WFI from PVD and LPTIM1
 8000a6e:	2001      	movs	r0, #1
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8000a70:	6813      	ldr	r3, [r2, #0]
 8000a72:	430b      	orrs	r3, r1
 8000a74:	6013      	str	r3, [r2, #0]
	HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI); // Device in Stop Mode and WFI from PVD and LPTIM1
 8000a76:	3903      	subs	r1, #3
 8000a78:	f001 faca 	bl	8002010 <HAL_PWR_EnterSTOPMode>
	HAL_GPIO_WritePin(BLE_TXE_GPIO_Port,   BLE_TXE_Pin,   GPIO_PIN_RESET);	// Reset the    BLE_TXE (Back to Harvest)
 8000a7c:	2180      	movs	r1, #128	; 0x80
 8000a7e:	2200      	movs	r2, #0
 8000a80:	0209      	lsls	r1, r1, #8
 8000a82:	483f      	ldr	r0, [pc, #252]	; (8000b80 <My_While+0x6b8>)
 8000a84:	f001 f8a2 	bl	8001bcc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(VBLUE_GPIO_Port,     VBLUE_Pin,     GPIO_PIN_RESET); 	// Turn OFF the BLE (Back to Harvest)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	2102      	movs	r1, #2
 8000a8c:	483d      	ldr	r0, [pc, #244]	; (8000b84 <My_While+0x6bc>)
 8000a8e:	f001 f89d 	bl	8001bcc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(VBLUE1_GPIO_Port,    VBLUE1_Pin,    GPIO_PIN_RESET); 	// Turn OFF the BLE (Back to Harvest)
 8000a92:	20a0      	movs	r0, #160	; 0xa0
 8000a94:	2200      	movs	r2, #0
 8000a96:	2180      	movs	r1, #128	; 0x80
 8000a98:	05c0      	lsls	r0, r0, #23
 8000a9a:	f001 f897 	bl	8001bcc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(VBLUE2_GPIO_Port,    VBLUE2_Pin,    GPIO_PIN_RESET); 	// Turn OFF the BLE (Back to Harvest)
 8000a9e:	20a0      	movs	r0, #160	; 0xa0
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	2140      	movs	r1, #64	; 0x40
 8000aa4:	05c0      	lsls	r0, r0, #23
 8000aa6:	f001 f891 	bl	8001bcc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BLE_RST_GPIO_Port,   BLE_RST_Pin,   GPIO_PIN_RESET); 	// Reset the    BLE (Back to Harvest)
 8000aaa:	2180      	movs	r1, #128	; 0x80
 8000aac:	2200      	movs	r2, #0
 8000aae:	01c9      	lsls	r1, r1, #7
 8000ab0:	4833      	ldr	r0, [pc, #204]	; (8000b80 <My_While+0x6b8>)
 8000ab2:	f001 f88b 	bl	8001bcc <HAL_GPIO_WritePin>
				tadv = HAL_LPTIM_ReadCounter(&hlptim1);    // Time Stamp tadv
 8000ab6:	0020      	movs	r0, r4
 8000ab8:	f001 f9f6 	bl	8001ea8 <HAL_LPTIM_ReadCounter>
 8000abc:	8030      	strh	r0, [r6, #0]
 8000abe:	e534      	b.n	800052a <My_While+0x62>
		tadv_del = HAL_LPTIM_ReadCounter(&hlptim1);
 8000ac0:	0020      	movs	r0, r4
 8000ac2:	f001 f9f1 	bl	8001ea8 <HAL_LPTIM_ReadCounter>
 8000ac6:	0405      	lsls	r5, r0, #16
 8000ac8:	0c2d      	lsrs	r5, r5, #16
 8000aca:	350f      	adds	r5, #15
		while(HAL_LPTIM_ReadCounter(&hlptim1) < tadv_del + TFALL_MIN); // Set tadv Delay
 8000acc:	0020      	movs	r0, r4
 8000ace:	f001 f9eb 	bl	8001ea8 <HAL_LPTIM_ReadCounter>
 8000ad2:	4285      	cmp	r5, r0
 8000ad4:	d8fa      	bhi.n	8000acc <My_While+0x604>
 8000ad6:	e7d1      	b.n	8000a7c <My_While+0x5b4>
		vhi = PWR_PVDLEVEL_4;
 8000ad8:	4a37      	ldr	r2, [pc, #220]	; (8000bb8 <My_While+0x6f0>)
 8000ada:	6013      	str	r3, [r2, #0]
		vh = PWR_PVDLEVEL_3; // Vh = 2.4V
 8000adc:	4b33      	ldr	r3, [pc, #204]	; (8000bac <My_While+0x6e4>)
 8000ade:	4698      	mov	r8, r3
 8000ae0:	2360      	movs	r3, #96	; 0x60
 8000ae2:	4642      	mov	r2, r8
 8000ae4:	6013      	str	r3, [r2, #0]
 8000ae6:	e653      	b.n	8000790 <My_While+0x2c8>
		__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ae8:	492e      	ldr	r1, [pc, #184]	; (8000ba4 <My_While+0x6dc>)
 8000aea:	4a34      	ldr	r2, [pc, #208]	; (8000bbc <My_While+0x6f4>)
 8000aec:	680b      	ldr	r3, [r1, #0]
		HAL_UART_DeInit(&hlpuart1);
 8000aee:	4d34      	ldr	r5, [pc, #208]	; (8000bc0 <My_While+0x6f8>)
		__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000af0:	401a      	ands	r2, r3
 8000af2:	2380      	movs	r3, #128	; 0x80
 8000af4:	011b      	lsls	r3, r3, #4
 8000af6:	4313      	orrs	r3, r2
 8000af8:	600b      	str	r3, [r1, #0]
		HAL_UART_DeInit(&hlpuart1);
 8000afa:	0028      	movs	r0, r5
 8000afc:	f002 f818 	bl	8002b30 <HAL_UART_DeInit>
		HAL_UART_Init(&hlpuart1);
 8000b00:	0028      	movs	r0, r5
 8000b02:	f002 f94d 	bl	8002da0 <HAL_UART_Init>
		HAL_UART_MspInit(&hlpuart1);									     // 2) Activate Uart as it is needed only in this case
 8000b06:	0028      	movs	r0, r5
 8000b08:	f000 f98a 	bl	8000e20 <HAL_UART_MspInit>
		HAL_FLASHEx_DATAEEPROM_Unlock();								     // 3) Unlock The Flash
 8000b0c:	f000 fe9e 	bl	800184c <HAL_FLASHEx_DATAEEPROM_Unlock>
		HAL_UART_Receive_DMA(&hlpuart1, transmission_params, NOD_BLE+2);     // 4) Receiving Data through LPUART & DMA
 8000b10:	4b2c      	ldr	r3, [pc, #176]	; (8000bc4 <My_While+0x6fc>)
 8000b12:	2204      	movs	r2, #4
 8000b14:	6819      	ldr	r1, [r3, #0]
 8000b16:	0028      	movs	r0, r5
 8000b18:	f002 f824 	bl	8002b64 <HAL_UART_Receive_DMA>
		HAL_GPIO_TogglePin(BLE_TXE_GPIO_Port, BLE_TXE_Pin);				     // 5) ACK to BLE end of received data
 8000b1c:	2180      	movs	r1, #128	; 0x80
 8000b1e:	4818      	ldr	r0, [pc, #96]	; (8000b80 <My_While+0x6b8>)
 8000b20:	0209      	lsls	r1, r1, #8
 8000b22:	f001 f859 	bl	8001bd8 <HAL_GPIO_TogglePin>
		while (HAL_GPIO_ReadPin(BTH_GPIO_Port, BTH_Pin) == 0);               // 6) Waiting for END of Transmission from BLE
 8000b26:	20a0      	movs	r0, #160	; 0xa0
 8000b28:	2110      	movs	r1, #16
 8000b2a:	05c0      	lsls	r0, r0, #23
 8000b2c:	f001 f848 	bl	8001bc0 <HAL_GPIO_ReadPin>
 8000b30:	2800      	cmp	r0, #0
 8000b32:	d0f8      	beq.n	8000b26 <My_While+0x65e>
		HAL_FLASHEx_DATAEEPROM_Lock();									     // 7) Lock the Flash
 8000b34:	f000 fea2 	bl	800187c <HAL_FLASHEx_DATAEEPROM_Lock>
		HAL_NVIC_SystemReset();											     // 8) Reset the MCU
 8000b38:	f000 fafa 	bl	8001130 <HAL_NVIC_SystemReset>
 8000b3c:	e795      	b.n	8000a6a <My_While+0x5a2>
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_PVDO);	    // CLear Flag
 8000b3e:	682b      	ldr	r3, [r5, #0]
 8000b40:	431f      	orrs	r7, r3
 8000b42:	602f      	str	r7, [r5, #0]
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);			// CLear Flag
 8000b44:	682b      	ldr	r3, [r5, #0]
 8000b46:	431e      	orrs	r6, r3
 8000b48:	602e      	str	r6, [r5, #0]
	sConfigPVD.PVDLevel = vh;          	        // Set PVD Threshold vh
 8000b4a:	4643      	mov	r3, r8
 8000b4c:	e63a      	b.n	80007c4 <My_While+0x2fc>
		vhi = PWR_PVDLEVEL_5;
 8000b4e:	4a1a      	ldr	r2, [pc, #104]	; (8000bb8 <My_While+0x6f0>)
 8000b50:	6013      	str	r3, [r2, #0]
		vh = PWR_PVDLEVEL_4; // Vh = 2.6V
 8000b52:	4b16      	ldr	r3, [pc, #88]	; (8000bac <My_While+0x6e4>)
 8000b54:	4698      	mov	r8, r3
 8000b56:	2380      	movs	r3, #128	; 0x80
 8000b58:	4642      	mov	r2, r8
 8000b5a:	6013      	str	r3, [r2, #0]
 8000b5c:	e618      	b.n	8000790 <My_While+0x2c8>
		vhi = PWR_PVDLEVEL_3;
 8000b5e:	4a16      	ldr	r2, [pc, #88]	; (8000bb8 <My_While+0x6f0>)
 8000b60:	6013      	str	r3, [r2, #0]
		vh = PWR_PVDLEVEL_2; // Vh = 2.2V
 8000b62:	4b12      	ldr	r3, [pc, #72]	; (8000bac <My_While+0x6e4>)
 8000b64:	4698      	mov	r8, r3
 8000b66:	2340      	movs	r3, #64	; 0x40
 8000b68:	4642      	mov	r2, r8
 8000b6a:	6013      	str	r3, [r2, #0]
 8000b6c:	e610      	b.n	8000790 <My_While+0x2c8>
		vhi = PWR_PVDLEVEL_2;
 8000b6e:	4a12      	ldr	r2, [pc, #72]	; (8000bb8 <My_While+0x6f0>)
 8000b70:	6013      	str	r3, [r2, #0]
		vh = PWR_PVDLEVEL_2; // Vh = 2.2V
 8000b72:	4a0e      	ldr	r2, [pc, #56]	; (8000bac <My_While+0x6e4>)
 8000b74:	4690      	mov	r8, r2
 8000b76:	6013      	str	r3, [r2, #0]
 8000b78:	e60a      	b.n	8000790 <My_While+0x2c8>
 8000b7a:	46c0      	nop			; (mov r8, r8)
 8000b7c:	20000034 	.word	0x20000034
 8000b80:	50000800 	.word	0x50000800
 8000b84:	50000400 	.word	0x50000400
 8000b88:	200000d0 	.word	0x200000d0
 8000b8c:	2000003e 	.word	0x2000003e
 8000b90:	20000037 	.word	0x20000037
 8000b94:	20000036 	.word	0x20000036
 8000b98:	0000ffff 	.word	0x0000ffff
 8000b9c:	2000003c 	.word	0x2000003c
 8000ba0:	2000003a 	.word	0x2000003a
 8000ba4:	40007000 	.word	0x40007000
 8000ba8:	20000040 	.word	0x20000040
 8000bac:	20000004 	.word	0x20000004
 8000bb0:	00010002 	.word	0x00010002
 8000bb4:	20000038 	.word	0x20000038
 8000bb8:	20000008 	.word	0x20000008
 8000bbc:	ffffe7ff 	.word	0xffffe7ff
 8000bc0:	20000050 	.word	0x20000050
 8000bc4:	2000004c 	.word	0x2000004c

08000bc8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bc8:	b510      	push	{r4, lr}
 8000bca:	b098      	sub	sp, #96	; 0x60
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bcc:	2230      	movs	r2, #48	; 0x30
 8000bce:	2100      	movs	r1, #0
 8000bd0:	a80c      	add	r0, sp, #48	; 0x30
 8000bd2:	f002 fc3d 	bl	8003450 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bd6:	2214      	movs	r2, #20
 8000bd8:	2100      	movs	r1, #0
 8000bda:	4668      	mov	r0, sp
 8000bdc:	f002 fc38 	bl	8003450 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000be0:	2218      	movs	r2, #24
 8000be2:	2100      	movs	r1, #0
 8000be4:	a805      	add	r0, sp, #20
 8000be6:	f002 fc33 	bl	8003450 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000bea:	23c0      	movs	r3, #192	; 0xc0
 8000bec:	4a13      	ldr	r2, [pc, #76]	; (8000c3c <SystemClock_Config+0x74>)
 8000bee:	015b      	lsls	r3, r3, #5
 8000bf0:	6811      	ldr	r1, [r2, #0]
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000bf2:	2400      	movs	r4, #0
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000bf4:	430b      	orrs	r3, r1
 8000bf6:	6013      	str	r3, [r2, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 8000bf8:	2318      	movs	r3, #24
 8000bfa:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000bfc:	3b17      	subs	r3, #23
 8000bfe:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000c00:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8000c02:	23a0      	movs	r3, #160	; 0xa0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c04:	a80b      	add	r0, sp, #44	; 0x2c
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8000c06:	021b      	lsls	r3, r3, #8
 8000c08:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000c0a:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c0c:	9414      	str	r4, [sp, #80]	; 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c0e:	f001 fa2d 	bl	800206c <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c12:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c14:	2100      	movs	r1, #0
 8000c16:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c18:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000c1a:	9401      	str	r4, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c1c:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c1e:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c20:	9404      	str	r4, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c22:	f001 fd1d 	bl	8002660 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_LPTIM1;
 8000c26:	2384      	movs	r3, #132	; 0x84
 8000c28:	9305      	str	r3, [sp, #20]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
  PeriphClkInit.LptimClockSelection = RCC_LPTIM1CLKSOURCE_LSI;
 8000c2a:	2380      	movs	r3, #128	; 0x80

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c2c:	a805      	add	r0, sp, #20
  PeriphClkInit.LptimClockSelection = RCC_LPTIM1CLKSOURCE_LSI;
 8000c2e:	02db      	lsls	r3, r3, #11
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000c30:	9408      	str	r4, [sp, #32]
  PeriphClkInit.LptimClockSelection = RCC_LPTIM1CLKSOURCE_LSI;
 8000c32:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c34:	f001 fea4 	bl	8002980 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8000c38:	b018      	add	sp, #96	; 0x60
 8000c3a:	bd10      	pop	{r4, pc}
 8000c3c:	40007000 	.word	0x40007000

08000c40 <main>:
{
 8000c40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c42:	46c6      	mov	lr, r8
 8000c44:	b500      	push	{lr}
 8000c46:	b088      	sub	sp, #32
  HAL_Init();
 8000c48:	f000 f9fa 	bl	8001040 <HAL_Init>
  SystemClock_Config();
 8000c4c:	f7ff ffbc 	bl	8000bc8 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c50:	2214      	movs	r2, #20
 8000c52:	2100      	movs	r1, #0
 8000c54:	a803      	add	r0, sp, #12
 8000c56:	f002 fbfb 	bl	8003450 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c5a:	2304      	movs	r3, #4
 8000c5c:	4d4d      	ldr	r5, [pc, #308]	; (8000d94 <main+0x154>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c5e:	2601      	movs	r6, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c60:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BLE_RST_Pin|BLE_TXE_Pin, GPIO_PIN_RESET);
 8000c62:	24c0      	movs	r4, #192	; 0xc0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c64:	431a      	orrs	r2, r3
 8000c66:	62ea      	str	r2, [r5, #44]	; 0x2c
 8000c68:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOC, BLE_RST_Pin|BLE_TXE_Pin, GPIO_PIN_RESET);
 8000c6a:	0224      	lsls	r4, r4, #8
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c6c:	4013      	ands	r3, r2
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c6e:	2202      	movs	r2, #2
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c70:	9300      	str	r3, [sp, #0]
 8000c72:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c74:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOC, BLE_RST_Pin|BLE_TXE_Pin, GPIO_PIN_RESET);
 8000c76:	0021      	movs	r1, r4
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c78:	4333      	orrs	r3, r6
 8000c7a:	62eb      	str	r3, [r5, #44]	; 0x2c
 8000c7c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c7e:	4690      	mov	r8, r2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c80:	4033      	ands	r3, r6
 8000c82:	9301      	str	r3, [sp, #4]
 8000c84:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c86:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOC, BLE_RST_Pin|BLE_TXE_Pin, GPIO_PIN_RESET);
 8000c88:	4843      	ldr	r0, [pc, #268]	; (8000d98 <main+0x158>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c8a:	4313      	orrs	r3, r2
 8000c8c:	62eb      	str	r3, [r5, #44]	; 0x2c
 8000c8e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : BLE_WFE_Pin */
  GPIO_InitStruct.Pin = BLE_WFE_Pin;
 8000c90:	2708      	movs	r7, #8
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c92:	4013      	ands	r3, r2
 8000c94:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOC, BLE_RST_Pin|BLE_TXE_Pin, GPIO_PIN_RESET);
 8000c96:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c98:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOC, BLE_RST_Pin|BLE_TXE_Pin, GPIO_PIN_RESET);
 8000c9a:	f000 ff97 	bl	8001bcc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, TEST_Pin|VHTS_Pin|VBLUE2_Pin|VBLUE1_Pin, GPIO_PIN_RESET);
 8000c9e:	20a0      	movs	r0, #160	; 0xa0
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	21e1      	movs	r1, #225	; 0xe1
 8000ca4:	05c0      	lsls	r0, r0, #23
 8000ca6:	f000 ff91 	bl	8001bcc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(VBLUE_GPIO_Port, VBLUE_Pin, GPIO_PIN_RESET);
 8000caa:	2200      	movs	r2, #0
 8000cac:	2102      	movs	r1, #2
 8000cae:	483b      	ldr	r0, [pc, #236]	; (8000d9c <main+0x15c>)
 8000cb0:	f000 ff8c 	bl	8001bcc <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = BLE_RST_Pin|BLE_TXE_Pin;
 8000cb4:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb6:	2400      	movs	r4, #0
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cb8:	a903      	add	r1, sp, #12
 8000cba:	4837      	ldr	r0, [pc, #220]	; (8000d98 <main+0x158>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cbc:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbe:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc0:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cc2:	f000 fe0f 	bl	80018e4 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc6:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Pin = TEST_Pin|VHTS_Pin|VBLUE2_Pin|VBLUE1_Pin;
 8000cc8:	23e1      	movs	r3, #225	; 0xe1
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cca:	a903      	add	r1, sp, #12
 8000ccc:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = TEST_Pin|VHTS_Pin|VBLUE2_Pin|VBLUE1_Pin;
 8000cce:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd0:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd2:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd4:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd6:	f000 fe05 	bl	80018e4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_9|GPIO_PIN_10;
 8000cda:	4b31      	ldr	r3, [pc, #196]	; (8000da0 <main+0x160>)
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cdc:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_9|GPIO_PIN_10;
 8000cde:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ce0:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce2:	a903      	add	r1, sp, #12
 8000ce4:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ce6:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce8:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cea:	f000 fdfb 	bl	80018e4 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BLE_WFE_GPIO_Port, &GPIO_InitStruct);
 8000cee:	20a0      	movs	r0, #160	; 0xa0
 8000cf0:	a903      	add	r1, sp, #12
 8000cf2:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = BLE_WFE_Pin;
 8000cf4:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cf6:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf8:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(BLE_WFE_GPIO_Port, &GPIO_InitStruct);
 8000cfa:	f000 fdf3 	bl	80018e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTH_Pin */
  GPIO_InitStruct.Pin = BTH_Pin;
 8000cfe:	2310      	movs	r3, #16
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BTH_GPIO_Port, &GPIO_InitStruct);
 8000d00:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Pin = BTH_Pin;
 8000d02:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d04:	4b27      	ldr	r3, [pc, #156]	; (8000da4 <main+0x164>)
  HAL_GPIO_Init(BTH_GPIO_Port, &GPIO_InitStruct);
 8000d06:	a903      	add	r1, sp, #12
 8000d08:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d0a:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0c:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(BTH_GPIO_Port, &GPIO_InitStruct);
 8000d0e:	f000 fde9 	bl	80018e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBLUE_Pin */
  GPIO_InitStruct.Pin = VBLUE_Pin;
 8000d12:	4643      	mov	r3, r8
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(VBLUE_GPIO_Port, &GPIO_InitStruct);
 8000d14:	a903      	add	r1, sp, #12
 8000d16:	4821      	ldr	r0, [pc, #132]	; (8000d9c <main+0x15c>)
  GPIO_InitStruct.Pin = VBLUE_Pin;
 8000d18:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d1a:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1c:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1e:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(VBLUE_GPIO_Port, &GPIO_InitStruct);
 8000d20:	f000 fde0 	bl	80018e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 1, 0);
 8000d24:	2200      	movs	r2, #0
 8000d26:	2101      	movs	r1, #1
 8000d28:	2007      	movs	r0, #7
 8000d2a:	f000 f9c1 	bl	80010b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000d2e:	2007      	movs	r0, #7
 8000d30:	f000 f9ea 	bl	8001108 <HAL_NVIC_EnableIRQ>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d34:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  hlpuart1.Instance = LPUART1;
 8000d36:	481c      	ldr	r0, [pc, #112]	; (8000da8 <main+0x168>)
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d38:	4333      	orrs	r3, r6
 8000d3a:	632b      	str	r3, [r5, #48]	; 0x30
 8000d3c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d3e:	6084      	str	r4, [r0, #8]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d40:	401e      	ands	r6, r3
 8000d42:	9603      	str	r6, [sp, #12]
 8000d44:	9b03      	ldr	r3, [sp, #12]
  hlpuart1.Instance = LPUART1;
 8000d46:	4b19      	ldr	r3, [pc, #100]	; (8000dac <main+0x16c>)
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000d48:	60c4      	str	r4, [r0, #12]
  hlpuart1.Instance = LPUART1;
 8000d4a:	6003      	str	r3, [r0, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000d4c:	23e1      	movs	r3, #225	; 0xe1
 8000d4e:	025b      	lsls	r3, r3, #9
 8000d50:	6043      	str	r3, [r0, #4]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000d52:	230c      	movs	r3, #12
 8000d54:	6143      	str	r3, [r0, #20]
  hlpuart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8000d56:	2380      	movs	r3, #128	; 0x80
 8000d58:	021b      	lsls	r3, r3, #8
 8000d5a:	6343      	str	r3, [r0, #52]	; 0x34
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000d5c:	6104      	str	r4, [r0, #16]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d5e:	6184      	str	r4, [r0, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d60:	6204      	str	r4, [r0, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 8000d62:	6247      	str	r7, [r0, #36]	; 0x24
  if (HAL_HalfDuplex_Init(&hlpuart1) != HAL_OK)
 8000d64:	f002 f9b4 	bl	80030d0 <HAL_HalfDuplex_Init>
  hlptim1.Instance = LPTIM1;
 8000d68:	4811      	ldr	r0, [pc, #68]	; (8000db0 <main+0x170>)
 8000d6a:	4b12      	ldr	r3, [pc, #72]	; (8000db4 <main+0x174>)
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8000d6c:	6044      	str	r4, [r0, #4]
  hlptim1.Instance = LPTIM1;
 8000d6e:	6003      	str	r3, [r0, #0]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV128;
 8000d70:	23e0      	movs	r3, #224	; 0xe0
 8000d72:	011b      	lsls	r3, r3, #4
 8000d74:	6083      	str	r3, [r0, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8000d76:	4b10      	ldr	r3, [pc, #64]	; (8000db8 <main+0x178>)
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8000d78:	6204      	str	r4, [r0, #32]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8000d7a:	6143      	str	r3, [r0, #20]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_ENDOFPERIOD;
 8000d7c:	2380      	movs	r3, #128	; 0x80
 8000d7e:	03db      	lsls	r3, r3, #15
 8000d80:	6243      	str	r3, [r0, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8000d82:	6284      	str	r4, [r0, #40]	; 0x28
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8000d84:	f000 ff3e 	bl	8001c04 <HAL_LPTIM_Init>
	My_Main();
 8000d88:	f7ff fb56 	bl	8000438 <My_Main>
		My_While();
 8000d8c:	f7ff fb9c 	bl	80004c8 <My_While>
 8000d90:	e7fc      	b.n	8000d8c <main+0x14c>
 8000d92:	46c0      	nop			; (mov r8, r8)
 8000d94:	40021000 	.word	0x40021000
 8000d98:	50000800 	.word	0x50000800
 8000d9c:	50000400 	.word	0x50000400
 8000da0:	00000602 	.word	0x00000602
 8000da4:	10110000 	.word	0x10110000
 8000da8:	20000050 	.word	0x20000050
 8000dac:	40004800 	.word	0x40004800
 8000db0:	200000d0 	.word	0x200000d0
 8000db4:	40007c00 	.word	0x40007c00
 8000db8:	0000ffff 	.word	0x0000ffff

08000dbc <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000dbc:	4770      	bx	lr
 8000dbe:	46c0      	nop			; (mov r8, r8)

08000dc0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dc0:	2101      	movs	r1, #1
 8000dc2:	4b09      	ldr	r3, [pc, #36]	; (8000de8 <HAL_MspInit+0x28>)
{
 8000dc4:	b510      	push	{r4, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dc6:	6b5a      	ldr	r2, [r3, #52]	; 0x34

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 0, 0);
 8000dc8:	2001      	movs	r0, #1
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dca:	430a      	orrs	r2, r1
 8000dcc:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dce:	2280      	movs	r2, #128	; 0x80
 8000dd0:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8000dd2:	0552      	lsls	r2, r2, #21
 8000dd4:	430a      	orrs	r2, r1
 8000dd6:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_NVIC_SetPriority(PVD_IRQn, 0, 0);
 8000dd8:	2100      	movs	r1, #0
 8000dda:	2200      	movs	r2, #0
 8000ddc:	f000 f968 	bl	80010b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 8000de0:	2001      	movs	r0, #1
 8000de2:	f000 f991 	bl	8001108 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000de6:	bd10      	pop	{r4, pc}
 8000de8:	40021000 	.word	0x40021000

08000dec <HAL_LPTIM_MspInit>:
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
  if(hlptim->Instance==LPTIM1)
 8000dec:	4b0a      	ldr	r3, [pc, #40]	; (8000e18 <HAL_LPTIM_MspInit+0x2c>)
 8000dee:	6802      	ldr	r2, [r0, #0]
{
 8000df0:	b510      	push	{r4, lr}
  if(hlptim->Instance==LPTIM1)
 8000df2:	429a      	cmp	r2, r3
 8000df4:	d000      	beq.n	8000df8 <HAL_LPTIM_MspInit+0xc>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 8000df6:	bd10      	pop	{r4, pc}
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8000df8:	2380      	movs	r3, #128	; 0x80
 8000dfa:	4a08      	ldr	r2, [pc, #32]	; (8000e1c <HAL_LPTIM_MspInit+0x30>)
 8000dfc:	061b      	lsls	r3, r3, #24
 8000dfe:	6b91      	ldr	r1, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 2, 0);
 8000e00:	200d      	movs	r0, #13
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8000e02:	430b      	orrs	r3, r1
 8000e04:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 2, 0);
 8000e06:	2102      	movs	r1, #2
 8000e08:	2200      	movs	r2, #0
 8000e0a:	f000 f951 	bl	80010b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 8000e0e:	200d      	movs	r0, #13
 8000e10:	f000 f97a 	bl	8001108 <HAL_NVIC_EnableIRQ>
}
 8000e14:	e7ef      	b.n	8000df6 <HAL_LPTIM_MspInit+0xa>
 8000e16:	46c0      	nop			; (mov r8, r8)
 8000e18:	40007c00 	.word	0x40007c00
 8000e1c:	40021000 	.word	0x40021000

08000e20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e20:	b530      	push	{r4, r5, lr}
 8000e22:	0005      	movs	r5, r0
 8000e24:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e26:	2214      	movs	r2, #20
 8000e28:	2100      	movs	r1, #0
 8000e2a:	a801      	add	r0, sp, #4
 8000e2c:	f002 fb10 	bl	8003450 <memset>
  if(huart->Instance==LPUART1)
 8000e30:	4b1d      	ldr	r3, [pc, #116]	; (8000ea8 <HAL_UART_MspInit+0x88>)
 8000e32:	682a      	ldr	r2, [r5, #0]
 8000e34:	429a      	cmp	r2, r3
 8000e36:	d001      	beq.n	8000e3c <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000e38:	b007      	add	sp, #28
 8000e3a:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000e3c:	2280      	movs	r2, #128	; 0x80
 8000e3e:	4b1b      	ldr	r3, [pc, #108]	; (8000eac <HAL_UART_MspInit+0x8c>)
 8000e40:	02d2      	lsls	r2, r2, #11
 8000e42:	6b99      	ldr	r1, [r3, #56]	; 0x38
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e44:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000e46:	430a      	orrs	r2, r1
 8000e48:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e4e:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e50:	4311      	orrs	r1, r2
 8000e52:	62d9      	str	r1, [r3, #44]	; 0x2c
 8000e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e56:	a901      	add	r1, sp, #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e58:	4013      	ands	r3, r2
 8000e5a:	9300      	str	r3, [sp, #0]
 8000e5c:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e5e:	2304      	movs	r3, #4
 8000e60:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e62:	330e      	adds	r3, #14
 8000e64:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e66:	3b0f      	subs	r3, #15
 8000e68:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 8000e6a:	3303      	adds	r3, #3
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e6c:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 8000e6e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e70:	f000 fd38 	bl	80018e4 <HAL_GPIO_Init>
    hdma_lpuart1_rx.Instance = DMA1_Channel3;
 8000e74:	4c0e      	ldr	r4, [pc, #56]	; (8000eb0 <HAL_UART_MspInit+0x90>)
 8000e76:	4b0f      	ldr	r3, [pc, #60]	; (8000eb4 <HAL_UART_MspInit+0x94>)
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000e78:	2280      	movs	r2, #128	; 0x80
    hdma_lpuart1_rx.Instance = DMA1_Channel3;
 8000e7a:	6023      	str	r3, [r4, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_5;
 8000e7c:	2305      	movs	r3, #5
 8000e7e:	6063      	str	r3, [r4, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e80:	2300      	movs	r3, #0
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8000e82:	0020      	movs	r0, r4
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e84:	60a3      	str	r3, [r4, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e86:	60e3      	str	r3, [r4, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000e88:	6122      	str	r2, [r4, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e8a:	6163      	str	r3, [r4, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e8c:	61a3      	str	r3, [r4, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 8000e8e:	61e3      	str	r3, [r4, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000e90:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8000e92:	f000 f983 	bl	800119c <HAL_DMA_Init>
 8000e96:	2800      	cmp	r0, #0
 8000e98:	d102      	bne.n	8000ea0 <HAL_UART_MspInit+0x80>
    __HAL_LINKDMA(huart,hdmarx,hdma_lpuart1_rx);
 8000e9a:	66ec      	str	r4, [r5, #108]	; 0x6c
 8000e9c:	62a5      	str	r5, [r4, #40]	; 0x28
}
 8000e9e:	e7cb      	b.n	8000e38 <HAL_UART_MspInit+0x18>
      Error_Handler();
 8000ea0:	f7ff ff8c 	bl	8000dbc <Error_Handler>
 8000ea4:	e7f9      	b.n	8000e9a <HAL_UART_MspInit+0x7a>
 8000ea6:	46c0      	nop			; (mov r8, r8)
 8000ea8:	40004800 	.word	0x40004800
 8000eac:	40021000 	.word	0x40021000
 8000eb0:	20000100 	.word	0x20000100
 8000eb4:	40020030 	.word	0x40020030

08000eb8 <HAL_UART_MspDeInit>:
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
  if(huart->Instance==LPUART1)
 8000eb8:	4b0a      	ldr	r3, [pc, #40]	; (8000ee4 <HAL_UART_MspDeInit+0x2c>)
 8000eba:	6802      	ldr	r2, [r0, #0]
{
 8000ebc:	b510      	push	{r4, lr}
 8000ebe:	0004      	movs	r4, r0
  if(huart->Instance==LPUART1)
 8000ec0:	429a      	cmp	r2, r3
 8000ec2:	d000      	beq.n	8000ec6 <HAL_UART_MspDeInit+0xe>
  /* USER CODE BEGIN LPUART1_MspDeInit 1 */

  /* USER CODE END LPUART1_MspDeInit 1 */
  }

}
 8000ec4:	bd10      	pop	{r4, pc}
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2);
 8000ec6:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_LPUART1_CLK_DISABLE();
 8000ec8:	4a07      	ldr	r2, [pc, #28]	; (8000ee8 <HAL_UART_MspDeInit+0x30>)
 8000eca:	4908      	ldr	r1, [pc, #32]	; (8000eec <HAL_UART_MspDeInit+0x34>)
 8000ecc:	6b93      	ldr	r3, [r2, #56]	; 0x38
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2);
 8000ece:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_LPUART1_CLK_DISABLE();
 8000ed0:	400b      	ands	r3, r1
 8000ed2:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2);
 8000ed4:	2104      	movs	r1, #4
 8000ed6:	f000 fdeb 	bl	8001ab0 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 8000eda:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8000edc:	f000 f9a4 	bl	8001228 <HAL_DMA_DeInit>
}
 8000ee0:	e7f0      	b.n	8000ec4 <HAL_UART_MspDeInit+0xc>
 8000ee2:	46c0      	nop			; (mov r8, r8)
 8000ee4:	40004800 	.word	0x40004800
 8000ee8:	40021000 	.word	0x40021000
 8000eec:	fffbffff 	.word	0xfffbffff

08000ef0 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ef0:	4770      	bx	lr
 8000ef2:	46c0      	nop			; (mov r8, r8)

08000ef4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ef4:	e7fe      	b.n	8000ef4 <HardFault_Handler>
 8000ef6:	46c0      	nop			; (mov r8, r8)

08000ef8 <SVC_Handler>:
 8000ef8:	4770      	bx	lr
 8000efa:	46c0      	nop			; (mov r8, r8)

08000efc <PendSV_Handler>:
 8000efc:	4770      	bx	lr
 8000efe:	46c0      	nop			; (mov r8, r8)

08000f00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f00:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f02:	f000 f8b1 	bl	8001068 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f06:	bd10      	pop	{r4, pc}

08000f08 <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 8000f08:	b510      	push	{r4, lr}
  /* USER CODE BEGIN PVD_IRQn 0 */
	pvdi++;
 8000f0a:	4a05      	ldr	r2, [pc, #20]	; (8000f20 <PVD_IRQHandler+0x18>)
	HAL_NVIC_DisableIRQ(PVD_IRQn);
 8000f0c:	2001      	movs	r0, #1
	pvdi++;
 8000f0e:	7813      	ldrb	r3, [r2, #0]
 8000f10:	3301      	adds	r3, #1
 8000f12:	7013      	strb	r3, [r2, #0]
	HAL_NVIC_DisableIRQ(PVD_IRQn);
 8000f14:	f000 f902 	bl	800111c <HAL_NVIC_DisableIRQ>
  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 8000f18:	f001 f89a 	bl	8002050 <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 8000f1c:	bd10      	pop	{r4, pc}
 8000f1e:	46c0      	nop			; (mov r8, r8)
 8000f20:	20000038 	.word	0x20000038

08000f24 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000f24:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */
//	HAL_NVIC_DisableIRQ(EXTI4_15_IRQn);
  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8000f26:	2010      	movs	r0, #16
 8000f28:	f000 fe60 	bl	8001bec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000f2c:	bd10      	pop	{r4, pc}
 8000f2e:	46c0      	nop			; (mov r8, r8)

08000f30 <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt / LPTIM1 wake-up interrupt through EXTI line 29.
  */
void LPTIM1_IRQHandler(void)
{
 8000f30:	b510      	push	{r4, lr}
  /* USER CODE BEGIN LPTIM1_IRQn 0 */
	HAL_NVIC_DisableIRQ(LPTIM1_IRQn);
 8000f32:	200d      	movs	r0, #13
 8000f34:	f000 f8f2 	bl	800111c <HAL_NVIC_DisableIRQ>
  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 8000f38:	4801      	ldr	r0, [pc, #4]	; (8000f40 <LPTIM1_IRQHandler+0x10>)
 8000f3a:	f000 ffc7 	bl	8001ecc <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 8000f3e:	bd10      	pop	{r4, pc}
 8000f40:	200000d0 	.word	0x200000d0

08000f44 <SystemInit>:
  * @retval None
  */
void SystemInit (void)
{
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8000f44:	2280      	movs	r2, #128	; 0x80
 8000f46:	4b10      	ldr	r3, [pc, #64]	; (8000f88 <SystemInit+0x44>)
 8000f48:	0052      	lsls	r2, r2, #1
 8000f4a:	6819      	ldr	r1, [r3, #0]
 8000f4c:	430a      	orrs	r2, r1
 8000f4e:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8000f50:	68da      	ldr	r2, [r3, #12]
 8000f52:	490e      	ldr	r1, [pc, #56]	; (8000f8c <SystemInit+0x48>)
 8000f54:	400a      	ands	r2, r1
 8000f56:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8000f58:	681a      	ldr	r2, [r3, #0]
 8000f5a:	490d      	ldr	r1, [pc, #52]	; (8000f90 <SystemInit+0x4c>)
 8000f5c:	400a      	ands	r2, r1

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000f5e:	2101      	movs	r1, #1
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8000f60:	601a      	str	r2, [r3, #0]
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000f62:	689a      	ldr	r2, [r3, #8]
 8000f64:	438a      	bics	r2, r1
 8000f66:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8000f68:	681a      	ldr	r2, [r3, #0]
 8000f6a:	490a      	ldr	r1, [pc, #40]	; (8000f94 <SystemInit+0x50>)
 8000f6c:	400a      	ands	r2, r1
 8000f6e:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8000f70:	68da      	ldr	r2, [r3, #12]
 8000f72:	4909      	ldr	r1, [pc, #36]	; (8000f98 <SystemInit+0x54>)
 8000f74:	400a      	ands	r2, r1
 8000f76:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000f78:	2200      	movs	r2, #0
 8000f7a:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000f7c:	2280      	movs	r2, #128	; 0x80
 8000f7e:	4b07      	ldr	r3, [pc, #28]	; (8000f9c <SystemInit+0x58>)
 8000f80:	0512      	lsls	r2, r2, #20
 8000f82:	609a      	str	r2, [r3, #8]
#endif
}
 8000f84:	4770      	bx	lr
 8000f86:	46c0      	nop			; (mov r8, r8)
 8000f88:	40021000 	.word	0x40021000
 8000f8c:	88ff400c 	.word	0x88ff400c
 8000f90:	fef6fff6 	.word	0xfef6fff6
 8000f94:	fffbffff 	.word	0xfffbffff
 8000f98:	ff02ffff 	.word	0xff02ffff
 8000f9c:	e000ed00 	.word	0xe000ed00

08000fa0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000fa0:	480d      	ldr	r0, [pc, #52]	; (8000fd8 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000fa2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8000fa4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000fa6:	e003      	b.n	8000fb0 <LoopCopyDataInit>

08000fa8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000fa8:	4b0c      	ldr	r3, [pc, #48]	; (8000fdc <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8000faa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000fac:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000fae:	3104      	adds	r1, #4

08000fb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8000fb0:	480b      	ldr	r0, [pc, #44]	; (8000fe0 <LoopForever+0xa>)
  ldr  r3, =_edata
 8000fb2:	4b0c      	ldr	r3, [pc, #48]	; (8000fe4 <LoopForever+0xe>)
  adds  r2, r0, r1
 8000fb4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000fb6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000fb8:	d3f6      	bcc.n	8000fa8 <CopyDataInit>
  ldr  r2, =_sbss
 8000fba:	4a0b      	ldr	r2, [pc, #44]	; (8000fe8 <LoopForever+0x12>)
  b  LoopFillZerobss
 8000fbc:	e002      	b.n	8000fc4 <LoopFillZerobss>

08000fbe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8000fbe:	2300      	movs	r3, #0
  str  r3, [r2]
 8000fc0:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fc2:	3204      	adds	r2, #4

08000fc4 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8000fc4:	4b09      	ldr	r3, [pc, #36]	; (8000fec <LoopForever+0x16>)
  cmp  r2, r3
 8000fc6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000fc8:	d3f9      	bcc.n	8000fbe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000fca:	f7ff ffbb 	bl	8000f44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fce:	f002 fa1b 	bl	8003408 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fd2:	f7ff fe35 	bl	8000c40 <main>

08000fd6 <LoopForever>:

LoopForever:
    b LoopForever
 8000fd6:	e7fe      	b.n	8000fd6 <LoopForever>
   ldr   r0, =_estack
 8000fd8:	20002000 	.word	0x20002000
  ldr  r3, =_sidata
 8000fdc:	0800354c 	.word	0x0800354c
  ldr  r0, =_sdata
 8000fe0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000fe4:	20000018 	.word	0x20000018
  ldr  r2, =_sbss
 8000fe8:	20000018 	.word	0x20000018
  ldr  r3, = _ebss
 8000fec:	20000164 	.word	0x20000164

08000ff0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ff0:	e7fe      	b.n	8000ff0 <ADC1_COMP_IRQHandler>
	...

08000ff4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ff4:	b510      	push	{r4, lr}
 8000ff6:	0004      	movs	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ff8:	20fa      	movs	r0, #250	; 0xfa
 8000ffa:	4b0e      	ldr	r3, [pc, #56]	; (8001034 <HAL_InitTick+0x40>)
 8000ffc:	0080      	lsls	r0, r0, #2
 8000ffe:	7819      	ldrb	r1, [r3, #0]
 8001000:	f7ff f882 	bl	8000108 <__udivsi3>
 8001004:	4b0c      	ldr	r3, [pc, #48]	; (8001038 <HAL_InitTick+0x44>)
 8001006:	0001      	movs	r1, r0
 8001008:	6818      	ldr	r0, [r3, #0]
 800100a:	f7ff f87d 	bl	8000108 <__udivsi3>
 800100e:	f000 f89d 	bl	800114c <HAL_SYSTICK_Config>
  {
    return HAL_ERROR;
 8001012:	2301      	movs	r3, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001014:	2800      	cmp	r0, #0
 8001016:	d101      	bne.n	800101c <HAL_InitTick+0x28>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001018:	2c03      	cmp	r4, #3
 800101a:	d901      	bls.n	8001020 <HAL_InitTick+0x2c>
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800101c:	0018      	movs	r0, r3
 800101e:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001020:	2200      	movs	r2, #0
 8001022:	0021      	movs	r1, r4
 8001024:	3801      	subs	r0, #1
 8001026:	f000 f843 	bl	80010b0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800102a:	4b04      	ldr	r3, [pc, #16]	; (800103c <HAL_InitTick+0x48>)
 800102c:	601c      	str	r4, [r3, #0]
 800102e:	2300      	movs	r3, #0
 8001030:	e7f4      	b.n	800101c <HAL_InitTick+0x28>
 8001032:	46c0      	nop			; (mov r8, r8)
 8001034:	20000010 	.word	0x20000010
 8001038:	2000000c 	.word	0x2000000c
 800103c:	20000014 	.word	0x20000014

08001040 <HAL_Init>:
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001040:	2140      	movs	r1, #64	; 0x40
 8001042:	4a08      	ldr	r2, [pc, #32]	; (8001064 <HAL_Init+0x24>)
{
 8001044:	b510      	push	{r4, lr}
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001046:	6813      	ldr	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001048:	2000      	movs	r0, #0
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800104a:	430b      	orrs	r3, r1
 800104c:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800104e:	f7ff ffd1 	bl	8000ff4 <HAL_InitTick>
 8001052:	1e04      	subs	r4, r0, #0
 8001054:	d002      	beq.n	800105c <HAL_Init+0x1c>
    status = HAL_ERROR;
 8001056:	2401      	movs	r4, #1
}
 8001058:	0020      	movs	r0, r4
 800105a:	bd10      	pop	{r4, pc}
    HAL_MspInit();
 800105c:	f7ff feb0 	bl	8000dc0 <HAL_MspInit>
 8001060:	e7fa      	b.n	8001058 <HAL_Init+0x18>
 8001062:	46c0      	nop			; (mov r8, r8)
 8001064:	40022000 	.word	0x40022000

08001068 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001068:	4a03      	ldr	r2, [pc, #12]	; (8001078 <HAL_IncTick+0x10>)
 800106a:	4b04      	ldr	r3, [pc, #16]	; (800107c <HAL_IncTick+0x14>)
 800106c:	6811      	ldr	r1, [r2, #0]
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	185b      	adds	r3, r3, r1
 8001072:	6013      	str	r3, [r2, #0]
}
 8001074:	4770      	bx	lr
 8001076:	46c0      	nop			; (mov r8, r8)
 8001078:	20000148 	.word	0x20000148
 800107c:	20000010 	.word	0x20000010

08001080 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001080:	4b01      	ldr	r3, [pc, #4]	; (8001088 <HAL_GetTick+0x8>)
 8001082:	6818      	ldr	r0, [r3, #0]
}
 8001084:	4770      	bx	lr
 8001086:	46c0      	nop			; (mov r8, r8)
 8001088:	20000148 	.word	0x20000148

0800108c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800108c:	b570      	push	{r4, r5, r6, lr}
 800108e:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001090:	f7ff fff6 	bl	8001080 <HAL_GetTick>
 8001094:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001096:	1c63      	adds	r3, r4, #1
 8001098:	d002      	beq.n	80010a0 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800109a:	4b04      	ldr	r3, [pc, #16]	; (80010ac <HAL_Delay+0x20>)
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	18e4      	adds	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010a0:	f7ff ffee 	bl	8001080 <HAL_GetTick>
 80010a4:	1b40      	subs	r0, r0, r5
 80010a6:	42a0      	cmp	r0, r4
 80010a8:	d3fa      	bcc.n	80010a0 <HAL_Delay+0x14>
  {
  }
}
 80010aa:	bd70      	pop	{r4, r5, r6, pc}
 80010ac:	20000010 	.word	0x20000010

080010b0 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010b0:	22ff      	movs	r2, #255	; 0xff
 80010b2:	2303      	movs	r3, #3
 80010b4:	b530      	push	{r4, r5, lr}
 80010b6:	0014      	movs	r4, r2
 80010b8:	b2c5      	uxtb	r5, r0
 80010ba:	402b      	ands	r3, r5
 80010bc:	00db      	lsls	r3, r3, #3
 80010be:	409c      	lsls	r4, r3
 80010c0:	0189      	lsls	r1, r1, #6
 80010c2:	400a      	ands	r2, r1
 80010c4:	43e4      	mvns	r4, r4
 80010c6:	409a      	lsls	r2, r3
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 80010c8:	2800      	cmp	r0, #0
 80010ca:	db0b      	blt.n	80010e4 <HAL_NVIC_SetPriority+0x34>
 80010cc:	4b0c      	ldr	r3, [pc, #48]	; (8001100 <HAL_NVIC_SetPriority+0x50>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010ce:	0880      	lsrs	r0, r0, #2
 80010d0:	469c      	mov	ip, r3
 80010d2:	23c0      	movs	r3, #192	; 0xc0
 80010d4:	0080      	lsls	r0, r0, #2
 80010d6:	4460      	add	r0, ip
 80010d8:	009b      	lsls	r3, r3, #2
 80010da:	58c1      	ldr	r1, [r0, r3]
 80010dc:	400c      	ands	r4, r1
 80010de:	4322      	orrs	r2, r4
 80010e0:	50c2      	str	r2, [r0, r3]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 80010e2:	bd30      	pop	{r4, r5, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010e4:	230f      	movs	r3, #15
 80010e6:	4907      	ldr	r1, [pc, #28]	; (8001104 <HAL_NVIC_SetPriority+0x54>)
 80010e8:	402b      	ands	r3, r5
 80010ea:	468c      	mov	ip, r1
 80010ec:	3b08      	subs	r3, #8
 80010ee:	089b      	lsrs	r3, r3, #2
 80010f0:	009b      	lsls	r3, r3, #2
 80010f2:	4463      	add	r3, ip
 80010f4:	69d9      	ldr	r1, [r3, #28]
 80010f6:	400c      	ands	r4, r1
 80010f8:	4322      	orrs	r2, r4
 80010fa:	61da      	str	r2, [r3, #28]
 80010fc:	e7f1      	b.n	80010e2 <HAL_NVIC_SetPriority+0x32>
 80010fe:	46c0      	nop			; (mov r8, r8)
 8001100:	e000e100 	.word	0xe000e100
 8001104:	e000ed00 	.word	0xe000ed00

08001108 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001108:	231f      	movs	r3, #31
 800110a:	4018      	ands	r0, r3
 800110c:	3b1e      	subs	r3, #30
 800110e:	4083      	lsls	r3, r0
 8001110:	4a01      	ldr	r2, [pc, #4]	; (8001118 <HAL_NVIC_EnableIRQ+0x10>)
 8001112:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001114:	4770      	bx	lr
 8001116:	46c0      	nop			; (mov r8, r8)
 8001118:	e000e100 	.word	0xe000e100

0800111c <HAL_NVIC_DisableIRQ>:
  NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800111c:	231f      	movs	r3, #31
 800111e:	4018      	ands	r0, r3
 8001120:	3b1e      	subs	r3, #30
 8001122:	4083      	lsls	r3, r0
 8001124:	2280      	movs	r2, #128	; 0x80
 8001126:	4901      	ldr	r1, [pc, #4]	; (800112c <HAL_NVIC_DisableIRQ+0x10>)
 8001128:	508b      	str	r3, [r1, r2]
    /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 800112a:	4770      	bx	lr
 800112c:	e000e100 	.word	0xe000e100

08001130 <HAL_NVIC_SystemReset>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001130:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001134:	4b03      	ldr	r3, [pc, #12]	; (8001144 <HAL_NVIC_SystemReset+0x14>)
 8001136:	4a04      	ldr	r2, [pc, #16]	; (8001148 <HAL_NVIC_SystemReset+0x18>)
 8001138:	60da      	str	r2, [r3, #12]
 800113a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 800113e:	46c0      	nop			; (mov r8, r8)
 8001140:	e7fd      	b.n	800113e <HAL_NVIC_SystemReset+0xe>
 8001142:	46c0      	nop			; (mov r8, r8)
 8001144:	e000ed00 	.word	0xe000ed00
 8001148:	05fa0004 	.word	0x05fa0004

0800114c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800114c:	4a0a      	ldr	r2, [pc, #40]	; (8001178 <HAL_SYSTICK_Config+0x2c>)
 800114e:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 8001150:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001152:	4293      	cmp	r3, r2
 8001154:	d80e      	bhi.n	8001174 <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001156:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001158:	4a08      	ldr	r2, [pc, #32]	; (800117c <HAL_SYSTICK_Config+0x30>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800115a:	4809      	ldr	r0, [pc, #36]	; (8001180 <HAL_SYSTICK_Config+0x34>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800115c:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800115e:	6a03      	ldr	r3, [r0, #32]
 8001160:	0609      	lsls	r1, r1, #24
 8001162:	021b      	lsls	r3, r3, #8
 8001164:	0a1b      	lsrs	r3, r3, #8
 8001166:	430b      	orrs	r3, r1
 8001168:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800116a:	2300      	movs	r3, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800116c:	2000      	movs	r0, #0
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800116e:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001170:	3307      	adds	r3, #7
 8001172:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001174:	4770      	bx	lr
 8001176:	46c0      	nop			; (mov r8, r8)
 8001178:	00ffffff 	.word	0x00ffffff
 800117c:	e000e010 	.word	0xe000e010
 8001180:	e000ed00 	.word	0xe000ed00

08001184 <HAL_NVIC_ClearPendingIRQ>:
  NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001184:	231f      	movs	r3, #31
 8001186:	22c0      	movs	r2, #192	; 0xc0
 8001188:	4018      	ands	r0, r3
 800118a:	3b1e      	subs	r3, #30
 800118c:	4083      	lsls	r3, r0
 800118e:	4902      	ldr	r1, [pc, #8]	; (8001198 <HAL_NVIC_ClearPendingIRQ+0x14>)
 8001190:	0052      	lsls	r2, r2, #1
 8001192:	508b      	str	r3, [r1, r2]
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{ 
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
}
 8001194:	4770      	bx	lr
 8001196:	46c0      	nop			; (mov r8, r8)
 8001198:	e000e100 	.word	0xe000e100

0800119c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800119c:	b570      	push	{r4, r5, r6, lr}
 800119e:	1e04      	subs	r4, r0, #0
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80011a0:	d038      	beq.n	8001214 <HAL_DMA_Init+0x78>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80011a2:	6805      	ldr	r5, [r0, #0]
 80011a4:	4b1c      	ldr	r3, [pc, #112]	; (8001218 <HAL_DMA_Init+0x7c>)
 80011a6:	2114      	movs	r1, #20
 80011a8:	18e8      	adds	r0, r5, r3
 80011aa:	f7fe ffad 	bl	8000108 <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 80011ae:	4b1b      	ldr	r3, [pc, #108]	; (800121c <HAL_DMA_Init+0x80>)

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80011b0:	2202      	movs	r2, #2
  hdma->DmaBaseAddress = DMA1;
 80011b2:	6423      	str	r3, [r4, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 80011b4:	2325      	movs	r3, #37	; 0x25
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80011b6:	0080      	lsls	r0, r0, #2
 80011b8:	6460      	str	r0, [r4, #68]	; 0x44
  hdma->State = HAL_DMA_STATE_BUSY;
 80011ba:	54e2      	strb	r2, [r4, r3]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80011bc:	682b      	ldr	r3, [r5, #0]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80011be:	4a18      	ldr	r2, [pc, #96]	; (8001220 <HAL_DMA_Init+0x84>)
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80011c0:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80011c2:	401a      	ands	r2, r3
  tmp |=  hdma->Init.Direction        |
 80011c4:	68e3      	ldr	r3, [r4, #12]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011c6:	6926      	ldr	r6, [r4, #16]
  tmp |=  hdma->Init.Direction        |
 80011c8:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011ca:	4333      	orrs	r3, r6
 80011cc:	6966      	ldr	r6, [r4, #20]
 80011ce:	4333      	orrs	r3, r6
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011d0:	69a6      	ldr	r6, [r4, #24]
 80011d2:	4333      	orrs	r3, r6
 80011d4:	69e6      	ldr	r6, [r4, #28]
 80011d6:	4333      	orrs	r3, r6
          hdma->Init.Mode                | hdma->Init.Priority;
 80011d8:	6a26      	ldr	r6, [r4, #32]
 80011da:	4333      	orrs	r3, r6
  tmp |=  hdma->Init.Direction        |
 80011dc:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80011de:	602b      	str	r3, [r5, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80011e0:	2380      	movs	r3, #128	; 0x80
 80011e2:	01db      	lsls	r3, r3, #7
 80011e4:	4299      	cmp	r1, r3
 80011e6:	d00c      	beq.n	8001202 <HAL_DMA_Init+0x66>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80011e8:	231c      	movs	r3, #28
 80011ea:	4018      	ands	r0, r3
 80011ec:	3b0d      	subs	r3, #13
 80011ee:	4083      	lsls	r3, r0
 80011f0:	4a0c      	ldr	r2, [pc, #48]	; (8001224 <HAL_DMA_Init+0x88>)
 80011f2:	6811      	ldr	r1, [r2, #0]
 80011f4:	4399      	bics	r1, r3
 80011f6:	6011      	str	r1, [r2, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80011f8:	6863      	ldr	r3, [r4, #4]
 80011fa:	6811      	ldr	r1, [r2, #0]
 80011fc:	4083      	lsls	r3, r0
 80011fe:	430b      	orrs	r3, r1
 8001200:	6013      	str	r3, [r2, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001202:	2300      	movs	r3, #0

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001204:	2225      	movs	r2, #37	; 0x25
 8001206:	2101      	movs	r1, #1

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;

  return HAL_OK;
 8001208:	2000      	movs	r0, #0
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800120a:	63e3      	str	r3, [r4, #60]	; 0x3c
  hdma->State  = HAL_DMA_STATE_READY;
 800120c:	54a1      	strb	r1, [r4, r2]
  hdma->Lock = HAL_UNLOCKED;
 800120e:	3a01      	subs	r2, #1
 8001210:	54a3      	strb	r3, [r4, r2]
}
 8001212:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8001214:	2001      	movs	r0, #1
 8001216:	e7fc      	b.n	8001212 <HAL_DMA_Init+0x76>
 8001218:	bffdfff8 	.word	0xbffdfff8
 800121c:	40020000 	.word	0x40020000
 8001220:	ffff800f 	.word	0xffff800f
 8001224:	400200a8 	.word	0x400200a8

08001228 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8001228:	b570      	push	{r4, r5, r6, lr}
 800122a:	1e04      	subs	r4, r0, #0

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 800122c:	d024      	beq.n	8001278 <HAL_DMA_DeInit+0x50>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 800122e:	2501      	movs	r5, #1
 8001230:	6806      	ldr	r6, [r0, #0]

  /* Compute the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001232:	2114      	movs	r1, #20
  __HAL_DMA_DISABLE(hdma);
 8001234:	6833      	ldr	r3, [r6, #0]
 8001236:	43ab      	bics	r3, r5
 8001238:	6033      	str	r3, [r6, #0]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800123a:	4b10      	ldr	r3, [pc, #64]	; (800127c <HAL_DMA_DeInit+0x54>)
 800123c:	18f0      	adds	r0, r6, r3
 800123e:	f7fe ff63 	bl	8000108 <__udivsi3>
 8001242:	0082      	lsls	r2, r0, #2

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001244:	201c      	movs	r0, #28
 8001246:	4010      	ands	r0, r2
  hdma->Instance->CCR  = 0U;
 8001248:	2300      	movs	r3, #0
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800124a:	4085      	lsls	r5, r0
  hdma->DmaBaseAddress = DMA1;
 800124c:	490c      	ldr	r1, [pc, #48]	; (8001280 <HAL_DMA_DeInit+0x58>)
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800124e:	6462      	str	r2, [r4, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 8001250:	6421      	str	r1, [r4, #64]	; 0x40
  hdma->Instance->CCR  = 0U;
 8001252:	6033      	str	r3, [r6, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001254:	604d      	str	r5, [r1, #4]

  /* Reset DMA channel selection register */
  /* DMA1 */
  DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001256:	210f      	movs	r1, #15
 8001258:	4081      	lsls	r1, r0
 800125a:	4d0a      	ldr	r5, [pc, #40]	; (8001284 <HAL_DMA_DeInit+0x5c>)
  hdma->State = HAL_DMA_STATE_RESET;

  /* Release Lock */
  __HAL_UNLOCK(hdma);

  return HAL_OK;
 800125c:	2000      	movs	r0, #0
  DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800125e:	682a      	ldr	r2, [r5, #0]
 8001260:	438a      	bics	r2, r1
 8001262:	602a      	str	r2, [r5, #0]
  hdma->State = HAL_DMA_STATE_RESET;
 8001264:	2225      	movs	r2, #37	; 0x25
  hdma->XferCpltCallback = NULL;
 8001266:	62e3      	str	r3, [r4, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8001268:	6323      	str	r3, [r4, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 800126a:	6363      	str	r3, [r4, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 800126c:	63a3      	str	r3, [r4, #56]	; 0x38
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800126e:	63e3      	str	r3, [r4, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_RESET;
 8001270:	54a3      	strb	r3, [r4, r2]
  __HAL_UNLOCK(hdma);
 8001272:	3a01      	subs	r2, #1
 8001274:	54a3      	strb	r3, [r4, r2]
}
 8001276:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8001278:	2001      	movs	r0, #1
 800127a:	e7fc      	b.n	8001276 <HAL_DMA_DeInit+0x4e>
 800127c:	bffdfff8 	.word	0xbffdfff8
 8001280:	40020000 	.word	0x40020000
 8001284:	400200a8 	.word	0x400200a8

08001288 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001288:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800128a:	2524      	movs	r5, #36	; 0x24
 800128c:	5d44      	ldrb	r4, [r0, r5]
{
 800128e:	b083      	sub	sp, #12
  __HAL_LOCK(hdma);
 8001290:	2c01      	cmp	r4, #1
 8001292:	d02e      	beq.n	80012f2 <HAL_DMA_Start_IT+0x6a>
 8001294:	2401      	movs	r4, #1

  if(HAL_DMA_STATE_READY == hdma->State)
 8001296:	2625      	movs	r6, #37	; 0x25
  __HAL_LOCK(hdma);
 8001298:	5544      	strb	r4, [r0, r5]
  if(HAL_DMA_STATE_READY == hdma->State)
 800129a:	5d84      	ldrb	r4, [r0, r6]
 800129c:	b2e4      	uxtb	r4, r4
 800129e:	2c01      	cmp	r4, #1
 80012a0:	d123      	bne.n	80012ea <HAL_DMA_Start_IT+0x62>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80012a2:	3d22      	subs	r5, #34	; 0x22
 80012a4:	5585      	strb	r5, [r0, r6]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80012a6:	2500      	movs	r5, #0

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80012a8:	6807      	ldr	r7, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80012aa:	63c5      	str	r5, [r0, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 80012ac:	683d      	ldr	r5, [r7, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80012ae:	6c46      	ldr	r6, [r0, #68]	; 0x44
    __HAL_DMA_DISABLE(hdma);
 80012b0:	43a5      	bics	r5, r4
 80012b2:	603d      	str	r5, [r7, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80012b4:	6c05      	ldr	r5, [r0, #64]	; 0x40
 80012b6:	9501      	str	r5, [sp, #4]
 80012b8:	251c      	movs	r5, #28
 80012ba:	4035      	ands	r5, r6
 80012bc:	40ac      	lsls	r4, r5
 80012be:	9d01      	ldr	r5, [sp, #4]
 80012c0:	606c      	str	r4, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80012c2:	607b      	str	r3, [r7, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80012c4:	6883      	ldr	r3, [r0, #8]
 80012c6:	2b10      	cmp	r3, #16
 80012c8:	d015      	beq.n	80012f6 <HAL_DMA_Start_IT+0x6e>
    if(NULL != hdma->XferHalfCpltCallback )
 80012ca:	6b03      	ldr	r3, [r0, #48]	; 0x30
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80012cc:	60b9      	str	r1, [r7, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80012ce:	60fa      	str	r2, [r7, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d015      	beq.n	8001300 <HAL_DMA_Start_IT+0x78>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012d4:	220e      	movs	r2, #14
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	4313      	orrs	r3, r2
 80012da:	603b      	str	r3, [r7, #0]
    __HAL_DMA_ENABLE(hdma);
 80012dc:	2201      	movs	r2, #1
  HAL_StatusTypeDef status = HAL_OK;
 80012de:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	4313      	orrs	r3, r2
 80012e4:	603b      	str	r3, [r7, #0]
}
 80012e6:	b003      	add	sp, #12
 80012e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_UNLOCK(hdma);
 80012ea:	2300      	movs	r3, #0
 80012ec:	5543      	strb	r3, [r0, r5]
    status = HAL_BUSY;
 80012ee:	2002      	movs	r0, #2
 80012f0:	e7f9      	b.n	80012e6 <HAL_DMA_Start_IT+0x5e>
  __HAL_LOCK(hdma);
 80012f2:	2002      	movs	r0, #2
 80012f4:	e7f7      	b.n	80012e6 <HAL_DMA_Start_IT+0x5e>
    if(NULL != hdma->XferHalfCpltCallback )
 80012f6:	6b03      	ldr	r3, [r0, #48]	; 0x30
    hdma->Instance->CPAR = DstAddress;
 80012f8:	60ba      	str	r2, [r7, #8]
    hdma->Instance->CMAR = SrcAddress;
 80012fa:	60f9      	str	r1, [r7, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d1e9      	bne.n	80012d4 <HAL_DMA_Start_IT+0x4c>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001300:	2204      	movs	r2, #4
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	4393      	bics	r3, r2
 8001306:	603b      	str	r3, [r7, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	3206      	adds	r2, #6
 800130c:	4313      	orrs	r3, r2
 800130e:	603b      	str	r3, [r7, #0]
 8001310:	e7e4      	b.n	80012dc <HAL_DMA_Start_IT+0x54>
 8001312:	46c0      	nop			; (mov r8, r8)

08001314 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8001314:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001316:	46de      	mov	lr, fp
 8001318:	4657      	mov	r7, sl
 800131a:	464e      	mov	r6, r9
 800131c:	4645      	mov	r5, r8
  uint32_t flags = 0;
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800131e:	4be9      	ldr	r3, [pc, #932]	; (80016c4 <FLASH_SetErrorCode+0x3b0>)
{
 8001320:	b5e0      	push	{r5, r6, r7, lr}
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8001322:	699a      	ldr	r2, [r3, #24]
 8001324:	2380      	movs	r3, #128	; 0x80
 8001326:	005b      	lsls	r3, r3, #1
{
 8001328:	b0b7      	sub	sp, #220	; 0xdc
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800132a:	421a      	tst	r2, r3
 800132c:	d100      	bne.n	8001330 <FLASH_SetErrorCode+0x1c>
 800132e:	e12f      	b.n	8001590 <FLASH_SetErrorCode+0x27c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001330:	2002      	movs	r0, #2
 8001332:	49e5      	ldr	r1, [pc, #916]	; (80016c8 <FLASH_SetErrorCode+0x3b4>)
 8001334:	2490      	movs	r4, #144	; 0x90
 8001336:	694a      	ldr	r2, [r1, #20]
 8001338:	2684      	movs	r6, #132	; 0x84
 800133a:	4302      	orrs	r2, r0
 800133c:	614a      	str	r2, [r1, #20]
 800133e:	4ae3      	ldr	r2, [pc, #908]	; (80016cc <FLASH_SetErrorCode+0x3b8>)
 8001340:	21e0      	movs	r1, #224	; 0xe0
 8001342:	4694      	mov	ip, r2
 8001344:	4ae2      	ldr	r2, [pc, #904]	; (80016d0 <FLASH_SetErrorCode+0x3bc>)
 8001346:	48e3      	ldr	r0, [pc, #908]	; (80016d4 <FLASH_SetErrorCode+0x3c0>)
 8001348:	4693      	mov	fp, r2
 800134a:	4ae3      	ldr	r2, [pc, #908]	; (80016d8 <FLASH_SetErrorCode+0x3c4>)
 800134c:	4de3      	ldr	r5, [pc, #908]	; (80016dc <FLASH_SetErrorCode+0x3c8>)
 800134e:	9206      	str	r2, [sp, #24]
 8001350:	4ae3      	ldr	r2, [pc, #908]	; (80016e0 <FLASH_SetErrorCode+0x3cc>)
 8001352:	4fe4      	ldr	r7, [pc, #912]	; (80016e4 <FLASH_SetErrorCode+0x3d0>)
 8001354:	9205      	str	r2, [sp, #20]
 8001356:	2292      	movs	r2, #146	; 0x92
 8001358:	0112      	lsls	r2, r2, #4
 800135a:	9204      	str	r2, [sp, #16]
 800135c:	4ae2      	ldr	r2, [pc, #904]	; (80016e8 <FLASH_SetErrorCode+0x3d4>)
 800135e:	0064      	lsls	r4, r4, #1
 8001360:	9203      	str	r2, [sp, #12]
 8001362:	4ae2      	ldr	r2, [pc, #904]	; (80016ec <FLASH_SetErrorCode+0x3d8>)
 8001364:	01b6      	lsls	r6, r6, #6
 8001366:	9202      	str	r2, [sp, #8]
 8001368:	4ae1      	ldr	r2, [pc, #900]	; (80016f0 <FLASH_SetErrorCode+0x3dc>)
 800136a:	00c9      	lsls	r1, r1, #3
 800136c:	9201      	str	r2, [sp, #4]
 800136e:	3a20      	subs	r2, #32
 8001370:	4691      	mov	r9, r2
 8001372:	2290      	movs	r2, #144	; 0x90
 8001374:	0112      	lsls	r2, r2, #4
 8001376:	4690      	mov	r8, r2
 8001378:	4ade      	ldr	r2, [pc, #888]	; (80016f4 <FLASH_SetErrorCode+0x3e0>)
 800137a:	9216      	str	r2, [sp, #88]	; 0x58
 800137c:	4ade      	ldr	r2, [pc, #888]	; (80016f8 <FLASH_SetErrorCode+0x3e4>)
 800137e:	9215      	str	r2, [sp, #84]	; 0x54
 8001380:	22a4      	movs	r2, #164	; 0xa4
 8001382:	00d2      	lsls	r2, r2, #3
 8001384:	9214      	str	r2, [sp, #80]	; 0x50
 8001386:	4add      	ldr	r2, [pc, #884]	; (80016fc <FLASH_SetErrorCode+0x3e8>)
 8001388:	9213      	str	r2, [sp, #76]	; 0x4c
 800138a:	4add      	ldr	r2, [pc, #884]	; (8001700 <FLASH_SetErrorCode+0x3ec>)
 800138c:	9212      	str	r2, [sp, #72]	; 0x48
 800138e:	4add      	ldr	r2, [pc, #884]	; (8001704 <FLASH_SetErrorCode+0x3f0>)
 8001390:	9211      	str	r2, [sp, #68]	; 0x44
 8001392:	3a20      	subs	r2, #32
 8001394:	9210      	str	r2, [sp, #64]	; 0x40
 8001396:	4adc      	ldr	r2, [pc, #880]	; (8001708 <FLASH_SetErrorCode+0x3f4>)
 8001398:	920f      	str	r2, [sp, #60]	; 0x3c
 800139a:	4adc      	ldr	r2, [pc, #880]	; (800170c <FLASH_SetErrorCode+0x3f8>)
 800139c:	920e      	str	r2, [sp, #56]	; 0x38
 800139e:	22d2      	movs	r2, #210	; 0xd2
 80013a0:	0112      	lsls	r2, r2, #4
 80013a2:	920d      	str	r2, [sp, #52]	; 0x34
 80013a4:	4ada      	ldr	r2, [pc, #872]	; (8001710 <FLASH_SetErrorCode+0x3fc>)
 80013a6:	920c      	str	r2, [sp, #48]	; 0x30
 80013a8:	4ada      	ldr	r2, [pc, #872]	; (8001714 <FLASH_SetErrorCode+0x400>)
 80013aa:	920b      	str	r2, [sp, #44]	; 0x2c
 80013ac:	4ada      	ldr	r2, [pc, #872]	; (8001718 <FLASH_SetErrorCode+0x404>)
 80013ae:	920a      	str	r2, [sp, #40]	; 0x28
 80013b0:	3a20      	subs	r2, #32
 80013b2:	9209      	str	r2, [sp, #36]	; 0x24
 80013b4:	22d0      	movs	r2, #208	; 0xd0
 80013b6:	0112      	lsls	r2, r2, #4
 80013b8:	9208      	str	r2, [sp, #32]
 80013ba:	22a0      	movs	r2, #160	; 0xa0
 80013bc:	00d2      	lsls	r2, r2, #3
 80013be:	9207      	str	r2, [sp, #28]
 80013c0:	4ad6      	ldr	r2, [pc, #856]	; (800171c <FLASH_SetErrorCode+0x408>)
 80013c2:	9235      	str	r2, [sp, #212]	; 0xd4
 80013c4:	4ad6      	ldr	r2, [pc, #856]	; (8001720 <FLASH_SetErrorCode+0x40c>)
 80013c6:	9234      	str	r2, [sp, #208]	; 0xd0
 80013c8:	22c8      	movs	r2, #200	; 0xc8
 80013ca:	0092      	lsls	r2, r2, #2
 80013cc:	9233      	str	r2, [sp, #204]	; 0xcc
 80013ce:	4ad5      	ldr	r2, [pc, #852]	; (8001724 <FLASH_SetErrorCode+0x410>)
 80013d0:	9232      	str	r2, [sp, #200]	; 0xc8
 80013d2:	4ad5      	ldr	r2, [pc, #852]	; (8001728 <FLASH_SetErrorCode+0x414>)
 80013d4:	9231      	str	r2, [sp, #196]	; 0xc4
 80013d6:	4ad5      	ldr	r2, [pc, #852]	; (800172c <FLASH_SetErrorCode+0x418>)
 80013d8:	9230      	str	r2, [sp, #192]	; 0xc0
 80013da:	3a20      	subs	r2, #32
 80013dc:	922f      	str	r2, [sp, #188]	; 0xbc
 80013de:	4ad4      	ldr	r2, [pc, #848]	; (8001730 <FLASH_SetErrorCode+0x41c>)
 80013e0:	922e      	str	r2, [sp, #184]	; 0xb8
 80013e2:	4ad4      	ldr	r2, [pc, #848]	; (8001734 <FLASH_SetErrorCode+0x420>)
 80013e4:	922d      	str	r2, [sp, #180]	; 0xb4
 80013e6:	22b2      	movs	r2, #178	; 0xb2
 80013e8:	0112      	lsls	r2, r2, #4
 80013ea:	922c      	str	r2, [sp, #176]	; 0xb0
 80013ec:	4ad2      	ldr	r2, [pc, #840]	; (8001738 <FLASH_SetErrorCode+0x424>)
 80013ee:	922b      	str	r2, [sp, #172]	; 0xac
 80013f0:	4ad2      	ldr	r2, [pc, #840]	; (800173c <FLASH_SetErrorCode+0x428>)
 80013f2:	922a      	str	r2, [sp, #168]	; 0xa8
 80013f4:	4ad2      	ldr	r2, [pc, #840]	; (8001740 <FLASH_SetErrorCode+0x42c>)
 80013f6:	9229      	str	r2, [sp, #164]	; 0xa4
 80013f8:	3a20      	subs	r2, #32
 80013fa:	9228      	str	r2, [sp, #160]	; 0xa0
 80013fc:	22b0      	movs	r2, #176	; 0xb0
 80013fe:	0112      	lsls	r2, r2, #4
 8001400:	9227      	str	r2, [sp, #156]	; 0x9c
 8001402:	4ad0      	ldr	r2, [pc, #832]	; (8001744 <FLASH_SetErrorCode+0x430>)
 8001404:	9226      	str	r2, [sp, #152]	; 0x98
 8001406:	4ad0      	ldr	r2, [pc, #832]	; (8001748 <FLASH_SetErrorCode+0x434>)
 8001408:	9225      	str	r2, [sp, #148]	; 0x94
 800140a:	22e4      	movs	r2, #228	; 0xe4
 800140c:	00d2      	lsls	r2, r2, #3
 800140e:	9224      	str	r2, [sp, #144]	; 0x90
 8001410:	4ace      	ldr	r2, [pc, #824]	; (800174c <FLASH_SetErrorCode+0x438>)
 8001412:	9223      	str	r2, [sp, #140]	; 0x8c
 8001414:	4ace      	ldr	r2, [pc, #824]	; (8001750 <FLASH_SetErrorCode+0x43c>)
 8001416:	9222      	str	r2, [sp, #136]	; 0x88
 8001418:	4ace      	ldr	r2, [pc, #824]	; (8001754 <FLASH_SetErrorCode+0x440>)
 800141a:	9221      	str	r2, [sp, #132]	; 0x84
 800141c:	3a20      	subs	r2, #32
 800141e:	9220      	str	r2, [sp, #128]	; 0x80
 8001420:	4acd      	ldr	r2, [pc, #820]	; (8001758 <FLASH_SetErrorCode+0x444>)
 8001422:	921f      	str	r2, [sp, #124]	; 0x7c
 8001424:	4acd      	ldr	r2, [pc, #820]	; (800175c <FLASH_SetErrorCode+0x448>)
 8001426:	921e      	str	r2, [sp, #120]	; 0x78
 8001428:	22f2      	movs	r2, #242	; 0xf2
 800142a:	0112      	lsls	r2, r2, #4
 800142c:	921d      	str	r2, [sp, #116]	; 0x74
 800142e:	4acc      	ldr	r2, [pc, #816]	; (8001760 <FLASH_SetErrorCode+0x44c>)
 8001430:	921c      	str	r2, [sp, #112]	; 0x70
 8001432:	4acc      	ldr	r2, [pc, #816]	; (8001764 <FLASH_SetErrorCode+0x450>)
 8001434:	921b      	str	r2, [sp, #108]	; 0x6c
 8001436:	4acc      	ldr	r2, [pc, #816]	; (8001768 <FLASH_SetErrorCode+0x454>)
 8001438:	921a      	str	r2, [sp, #104]	; 0x68
 800143a:	3a20      	subs	r2, #32
 800143c:	9219      	str	r2, [sp, #100]	; 0x64
 800143e:	22f0      	movs	r2, #240	; 0xf0
 8001440:	0112      	lsls	r2, r2, #4
 8001442:	9218      	str	r2, [sp, #96]	; 0x60
 8001444:	22c0      	movs	r2, #192	; 0xc0
 8001446:	0092      	lsls	r2, r2, #2
 8001448:	9217      	str	r2, [sp, #92]	; 0x5c
    flags |= FLASH_FLAG_WRPERR;
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 800144a:	4a9e      	ldr	r2, [pc, #632]	; (80016c4 <FLASH_SetErrorCode+0x3b0>)
 800144c:	6992      	ldr	r2, [r2, #24]
 800144e:	0592      	lsls	r2, r2, #22
 8001450:	d53d      	bpl.n	80014ce <FLASH_SetErrorCode+0x1ba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001452:	2401      	movs	r4, #1
 8001454:	489c      	ldr	r0, [pc, #624]	; (80016c8 <FLASH_SetErrorCode+0x3b4>)
 8001456:	9d34      	ldr	r5, [sp, #208]	; 0xd0
 8001458:	6943      	ldr	r3, [r0, #20]
 800145a:	9f30      	ldr	r7, [sp, #192]	; 0xc0
 800145c:	4323      	orrs	r3, r4
 800145e:	6143      	str	r3, [r0, #20]
 8001460:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8001462:	9835      	ldr	r0, [sp, #212]	; 0xd4
 8001464:	469c      	mov	ip, r3
 8001466:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8001468:	9c33      	ldr	r4, [sp, #204]	; 0xcc
 800146a:	469b      	mov	fp, r3
 800146c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800146e:	9e2f      	ldr	r6, [sp, #188]	; 0xbc
 8001470:	9306      	str	r3, [sp, #24]
 8001472:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8001474:	9305      	str	r3, [sp, #20]
 8001476:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8001478:	9304      	str	r3, [sp, #16]
 800147a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800147c:	9303      	str	r3, [sp, #12]
 800147e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8001480:	9302      	str	r3, [sp, #8]
 8001482:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8001484:	9301      	str	r3, [sp, #4]
 8001486:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8001488:	4699      	mov	r9, r3
 800148a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800148c:	4698      	mov	r8, r3
 800148e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8001490:	9316      	str	r3, [sp, #88]	; 0x58
 8001492:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8001494:	9315      	str	r3, [sp, #84]	; 0x54
 8001496:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8001498:	9314      	str	r3, [sp, #80]	; 0x50
 800149a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800149c:	9313      	str	r3, [sp, #76]	; 0x4c
 800149e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80014a0:	9107      	str	r1, [sp, #28]
 80014a2:	9312      	str	r3, [sp, #72]	; 0x48
 80014a4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80014a6:	9311      	str	r3, [sp, #68]	; 0x44
 80014a8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80014aa:	9310      	str	r3, [sp, #64]	; 0x40
 80014ac:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80014ae:	930f      	str	r3, [sp, #60]	; 0x3c
 80014b0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80014b2:	930e      	str	r3, [sp, #56]	; 0x38
 80014b4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80014b6:	930d      	str	r3, [sp, #52]	; 0x34
 80014b8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80014ba:	930c      	str	r3, [sp, #48]	; 0x30
 80014bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80014be:	930b      	str	r3, [sp, #44]	; 0x2c
 80014c0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80014c2:	930a      	str	r3, [sp, #40]	; 0x28
 80014c4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80014c6:	9309      	str	r3, [sp, #36]	; 0x24
 80014c8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80014ca:	9308      	str	r3, [sp, #32]
    flags |= FLASH_FLAG_PGAERR;
 80014cc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 80014ce:	4a7d      	ldr	r2, [pc, #500]	; (80016c4 <FLASH_SetErrorCode+0x3b0>)
 80014d0:	6992      	ldr	r2, [r2, #24]
 80014d2:	0552      	lsls	r2, r2, #21
 80014d4:	d51e      	bpl.n	8001514 <FLASH_SetErrorCode+0x200>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 80014d6:	2108      	movs	r1, #8
 80014d8:	4a7b      	ldr	r2, [pc, #492]	; (80016c8 <FLASH_SetErrorCode+0x3b4>)
 80014da:	9816      	ldr	r0, [sp, #88]	; 0x58
 80014dc:	6953      	ldr	r3, [r2, #20]
 80014de:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80014e0:	430b      	orrs	r3, r1
 80014e2:	6153      	str	r3, [r2, #20]
 80014e4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80014e6:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80014e8:	469c      	mov	ip, r3
 80014ea:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80014ec:	9f11      	ldr	r7, [sp, #68]	; 0x44
 80014ee:	469b      	mov	fp, r3
 80014f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80014f2:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80014f4:	9306      	str	r3, [sp, #24]
 80014f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80014f8:	9305      	str	r3, [sp, #20]
 80014fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80014fc:	9304      	str	r3, [sp, #16]
 80014fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001500:	9303      	str	r3, [sp, #12]
 8001502:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001504:	9302      	str	r3, [sp, #8]
 8001506:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001508:	9301      	str	r3, [sp, #4]
 800150a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800150c:	4699      	mov	r9, r3
 800150e:	9b08      	ldr	r3, [sp, #32]
 8001510:	4698      	mov	r8, r3
    flags |= FLASH_FLAG_SIZERR;
 8001512:	9b07      	ldr	r3, [sp, #28]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8001514:	4a6b      	ldr	r2, [pc, #428]	; (80016c4 <FLASH_SetErrorCode+0x3b0>)
 8001516:	6992      	ldr	r2, [r2, #24]
 8001518:	0512      	lsls	r2, r2, #20
 800151a:	d50e      	bpl.n	800153a <FLASH_SetErrorCode+0x226>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800151c:	2104      	movs	r1, #4
 800151e:	4a6a      	ldr	r2, [pc, #424]	; (80016c8 <FLASH_SetErrorCode+0x3b4>)
 8001520:	464e      	mov	r6, r9
 8001522:	6953      	ldr	r3, [r2, #20]
 8001524:	9806      	ldr	r0, [sp, #24]
 8001526:	430b      	orrs	r3, r1
 8001528:	6153      	str	r3, [r2, #20]
 800152a:	9b03      	ldr	r3, [sp, #12]
 800152c:	9d05      	ldr	r5, [sp, #20]
 800152e:	469c      	mov	ip, r3
 8001530:	9b02      	ldr	r3, [sp, #8]
 8001532:	9c04      	ldr	r4, [sp, #16]
 8001534:	469b      	mov	fp, r3
    flags |= FLASH_FLAG_OPTVERR;
 8001536:	4643      	mov	r3, r8
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8001538:	9f01      	ldr	r7, [sp, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 800153a:	4a62      	ldr	r2, [pc, #392]	; (80016c4 <FLASH_SetErrorCode+0x3b0>)
 800153c:	6992      	ldr	r2, [r2, #24]
 800153e:	0492      	lsls	r2, r2, #18
 8001540:	d508      	bpl.n	8001554 <FLASH_SetErrorCode+0x240>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8001542:	2110      	movs	r1, #16
 8001544:	4a60      	ldr	r2, [pc, #384]	; (80016c8 <FLASH_SetErrorCode+0x3b4>)
 8001546:	4660      	mov	r0, ip
 8001548:	6953      	ldr	r3, [r2, #20]
 800154a:	465d      	mov	r5, fp
 800154c:	430b      	orrs	r3, r1
 800154e:	6153      	str	r3, [r2, #20]
 8001550:	003c      	movs	r4, r7
    flags |= FLASH_FLAG_RDERR;
 8001552:	0033      	movs	r3, r6
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR))
 8001554:	4a5b      	ldr	r2, [pc, #364]	; (80016c4 <FLASH_SetErrorCode+0x3b0>)
 8001556:	6992      	ldr	r2, [r2, #24]
 8001558:	0392      	lsls	r2, r2, #14
 800155a:	d506      	bpl.n	800156a <FLASH_SetErrorCode+0x256>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 800155c:	2120      	movs	r1, #32
 800155e:	4a5a      	ldr	r2, [pc, #360]	; (80016c8 <FLASH_SetErrorCode+0x3b4>)
 8001560:	0028      	movs	r0, r5
 8001562:	6953      	ldr	r3, [r2, #20]
 8001564:	430b      	orrs	r3, r1
 8001566:	6153      	str	r3, [r2, #20]
    flags |= HAL_FLASH_ERROR_FWWERR;
 8001568:	0023      	movs	r3, r4
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR))
 800156a:	4a56      	ldr	r2, [pc, #344]	; (80016c4 <FLASH_SetErrorCode+0x3b0>)
 800156c:	6992      	ldr	r2, [r2, #24]
 800156e:	03d2      	lsls	r2, r2, #15
 8001570:	d505      	bpl.n	800157e <FLASH_SetErrorCode+0x26a>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 8001572:	2140      	movs	r1, #64	; 0x40
 8001574:	4a54      	ldr	r2, [pc, #336]	; (80016c8 <FLASH_SetErrorCode+0x3b4>)
 8001576:	6953      	ldr	r3, [r2, #20]
 8001578:	430b      	orrs	r3, r1
 800157a:	6153      	str	r3, [r2, #20]
    flags |= FLASH_FLAG_NOTZEROERR;
 800157c:	0003      	movs	r3, r0
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800157e:	4a51      	ldr	r2, [pc, #324]	; (80016c4 <FLASH_SetErrorCode+0x3b0>)
 8001580:	6193      	str	r3, [r2, #24]
}  
 8001582:	b037      	add	sp, #220	; 0xdc
 8001584:	bc3c      	pop	{r2, r3, r4, r5}
 8001586:	4690      	mov	r8, r2
 8001588:	4699      	mov	r9, r3
 800158a:	46a2      	mov	sl, r4
 800158c:	46ab      	mov	fp, r5
 800158e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001590:	2390      	movs	r3, #144	; 0x90
 8001592:	025b      	lsls	r3, r3, #9
 8001594:	469c      	mov	ip, r3
 8001596:	4b75      	ldr	r3, [pc, #468]	; (800176c <FLASH_SetErrorCode+0x458>)
 8001598:	2080      	movs	r0, #128	; 0x80
 800159a:	469b      	mov	fp, r3
 800159c:	2384      	movs	r3, #132	; 0x84
 800159e:	025b      	lsls	r3, r3, #9
 80015a0:	9306      	str	r3, [sp, #24]
 80015a2:	4b73      	ldr	r3, [pc, #460]	; (8001770 <FLASH_SetErrorCode+0x45c>)
 80015a4:	2680      	movs	r6, #128	; 0x80
 80015a6:	9305      	str	r3, [sp, #20]
 80015a8:	2382      	movs	r3, #130	; 0x82
 80015aa:	011b      	lsls	r3, r3, #4
 80015ac:	9304      	str	r3, [sp, #16]
 80015ae:	2394      	movs	r3, #148	; 0x94
 80015b0:	025b      	lsls	r3, r3, #9
 80015b2:	9303      	str	r3, [sp, #12]
 80015b4:	4b6f      	ldr	r3, [pc, #444]	; (8001774 <FLASH_SetErrorCode+0x460>)
 80015b6:	21c0      	movs	r1, #192	; 0xc0
 80015b8:	9302      	str	r3, [sp, #8]
 80015ba:	4b6f      	ldr	r3, [pc, #444]	; (8001778 <FLASH_SetErrorCode+0x464>)
 80015bc:	0240      	lsls	r0, r0, #9
 80015be:	9301      	str	r3, [sp, #4]
 80015c0:	3b20      	subs	r3, #32
 80015c2:	4699      	mov	r9, r3
 80015c4:	2380      	movs	r3, #128	; 0x80
 80015c6:	011b      	lsls	r3, r3, #4
 80015c8:	4698      	mov	r8, r3
 80015ca:	2382      	movs	r3, #130	; 0x82
 80015cc:	025b      	lsls	r3, r3, #9
 80015ce:	9316      	str	r3, [sp, #88]	; 0x58
 80015d0:	4b6a      	ldr	r3, [pc, #424]	; (800177c <FLASH_SetErrorCode+0x468>)
 80015d2:	4d6b      	ldr	r5, [pc, #428]	; (8001780 <FLASH_SetErrorCode+0x46c>)
 80015d4:	9315      	str	r3, [sp, #84]	; 0x54
 80015d6:	2384      	movs	r3, #132	; 0x84
 80015d8:	00db      	lsls	r3, r3, #3
 80015da:	9314      	str	r3, [sp, #80]	; 0x50
 80015dc:	2392      	movs	r3, #146	; 0x92
 80015de:	025b      	lsls	r3, r3, #9
 80015e0:	9313      	str	r3, [sp, #76]	; 0x4c
 80015e2:	4b68      	ldr	r3, [pc, #416]	; (8001784 <FLASH_SetErrorCode+0x470>)
 80015e4:	2420      	movs	r4, #32
 80015e6:	9312      	str	r3, [sp, #72]	; 0x48
 80015e8:	4b67      	ldr	r3, [pc, #412]	; (8001788 <FLASH_SetErrorCode+0x474>)
 80015ea:	4f68      	ldr	r7, [pc, #416]	; (800178c <FLASH_SetErrorCode+0x478>)
 80015ec:	9311      	str	r3, [sp, #68]	; 0x44
 80015ee:	3b20      	subs	r3, #32
 80015f0:	9310      	str	r3, [sp, #64]	; 0x40
 80015f2:	2386      	movs	r3, #134	; 0x86
 80015f4:	025b      	lsls	r3, r3, #9
 80015f6:	930f      	str	r3, [sp, #60]	; 0x3c
 80015f8:	4b65      	ldr	r3, [pc, #404]	; (8001790 <FLASH_SetErrorCode+0x47c>)
 80015fa:	01b6      	lsls	r6, r6, #6
 80015fc:	930e      	str	r3, [sp, #56]	; 0x38
 80015fe:	23c2      	movs	r3, #194	; 0xc2
 8001600:	011b      	lsls	r3, r3, #4
 8001602:	930d      	str	r3, [sp, #52]	; 0x34
 8001604:	2396      	movs	r3, #150	; 0x96
 8001606:	025b      	lsls	r3, r3, #9
 8001608:	930c      	str	r3, [sp, #48]	; 0x30
 800160a:	4b62      	ldr	r3, [pc, #392]	; (8001794 <FLASH_SetErrorCode+0x480>)
 800160c:	00c9      	lsls	r1, r1, #3
 800160e:	930b      	str	r3, [sp, #44]	; 0x2c
 8001610:	4b61      	ldr	r3, [pc, #388]	; (8001798 <FLASH_SetErrorCode+0x484>)
 8001612:	930a      	str	r3, [sp, #40]	; 0x28
 8001614:	3b20      	subs	r3, #32
 8001616:	9309      	str	r3, [sp, #36]	; 0x24
 8001618:	23c0      	movs	r3, #192	; 0xc0
 800161a:	011b      	lsls	r3, r3, #4
 800161c:	9308      	str	r3, [sp, #32]
 800161e:	2380      	movs	r3, #128	; 0x80
 8001620:	00db      	lsls	r3, r3, #3
 8001622:	9307      	str	r3, [sp, #28]
 8001624:	2381      	movs	r3, #129	; 0x81
 8001626:	025b      	lsls	r3, r3, #9
 8001628:	9335      	str	r3, [sp, #212]	; 0xd4
 800162a:	4b5c      	ldr	r3, [pc, #368]	; (800179c <FLASH_SetErrorCode+0x488>)
 800162c:	9334      	str	r3, [sp, #208]	; 0xd0
 800162e:	2388      	movs	r3, #136	; 0x88
 8001630:	009b      	lsls	r3, r3, #2
 8001632:	9333      	str	r3, [sp, #204]	; 0xcc
 8001634:	2391      	movs	r3, #145	; 0x91
 8001636:	025b      	lsls	r3, r3, #9
 8001638:	9332      	str	r3, [sp, #200]	; 0xc8
 800163a:	4b59      	ldr	r3, [pc, #356]	; (80017a0 <FLASH_SetErrorCode+0x48c>)
 800163c:	9331      	str	r3, [sp, #196]	; 0xc4
 800163e:	4b59      	ldr	r3, [pc, #356]	; (80017a4 <FLASH_SetErrorCode+0x490>)
 8001640:	9330      	str	r3, [sp, #192]	; 0xc0
 8001642:	3b20      	subs	r3, #32
 8001644:	932f      	str	r3, [sp, #188]	; 0xbc
 8001646:	2385      	movs	r3, #133	; 0x85
 8001648:	025b      	lsls	r3, r3, #9
 800164a:	932e      	str	r3, [sp, #184]	; 0xb8
 800164c:	4b56      	ldr	r3, [pc, #344]	; (80017a8 <FLASH_SetErrorCode+0x494>)
 800164e:	932d      	str	r3, [sp, #180]	; 0xb4
 8001650:	23a2      	movs	r3, #162	; 0xa2
 8001652:	011b      	lsls	r3, r3, #4
 8001654:	932c      	str	r3, [sp, #176]	; 0xb0
 8001656:	2395      	movs	r3, #149	; 0x95
 8001658:	025b      	lsls	r3, r3, #9
 800165a:	932b      	str	r3, [sp, #172]	; 0xac
 800165c:	4b53      	ldr	r3, [pc, #332]	; (80017ac <FLASH_SetErrorCode+0x498>)
 800165e:	932a      	str	r3, [sp, #168]	; 0xa8
 8001660:	4b53      	ldr	r3, [pc, #332]	; (80017b0 <FLASH_SetErrorCode+0x49c>)
 8001662:	9329      	str	r3, [sp, #164]	; 0xa4
 8001664:	3b20      	subs	r3, #32
 8001666:	9328      	str	r3, [sp, #160]	; 0xa0
 8001668:	23a0      	movs	r3, #160	; 0xa0
 800166a:	011b      	lsls	r3, r3, #4
 800166c:	9327      	str	r3, [sp, #156]	; 0x9c
 800166e:	2383      	movs	r3, #131	; 0x83
 8001670:	025b      	lsls	r3, r3, #9
 8001672:	9326      	str	r3, [sp, #152]	; 0x98
 8001674:	4b4f      	ldr	r3, [pc, #316]	; (80017b4 <FLASH_SetErrorCode+0x4a0>)
 8001676:	9325      	str	r3, [sp, #148]	; 0x94
 8001678:	23c4      	movs	r3, #196	; 0xc4
 800167a:	00db      	lsls	r3, r3, #3
 800167c:	9324      	str	r3, [sp, #144]	; 0x90
 800167e:	2393      	movs	r3, #147	; 0x93
 8001680:	025b      	lsls	r3, r3, #9
 8001682:	9323      	str	r3, [sp, #140]	; 0x8c
 8001684:	4b4c      	ldr	r3, [pc, #304]	; (80017b8 <FLASH_SetErrorCode+0x4a4>)
 8001686:	9322      	str	r3, [sp, #136]	; 0x88
 8001688:	4b4c      	ldr	r3, [pc, #304]	; (80017bc <FLASH_SetErrorCode+0x4a8>)
 800168a:	9321      	str	r3, [sp, #132]	; 0x84
 800168c:	3b20      	subs	r3, #32
 800168e:	9320      	str	r3, [sp, #128]	; 0x80
 8001690:	2387      	movs	r3, #135	; 0x87
 8001692:	025b      	lsls	r3, r3, #9
 8001694:	931f      	str	r3, [sp, #124]	; 0x7c
 8001696:	4b4a      	ldr	r3, [pc, #296]	; (80017c0 <FLASH_SetErrorCode+0x4ac>)
 8001698:	931e      	str	r3, [sp, #120]	; 0x78
 800169a:	23e2      	movs	r3, #226	; 0xe2
 800169c:	011b      	lsls	r3, r3, #4
 800169e:	931d      	str	r3, [sp, #116]	; 0x74
 80016a0:	2397      	movs	r3, #151	; 0x97
 80016a2:	025b      	lsls	r3, r3, #9
 80016a4:	931c      	str	r3, [sp, #112]	; 0x70
 80016a6:	4b47      	ldr	r3, [pc, #284]	; (80017c4 <FLASH_SetErrorCode+0x4b0>)
 80016a8:	931b      	str	r3, [sp, #108]	; 0x6c
 80016aa:	4b47      	ldr	r3, [pc, #284]	; (80017c8 <FLASH_SetErrorCode+0x4b4>)
 80016ac:	931a      	str	r3, [sp, #104]	; 0x68
 80016ae:	3b20      	subs	r3, #32
 80016b0:	9319      	str	r3, [sp, #100]	; 0x64
 80016b2:	23e0      	movs	r3, #224	; 0xe0
 80016b4:	011b      	lsls	r3, r3, #4
 80016b6:	9318      	str	r3, [sp, #96]	; 0x60
 80016b8:	2380      	movs	r3, #128	; 0x80
 80016ba:	009b      	lsls	r3, r3, #2
 80016bc:	9317      	str	r3, [sp, #92]	; 0x5c
  uint32_t flags = 0;
 80016be:	2300      	movs	r3, #0
 80016c0:	e6c3      	b.n	800144a <FLASH_SetErrorCode+0x136>
 80016c2:	46c0      	nop			; (mov r8, r8)
 80016c4:	40022000 	.word	0x40022000
 80016c8:	2000014c 	.word	0x2000014c
 80016cc:	00012100 	.word	0x00012100
 80016d0:	00012120 	.word	0x00012120
 80016d4:	00010100 	.word	0x00010100
 80016d8:	00010900 	.word	0x00010900
 80016dc:	00010120 	.word	0x00010120
 80016e0:	00010920 	.word	0x00010920
 80016e4:	00002120 	.word	0x00002120
 80016e8:	00012900 	.word	0x00012900
 80016ec:	00012920 	.word	0x00012920
 80016f0:	00002920 	.word	0x00002920
 80016f4:	00010500 	.word	0x00010500
 80016f8:	00010520 	.word	0x00010520
 80016fc:	00012500 	.word	0x00012500
 8001700:	00012520 	.word	0x00012520
 8001704:	00002520 	.word	0x00002520
 8001708:	00010d00 	.word	0x00010d00
 800170c:	00010d20 	.word	0x00010d20
 8001710:	00012d00 	.word	0x00012d00
 8001714:	00012d20 	.word	0x00012d20
 8001718:	00002d20 	.word	0x00002d20
 800171c:	00010300 	.word	0x00010300
 8001720:	00010320 	.word	0x00010320
 8001724:	00012300 	.word	0x00012300
 8001728:	00012320 	.word	0x00012320
 800172c:	00002320 	.word	0x00002320
 8001730:	00010b00 	.word	0x00010b00
 8001734:	00010b20 	.word	0x00010b20
 8001738:	00012b00 	.word	0x00012b00
 800173c:	00012b20 	.word	0x00012b20
 8001740:	00002b20 	.word	0x00002b20
 8001744:	00010700 	.word	0x00010700
 8001748:	00010720 	.word	0x00010720
 800174c:	00012700 	.word	0x00012700
 8001750:	00012720 	.word	0x00012720
 8001754:	00002720 	.word	0x00002720
 8001758:	00010f00 	.word	0x00010f00
 800175c:	00010f20 	.word	0x00010f20
 8001760:	00012f00 	.word	0x00012f00
 8001764:	00012f20 	.word	0x00012f20
 8001768:	00002f20 	.word	0x00002f20
 800176c:	00012020 	.word	0x00012020
 8001770:	00010820 	.word	0x00010820
 8001774:	00012820 	.word	0x00012820
 8001778:	00002820 	.word	0x00002820
 800177c:	00010420 	.word	0x00010420
 8001780:	00010020 	.word	0x00010020
 8001784:	00012420 	.word	0x00012420
 8001788:	00002420 	.word	0x00002420
 800178c:	00002020 	.word	0x00002020
 8001790:	00010c20 	.word	0x00010c20
 8001794:	00012c20 	.word	0x00012c20
 8001798:	00002c20 	.word	0x00002c20
 800179c:	00010220 	.word	0x00010220
 80017a0:	00012220 	.word	0x00012220
 80017a4:	00002220 	.word	0x00002220
 80017a8:	00010a20 	.word	0x00010a20
 80017ac:	00012a20 	.word	0x00012a20
 80017b0:	00002a20 	.word	0x00002a20
 80017b4:	00010620 	.word	0x00010620
 80017b8:	00012620 	.word	0x00012620
 80017bc:	00002620 	.word	0x00002620
 80017c0:	00010e20 	.word	0x00010e20
 80017c4:	00012e20 	.word	0x00012e20
 80017c8:	00002e20 	.word	0x00002e20

080017cc <FLASH_WaitForLastOperation>:
{
 80017cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017ce:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80017d0:	f7ff fc56 	bl	8001080 <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80017d4:	2501      	movs	r5, #1
  uint32_t tickstart = HAL_GetTick();
 80017d6:	0007      	movs	r7, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80017d8:	4e1b      	ldr	r6, [pc, #108]	; (8001848 <FLASH_WaitForLastOperation+0x7c>)
 80017da:	1c63      	adds	r3, r4, #1
 80017dc:	d114      	bne.n	8001808 <FLASH_WaitForLastOperation+0x3c>
 80017de:	2201      	movs	r2, #1
 80017e0:	4919      	ldr	r1, [pc, #100]	; (8001848 <FLASH_WaitForLastOperation+0x7c>)
 80017e2:	698b      	ldr	r3, [r1, #24]
 80017e4:	421a      	tst	r2, r3
 80017e6:	d1fc      	bne.n	80017e2 <FLASH_WaitForLastOperation+0x16>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80017e8:	2202      	movs	r2, #2
 80017ea:	4b17      	ldr	r3, [pc, #92]	; (8001848 <FLASH_WaitForLastOperation+0x7c>)
 80017ec:	6999      	ldr	r1, [r3, #24]
 80017ee:	420a      	tst	r2, r1
 80017f0:	d116      	bne.n	8001820 <FLASH_WaitForLastOperation+0x54>
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 80017f2:	4b15      	ldr	r3, [pc, #84]	; (8001848 <FLASH_WaitForLastOperation+0x7c>)
 80017f4:	699a      	ldr	r2, [r3, #24]
 80017f6:	05d2      	lsls	r2, r2, #23
 80017f8:	d402      	bmi.n	8001800 <FLASH_WaitForLastOperation+0x34>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 80017fa:	699a      	ldr	r2, [r3, #24]
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 80017fc:	0592      	lsls	r2, r2, #22
 80017fe:	d511      	bpl.n	8001824 <FLASH_WaitForLastOperation+0x58>
    FLASH_SetErrorCode();
 8001800:	f7ff fd88 	bl	8001314 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001804:	2001      	movs	r0, #1
}
 8001806:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001808:	69b3      	ldr	r3, [r6, #24]
 800180a:	421d      	tst	r5, r3
 800180c:	d0ec      	beq.n	80017e8 <FLASH_WaitForLastOperation+0x1c>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800180e:	2c00      	cmp	r4, #0
 8001810:	d004      	beq.n	800181c <FLASH_WaitForLastOperation+0x50>
 8001812:	f7ff fc35 	bl	8001080 <HAL_GetTick>
 8001816:	1bc0      	subs	r0, r0, r7
 8001818:	42a0      	cmp	r0, r4
 800181a:	d9de      	bls.n	80017da <FLASH_WaitForLastOperation+0xe>
        return HAL_TIMEOUT;
 800181c:	2003      	movs	r0, #3
 800181e:	e7f2      	b.n	8001806 <FLASH_WaitForLastOperation+0x3a>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001820:	619a      	str	r2, [r3, #24]
 8001822:	e7e6      	b.n	80017f2 <FLASH_WaitForLastOperation+0x26>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 8001824:	699a      	ldr	r2, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 8001826:	0552      	lsls	r2, r2, #21
 8001828:	d4ea      	bmi.n	8001800 <FLASH_WaitForLastOperation+0x34>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 800182a:	699a      	ldr	r2, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 800182c:	0512      	lsls	r2, r2, #20
 800182e:	d4e7      	bmi.n	8001800 <FLASH_WaitForLastOperation+0x34>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 8001830:	699a      	ldr	r2, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 8001832:	0492      	lsls	r2, r2, #18
 8001834:	d4e4      	bmi.n	8001800 <FLASH_WaitForLastOperation+0x34>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 8001836:	699a      	ldr	r2, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 8001838:	0392      	lsls	r2, r2, #14
 800183a:	d4e1      	bmi.n	8001800 <FLASH_WaitForLastOperation+0x34>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) )
 800183c:	699b      	ldr	r3, [r3, #24]
  return HAL_OK;
 800183e:	2000      	movs	r0, #0
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 8001840:	03db      	lsls	r3, r3, #15
 8001842:	d4dd      	bmi.n	8001800 <FLASH_WaitForLastOperation+0x34>
 8001844:	e7df      	b.n	8001806 <FLASH_WaitForLastOperation+0x3a>
 8001846:	46c0      	nop			; (mov r8, r8)
 8001848:	40022000 	.word	0x40022000

0800184c <HAL_FLASHEx_DATAEEPROM_Unlock>:
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Unlock(void)
{
  uint32_t primask_bit;

  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 800184c:	2201      	movs	r2, #1
 800184e:	4b08      	ldr	r3, [pc, #32]	; (8001870 <HAL_FLASHEx_DATAEEPROM_Unlock+0x24>)
    {
      return HAL_ERROR;
    }
  }

  return HAL_OK;  
 8001850:	2000      	movs	r0, #0
  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 8001852:	6859      	ldr	r1, [r3, #4]
 8001854:	420a      	tst	r2, r1
 8001856:	d00a      	beq.n	800186e <HAL_FLASHEx_DATAEEPROM_Unlock+0x22>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8001858:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800185c:	b672      	cpsid	i
    FLASH->PEKEYR = FLASH_PEKEY1;
 800185e:	4805      	ldr	r0, [pc, #20]	; (8001874 <HAL_FLASHEx_DATAEEPROM_Unlock+0x28>)
 8001860:	60d8      	str	r0, [r3, #12]
    FLASH->PEKEYR = FLASH_PEKEY2;
 8001862:	4805      	ldr	r0, [pc, #20]	; (8001878 <HAL_FLASHEx_DATAEEPROM_Unlock+0x2c>)
 8001864:	60d8      	str	r0, [r3, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001866:	f381 8810 	msr	PRIMASK, r1
    if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 800186a:	6858      	ldr	r0, [r3, #4]
      return HAL_ERROR;
 800186c:	4010      	ands	r0, r2
}
 800186e:	4770      	bx	lr
 8001870:	40022000 	.word	0x40022000
 8001874:	89abcdef 	.word	0x89abcdef
 8001878:	02030405 	.word	0x02030405

0800187c <HAL_FLASHEx_DATAEEPROM_Lock>:
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Lock(void)
{
  /* Set the PELOCK Bit to lock the data memory and FLASH_PECR register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 800187c:	2101      	movs	r1, #1
 800187e:	4a03      	ldr	r2, [pc, #12]	; (800188c <HAL_FLASHEx_DATAEEPROM_Lock+0x10>)
  
  return HAL_OK;
}
 8001880:	2000      	movs	r0, #0
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 8001882:	6853      	ldr	r3, [r2, #4]
 8001884:	430b      	orrs	r3, r1
 8001886:	6053      	str	r3, [r2, #4]
}
 8001888:	4770      	bx	lr
 800188a:	46c0      	nop			; (mov r8, r8)
 800188c:	40022000 	.word	0x40022000

08001890 <HAL_FLASHEx_DATAEEPROM_Program>:
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */

HAL_StatusTypeDef   HAL_FLASHEx_DATAEEPROM_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 8001890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef status = HAL_ERROR;
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001892:	4c12      	ldr	r4, [pc, #72]	; (80018dc <HAL_FLASHEx_DATAEEPROM_Program+0x4c>)
{
 8001894:	0005      	movs	r5, r0
  __HAL_LOCK(&pFlash);
 8001896:	7c23      	ldrb	r3, [r4, #16]
{
 8001898:	000f      	movs	r7, r1
 800189a:	0016      	movs	r6, r2
  __HAL_LOCK(&pFlash);
 800189c:	2b01      	cmp	r3, #1
 800189e:	d012      	beq.n	80018c6 <HAL_FLASHEx_DATAEEPROM_Program+0x36>
 80018a0:	2301      	movs	r3, #1
  /* Check the parameters */
  assert_param(IS_TYPEPROGRAMDATA(TypeProgram));
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80018a2:	480f      	ldr	r0, [pc, #60]	; (80018e0 <HAL_FLASHEx_DATAEEPROM_Program+0x50>)
  __HAL_LOCK(&pFlash);
 80018a4:	7423      	strb	r3, [r4, #16]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80018a6:	f7ff ff91 	bl	80017cc <FLASH_WaitForLastOperation>
  
  if(status == HAL_OK)
 80018aa:	2800      	cmp	r0, #0
 80018ac:	d108      	bne.n	80018c0 <HAL_FLASHEx_DATAEEPROM_Program+0x30>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80018ae:	6160      	str	r0, [r4, #20]

    if(TypeProgram == FLASH_TYPEPROGRAMDATA_WORD)
 80018b0:	2d02      	cmp	r5, #2
 80018b2:	d00d      	beq.n	80018d0 <HAL_FLASHEx_DATAEEPROM_Program+0x40>
    {
      /* Program word (32-bit) at a specified address.*/
      *(__IO uint32_t *)Address = Data;
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_HALFWORD)
 80018b4:	2d01      	cmp	r5, #1
 80018b6:	d008      	beq.n	80018ca <HAL_FLASHEx_DATAEEPROM_Program+0x3a>
    {
      /* Program halfword (16-bit) at a specified address.*/
      *(__IO uint16_t *)Address = (uint16_t) Data;
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_BYTE)
 80018b8:	2d00      	cmp	r5, #0
 80018ba:	d10b      	bne.n	80018d4 <HAL_FLASHEx_DATAEEPROM_Program+0x44>
    {
      /* Program byte (8-bit) at a specified address.*/
      *(__IO uint8_t *)Address = (uint8_t) Data;
 80018bc:	b2f6      	uxtb	r6, r6
 80018be:	703e      	strb	r6, [r7, #0]
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80018c0:	2300      	movs	r3, #0
 80018c2:	7423      	strb	r3, [r4, #16]

  return status;
}
 80018c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 80018c6:	2002      	movs	r0, #2
 80018c8:	e7fc      	b.n	80018c4 <HAL_FLASHEx_DATAEEPROM_Program+0x34>
      *(__IO uint16_t *)Address = (uint16_t) Data;
 80018ca:	b2b6      	uxth	r6, r6
 80018cc:	803e      	strh	r6, [r7, #0]
 80018ce:	e7f7      	b.n	80018c0 <HAL_FLASHEx_DATAEEPROM_Program+0x30>
      *(__IO uint32_t *)Address = Data;
 80018d0:	603e      	str	r6, [r7, #0]
 80018d2:	e7f5      	b.n	80018c0 <HAL_FLASHEx_DATAEEPROM_Program+0x30>
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80018d4:	4802      	ldr	r0, [pc, #8]	; (80018e0 <HAL_FLASHEx_DATAEEPROM_Program+0x50>)
 80018d6:	f7ff ff79 	bl	80017cc <FLASH_WaitForLastOperation>
 80018da:	e7f1      	b.n	80018c0 <HAL_FLASHEx_DATAEEPROM_Program+0x30>
 80018dc:	2000014c 	.word	0x2000014c
 80018e0:	0000c350 	.word	0x0000c350

080018e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018e6:	46de      	mov	lr, fp
 80018e8:	4657      	mov	r7, sl
 80018ea:	464e      	mov	r6, r9
 80018ec:	4645      	mov	r5, r8
 80018ee:	b5e0      	push	{r5, r6, r7, lr}
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80018f0:	680b      	ldr	r3, [r1, #0]
{
 80018f2:	b085      	sub	sp, #20
 80018f4:	468a      	mov	sl, r1
  while (((GPIO_Init->Pin) >> position) != 0)
 80018f6:	469b      	mov	fp, r3
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d06e      	beq.n	80019da <HAL_GPIO_Init+0xf6>
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018fc:	4b66      	ldr	r3, [pc, #408]	; (8001a98 <HAL_GPIO_Init+0x1b4>)
  uint32_t position = 0x00U;
 80018fe:	2400      	movs	r4, #0
        temp = EXTI->IMR;
 8001900:	4699      	mov	r9, r3
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001902:	2601      	movs	r6, #1
 8001904:	4659      	mov	r1, fp
 8001906:	40a6      	lsls	r6, r4
 8001908:	4031      	ands	r1, r6
    if (iocurrent)
 800190a:	d062      	beq.n	80019d2 <HAL_GPIO_Init+0xee>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800190c:	4653      	mov	r3, sl
 800190e:	685a      	ldr	r2, [r3, #4]
 8001910:	2510      	movs	r5, #16
 8001912:	0013      	movs	r3, r2
 8001914:	4657      	mov	r7, sl
 8001916:	43ab      	bics	r3, r5
 8001918:	9300      	str	r3, [sp, #0]
 800191a:	9302      	str	r3, [sp, #8]
 800191c:	2303      	movs	r3, #3
 800191e:	68bf      	ldr	r7, [r7, #8]
 8001920:	0065      	lsls	r5, r4, #1
 8001922:	40ab      	lsls	r3, r5
 8001924:	40af      	lsls	r7, r5
 8001926:	9501      	str	r5, [sp, #4]
 8001928:	9d00      	ldr	r5, [sp, #0]
 800192a:	43db      	mvns	r3, r3
 800192c:	3d01      	subs	r5, #1
 800192e:	9703      	str	r7, [sp, #12]
 8001930:	2d01      	cmp	r5, #1
 8001932:	d959      	bls.n	80019e8 <HAL_GPIO_Init+0x104>
      temp = GPIOx->PUPDR;
 8001934:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001936:	401e      	ands	r6, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001938:	4337      	orrs	r7, r6
      GPIOx->PUPDR = temp;
 800193a:	60c7      	str	r7, [r0, #12]
      temp = GPIOx->MODER;
 800193c:	6806      	ldr	r6, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800193e:	9d01      	ldr	r5, [sp, #4]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001940:	4033      	ands	r3, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001942:	2603      	movs	r6, #3
 8001944:	4016      	ands	r6, r2
 8001946:	40ae      	lsls	r6, r5
 8001948:	4333      	orrs	r3, r6
      GPIOx->MODER = temp;
 800194a:	6003      	str	r3, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800194c:	2380      	movs	r3, #128	; 0x80
 800194e:	055b      	lsls	r3, r3, #21
 8001950:	421a      	tst	r2, r3
 8001952:	d03e      	beq.n	80019d2 <HAL_GPIO_Init+0xee>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001954:	2601      	movs	r6, #1
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8001956:	270f      	movs	r7, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001958:	4d50      	ldr	r5, [pc, #320]	; (8001a9c <HAL_GPIO_Init+0x1b8>)
 800195a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800195c:	4333      	orrs	r3, r6
 800195e:	636b      	str	r3, [r5, #52]	; 0x34
 8001960:	4d4f      	ldr	r5, [pc, #316]	; (8001aa0 <HAL_GPIO_Init+0x1bc>)
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8001962:	3602      	adds	r6, #2
 8001964:	46ac      	mov	ip, r5
 8001966:	4026      	ands	r6, r4
 8001968:	00b6      	lsls	r6, r6, #2
 800196a:	40b7      	lsls	r7, r6
        temp = SYSCFG->EXTICR[position >> 2U];
 800196c:	08a3      	lsrs	r3, r4, #2
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	4463      	add	r3, ip
 8001972:	689d      	ldr	r5, [r3, #8]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8001974:	43bd      	bics	r5, r7
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001976:	27a0      	movs	r7, #160	; 0xa0
 8001978:	05ff      	lsls	r7, r7, #23
 800197a:	42b8      	cmp	r0, r7
 800197c:	d00e      	beq.n	800199c <HAL_GPIO_Init+0xb8>
 800197e:	4f49      	ldr	r7, [pc, #292]	; (8001aa4 <HAL_GPIO_Init+0x1c0>)
 8001980:	42b8      	cmp	r0, r7
 8001982:	d100      	bne.n	8001986 <HAL_GPIO_Init+0xa2>
 8001984:	e080      	b.n	8001a88 <HAL_GPIO_Init+0x1a4>
 8001986:	4f48      	ldr	r7, [pc, #288]	; (8001aa8 <HAL_GPIO_Init+0x1c4>)
 8001988:	42b8      	cmp	r0, r7
 800198a:	d100      	bne.n	800198e <HAL_GPIO_Init+0xaa>
 800198c:	e078      	b.n	8001a80 <HAL_GPIO_Init+0x19c>
 800198e:	4f47      	ldr	r7, [pc, #284]	; (8001aac <HAL_GPIO_Init+0x1c8>)
 8001990:	42b8      	cmp	r0, r7
 8001992:	d100      	bne.n	8001996 <HAL_GPIO_Init+0xb2>
 8001994:	e07c      	b.n	8001a90 <HAL_GPIO_Init+0x1ac>
 8001996:	2706      	movs	r7, #6
 8001998:	40b7      	lsls	r7, r6
 800199a:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 800199c:	609d      	str	r5, [r3, #8]
        temp = EXTI->IMR;
 800199e:	464b      	mov	r3, r9
        temp &= ~((uint32_t)iocurrent);
 80019a0:	43cd      	mvns	r5, r1
        temp = EXTI->IMR;
 80019a2:	681b      	ldr	r3, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019a4:	03d6      	lsls	r6, r2, #15
 80019a6:	d457      	bmi.n	8001a58 <HAL_GPIO_Init+0x174>
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 80019a8:	464e      	mov	r6, r9
        temp &= ~((uint32_t)iocurrent);
 80019aa:	402b      	ands	r3, r5
        EXTI->IMR = temp;
 80019ac:	6033      	str	r3, [r6, #0]

        temp = EXTI->EMR;
 80019ae:	6873      	ldr	r3, [r6, #4]
        temp &= ~((uint32_t)iocurrent);
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019b0:	0396      	lsls	r6, r2, #14
 80019b2:	d457      	bmi.n	8001a64 <HAL_GPIO_Init+0x180>
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 80019b4:	464e      	mov	r6, r9
        temp &= ~((uint32_t)iocurrent);
 80019b6:	402b      	ands	r3, r5
        EXTI->EMR = temp;
 80019b8:	6073      	str	r3, [r6, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019ba:	68b3      	ldr	r3, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019bc:	02d6      	lsls	r6, r2, #11
 80019be:	d457      	bmi.n	8001a70 <HAL_GPIO_Init+0x18c>
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 80019c0:	464e      	mov	r6, r9
        temp &= ~((uint32_t)iocurrent);
 80019c2:	402b      	ands	r3, r5
        EXTI->RTSR = temp;
 80019c4:	60b3      	str	r3, [r6, #8]

        temp = EXTI->FTSR;
 80019c6:	68f3      	ldr	r3, [r6, #12]
        temp &= ~((uint32_t)iocurrent);
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019c8:	0292      	lsls	r2, r2, #10
 80019ca:	d457      	bmi.n	8001a7c <HAL_GPIO_Init+0x198>
        temp &= ~((uint32_t)iocurrent);
 80019cc:	402b      	ands	r3, r5
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 80019ce:	464a      	mov	r2, r9
 80019d0:	60d3      	str	r3, [r2, #12]
  while (((GPIO_Init->Pin) >> position) != 0)
 80019d2:	465b      	mov	r3, fp
      }
    }
    position++;
 80019d4:	3401      	adds	r4, #1
  while (((GPIO_Init->Pin) >> position) != 0)
 80019d6:	40e3      	lsrs	r3, r4
 80019d8:	d193      	bne.n	8001902 <HAL_GPIO_Init+0x1e>
  }
}
 80019da:	b005      	add	sp, #20
 80019dc:	bc3c      	pop	{r2, r3, r4, r5}
 80019de:	4690      	mov	r8, r2
 80019e0:	4699      	mov	r9, r3
 80019e2:	46a2      	mov	sl, r4
 80019e4:	46ab      	mov	fp, r5
 80019e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        temp = GPIOx->OSPEEDR;
 80019e8:	6885      	ldr	r5, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019ea:	9f01      	ldr	r7, [sp, #4]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80019ec:	401d      	ands	r5, r3
 80019ee:	46a8      	mov	r8, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019f0:	4655      	mov	r5, sl
 80019f2:	68ed      	ldr	r5, [r5, #12]
 80019f4:	40bd      	lsls	r5, r7
 80019f6:	46ac      	mov	ip, r5
 80019f8:	4645      	mov	r5, r8
 80019fa:	4667      	mov	r7, ip
 80019fc:	433d      	orrs	r5, r7
        GPIOx->OSPEEDR = temp;
 80019fe:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 8001a00:	6845      	ldr	r5, [r0, #4]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a02:	9f03      	ldr	r7, [sp, #12]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a04:	43b5      	bics	r5, r6
 8001a06:	46ac      	mov	ip, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001a08:	2501      	movs	r5, #1
 8001a0a:	0916      	lsrs	r6, r2, #4
 8001a0c:	402e      	ands	r6, r5
 8001a0e:	40a6      	lsls	r6, r4
 8001a10:	4665      	mov	r5, ip
 8001a12:	432e      	orrs	r6, r5
        GPIOx->OTYPER = temp;
 8001a14:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 8001a16:	68c6      	ldr	r6, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a18:	9d02      	ldr	r5, [sp, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001a1a:	401e      	ands	r6, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a1c:	4337      	orrs	r7, r6
      GPIOx->PUPDR = temp;
 8001a1e:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a20:	2d02      	cmp	r5, #2
 8001a22:	d000      	beq.n	8001a26 <HAL_GPIO_Init+0x142>
 8001a24:	e78a      	b.n	800193c <HAL_GPIO_Init+0x58>
        temp = GPIOx->AFR[position >> 3U];
 8001a26:	08e6      	lsrs	r6, r4, #3
 8001a28:	00b6      	lsls	r6, r6, #2
 8001a2a:	1985      	adds	r5, r0, r6
 8001a2c:	9500      	str	r5, [sp, #0]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U));
 8001a2e:	2707      	movs	r7, #7
        temp = GPIOx->AFR[position >> 3U];
 8001a30:	6a2d      	ldr	r5, [r5, #32]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U));
 8001a32:	4027      	ands	r7, r4
        temp = GPIOx->AFR[position >> 3U];
 8001a34:	46ac      	mov	ip, r5
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U));
 8001a36:	250f      	movs	r5, #15
 8001a38:	00bf      	lsls	r7, r7, #2
 8001a3a:	40bd      	lsls	r5, r7
 8001a3c:	46a8      	mov	r8, r5
 8001a3e:	4665      	mov	r5, ip
 8001a40:	4646      	mov	r6, r8
 8001a42:	43b5      	bics	r5, r6
 8001a44:	46ac      	mov	ip, r5
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001a46:	4655      	mov	r5, sl
 8001a48:	692d      	ldr	r5, [r5, #16]
 8001a4a:	40bd      	lsls	r5, r7
 8001a4c:	002f      	movs	r7, r5
 8001a4e:	4665      	mov	r5, ip
 8001a50:	432f      	orrs	r7, r5
        GPIOx->AFR[position >> 3U] = temp;
 8001a52:	9d00      	ldr	r5, [sp, #0]
 8001a54:	622f      	str	r7, [r5, #32]
 8001a56:	e771      	b.n	800193c <HAL_GPIO_Init+0x58>
        EXTI->IMR = temp;
 8001a58:	464e      	mov	r6, r9
          temp |= iocurrent;
 8001a5a:	430b      	orrs	r3, r1
        EXTI->IMR = temp;
 8001a5c:	6033      	str	r3, [r6, #0]
        temp = EXTI->EMR;
 8001a5e:	6873      	ldr	r3, [r6, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a60:	0396      	lsls	r6, r2, #14
 8001a62:	d5a7      	bpl.n	80019b4 <HAL_GPIO_Init+0xd0>
        EXTI->EMR = temp;
 8001a64:	464e      	mov	r6, r9
          temp |= iocurrent;
 8001a66:	430b      	orrs	r3, r1
        EXTI->EMR = temp;
 8001a68:	6073      	str	r3, [r6, #4]
        temp = EXTI->RTSR;
 8001a6a:	68b3      	ldr	r3, [r6, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a6c:	02d6      	lsls	r6, r2, #11
 8001a6e:	d5a7      	bpl.n	80019c0 <HAL_GPIO_Init+0xdc>
        EXTI->RTSR = temp;
 8001a70:	464e      	mov	r6, r9
          temp |= iocurrent;
 8001a72:	430b      	orrs	r3, r1
        EXTI->RTSR = temp;
 8001a74:	60b3      	str	r3, [r6, #8]
        temp = EXTI->FTSR;
 8001a76:	68f3      	ldr	r3, [r6, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a78:	0292      	lsls	r2, r2, #10
 8001a7a:	d5a7      	bpl.n	80019cc <HAL_GPIO_Init+0xe8>
          temp |= iocurrent;
 8001a7c:	430b      	orrs	r3, r1
 8001a7e:	e7a6      	b.n	80019ce <HAL_GPIO_Init+0xea>
 8001a80:	2702      	movs	r7, #2
 8001a82:	40b7      	lsls	r7, r6
 8001a84:	433d      	orrs	r5, r7
 8001a86:	e789      	b.n	800199c <HAL_GPIO_Init+0xb8>
 8001a88:	2701      	movs	r7, #1
 8001a8a:	40b7      	lsls	r7, r6
 8001a8c:	433d      	orrs	r5, r7
 8001a8e:	e785      	b.n	800199c <HAL_GPIO_Init+0xb8>
 8001a90:	2705      	movs	r7, #5
 8001a92:	40b7      	lsls	r7, r6
 8001a94:	433d      	orrs	r5, r7
 8001a96:	e781      	b.n	800199c <HAL_GPIO_Init+0xb8>
 8001a98:	40010400 	.word	0x40010400
 8001a9c:	40021000 	.word	0x40021000
 8001aa0:	40010000 	.word	0x40010000
 8001aa4:	50000400 	.word	0x50000400
 8001aa8:	50000800 	.word	0x50000800
 8001aac:	50001c00 	.word	0x50001c00

08001ab0 <HAL_GPIO_DeInit>:
  *                   This parameter can be one of GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001ab0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ab2:	46de      	mov	lr, fp
 8001ab4:	4657      	mov	r7, sl
 8001ab6:	464e      	mov	r6, r9
 8001ab8:	4645      	mov	r5, r8
 8001aba:	b5e0      	push	{r5, r6, r7, lr}
 8001abc:	b083      	sub	sp, #12

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0)
 8001abe:	2900      	cmp	r1, #0
 8001ac0:	d060      	beq.n	8001b84 <HAL_GPIO_DeInit+0xd4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Pin) & (1U << position);
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	4691      	mov	r9, r2
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8001ac6:	3202      	adds	r2, #2
 8001ac8:	4693      	mov	fp, r2
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8001aca:	4a38      	ldr	r2, [pc, #224]	; (8001bac <HAL_GPIO_DeInit+0xfc>)
  uint32_t position = 0x00U;
 8001acc:	2300      	movs	r3, #0
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8001ace:	4694      	mov	ip, r2
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8001ad0:	9101      	str	r1, [sp, #4]
 8001ad2:	e03f      	b.n	8001b54 <HAL_GPIO_DeInit+0xa4>
 8001ad4:	4936      	ldr	r1, [pc, #216]	; (8001bb0 <HAL_GPIO_DeInit+0x100>)
 8001ad6:	4288      	cmp	r0, r1
 8001ad8:	d05b      	beq.n	8001b92 <HAL_GPIO_DeInit+0xe2>
 8001ada:	4936      	ldr	r1, [pc, #216]	; (8001bb4 <HAL_GPIO_DeInit+0x104>)
 8001adc:	4288      	cmp	r0, r1
 8001ade:	d05c      	beq.n	8001b9a <HAL_GPIO_DeInit+0xea>
 8001ae0:	4935      	ldr	r1, [pc, #212]	; (8001bb8 <HAL_GPIO_DeInit+0x108>)
 8001ae2:	4288      	cmp	r0, r1
 8001ae4:	d05d      	beq.n	8001ba2 <HAL_GPIO_DeInit+0xf2>
 8001ae6:	2106      	movs	r1, #6
 8001ae8:	40a1      	lsls	r1, r4
 8001aea:	000c      	movs	r4, r1
 8001aec:	42a6      	cmp	r6, r4
 8001aee:	d111      	bne.n	8001b14 <HAL_GPIO_DeInit+0x64>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8001af0:	4661      	mov	r1, ip
 8001af2:	43ff      	mvns	r7, r7
 8001af4:	680c      	ldr	r4, [r1, #0]
 8001af6:	403c      	ands	r4, r7
 8001af8:	600c      	str	r4, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8001afa:	684c      	ldr	r4, [r1, #4]
 8001afc:	403c      	ands	r4, r7
 8001afe:	604c      	str	r4, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8001b00:	688c      	ldr	r4, [r1, #8]
 8001b02:	403c      	ands	r4, r7
 8001b04:	608c      	str	r4, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8001b06:	68cc      	ldr	r4, [r1, #12]
 8001b08:	4027      	ands	r7, r4
 8001b0a:	60cf      	str	r7, [r1, #12]
        
        tmp = ((uint32_t)0x0FU) << (4U * (position & 0x03U));
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8001b0c:	4641      	mov	r1, r8
 8001b0e:	6894      	ldr	r4, [r2, #8]
 8001b10:	438c      	bics	r4, r1
 8001b12:	6094      	str	r4, [r2, #8]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floting Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8001b14:	4659      	mov	r1, fp
 8001b16:	005c      	lsls	r4, r3, #1
 8001b18:	40a1      	lsls	r1, r4
 8001b1a:	6802      	ldr	r2, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U));
 8001b1c:	2707      	movs	r7, #7
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8001b1e:	000c      	movs	r4, r1
 8001b20:	430a      	orrs	r2, r1
      GPIOx->AFR[position >> 3U] &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U));
 8001b22:	210f      	movs	r1, #15
 8001b24:	401f      	ands	r7, r3
 8001b26:	00bf      	lsls	r7, r7, #2
 8001b28:	40b9      	lsls	r1, r7
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8001b2a:	6002      	str	r2, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U));
 8001b2c:	08da      	lsrs	r2, r3, #3
 8001b2e:	0092      	lsls	r2, r2, #2
 8001b30:	1882      	adds	r2, r0, r2
 8001b32:	6a16      	ldr	r6, [r2, #32]
 8001b34:	438e      	bics	r6, r1
 8001b36:	6216      	str	r6, [r2, #32]

      /* Deactivate the Pull-up oand Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001b38:	43e2      	mvns	r2, r4
 8001b3a:	68c6      	ldr	r6, [r0, #12]
 8001b3c:	4016      	ands	r6, r2
 8001b3e:	60c6      	str	r6, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position);
 8001b40:	6844      	ldr	r4, [r0, #4]
 8001b42:	43ac      	bics	r4, r5
 8001b44:	6044      	str	r4, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001b46:	6884      	ldr	r4, [r0, #8]
 8001b48:	4022      	ands	r2, r4
 8001b4a:	6082      	str	r2, [r0, #8]
  while ((GPIO_Pin >> position) != 0)
 8001b4c:	9a01      	ldr	r2, [sp, #4]
    }
    position++;
 8001b4e:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0)
 8001b50:	40da      	lsrs	r2, r3
 8001b52:	d017      	beq.n	8001b84 <HAL_GPIO_DeInit+0xd4>
    iocurrent = (GPIO_Pin) & (1U << position);
 8001b54:	464d      	mov	r5, r9
 8001b56:	409d      	lsls	r5, r3
 8001b58:	9f01      	ldr	r7, [sp, #4]
 8001b5a:	402f      	ands	r7, r5
    if (iocurrent)
 8001b5c:	d0f6      	beq.n	8001b4c <HAL_GPIO_DeInit+0x9c>
 8001b5e:	4917      	ldr	r1, [pc, #92]	; (8001bbc <HAL_GPIO_DeInit+0x10c>)
      tmp &= (((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8001b60:	465c      	mov	r4, fp
 8001b62:	4688      	mov	r8, r1
 8001b64:	210f      	movs	r1, #15
 8001b66:	401c      	ands	r4, r3
 8001b68:	00a4      	lsls	r4, r4, #2
 8001b6a:	40a1      	lsls	r1, r4
      tmp = SYSCFG->EXTICR[position >> 2U];
 8001b6c:	089a      	lsrs	r2, r3, #2
 8001b6e:	0092      	lsls	r2, r2, #2
 8001b70:	4442      	add	r2, r8
 8001b72:	6896      	ldr	r6, [r2, #8]
      tmp &= (((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8001b74:	4688      	mov	r8, r1
 8001b76:	400e      	ands	r6, r1
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8001b78:	21a0      	movs	r1, #160	; 0xa0
 8001b7a:	05c9      	lsls	r1, r1, #23
 8001b7c:	4288      	cmp	r0, r1
 8001b7e:	d1a9      	bne.n	8001ad4 <HAL_GPIO_DeInit+0x24>
 8001b80:	2400      	movs	r4, #0
 8001b82:	e7b3      	b.n	8001aec <HAL_GPIO_DeInit+0x3c>
  }
}
 8001b84:	b003      	add	sp, #12
 8001b86:	bc3c      	pop	{r2, r3, r4, r5}
 8001b88:	4690      	mov	r8, r2
 8001b8a:	4699      	mov	r9, r3
 8001b8c:	46a2      	mov	sl, r4
 8001b8e:	46ab      	mov	fp, r5
 8001b90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b92:	4649      	mov	r1, r9
 8001b94:	40a1      	lsls	r1, r4
 8001b96:	000c      	movs	r4, r1
 8001b98:	e7a8      	b.n	8001aec <HAL_GPIO_DeInit+0x3c>
 8001b9a:	2102      	movs	r1, #2
 8001b9c:	40a1      	lsls	r1, r4
 8001b9e:	000c      	movs	r4, r1
 8001ba0:	e7a4      	b.n	8001aec <HAL_GPIO_DeInit+0x3c>
 8001ba2:	2105      	movs	r1, #5
 8001ba4:	40a1      	lsls	r1, r4
 8001ba6:	000c      	movs	r4, r1
 8001ba8:	e7a0      	b.n	8001aec <HAL_GPIO_DeInit+0x3c>
 8001baa:	46c0      	nop			; (mov r8, r8)
 8001bac:	40010400 	.word	0x40010400
 8001bb0:	50000400 	.word	0x50000400
 8001bb4:	50000800 	.word	0x50000800
 8001bb8:	50001c00 	.word	0x50001c00
 8001bbc:	40010000 	.word	0x40010000

08001bc0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001bc0:	6900      	ldr	r0, [r0, #16]
 8001bc2:	4008      	ands	r0, r1
 8001bc4:	1e41      	subs	r1, r0, #1
 8001bc6:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8001bc8:	b2c0      	uxtb	r0, r0
}
 8001bca:	4770      	bx	lr

08001bcc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001bcc:	2a00      	cmp	r2, #0
 8001bce:	d101      	bne.n	8001bd4 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
 8001bd0:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8001bd2:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 8001bd4:	6181      	str	r1, [r0, #24]
 8001bd6:	e7fc      	b.n	8001bd2 <HAL_GPIO_WritePin+0x6>

08001bd8 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001bd8:	6942      	ldr	r2, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001bda:	0013      	movs	r3, r2
 8001bdc:	400b      	ands	r3, r1
 8001bde:	041b      	lsls	r3, r3, #16
 8001be0:	4391      	bics	r1, r2
 8001be2:	4319      	orrs	r1, r3
 8001be4:	6181      	str	r1, [r0, #24]
}
 8001be6:	4770      	bx	lr

08001be8 <HAL_GPIO_EXTI_Callback>:
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001be8:	4770      	bx	lr
 8001bea:	46c0      	nop			; (mov r8, r8)

08001bec <HAL_GPIO_EXTI_IRQHandler>:
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001bec:	4b04      	ldr	r3, [pc, #16]	; (8001c00 <HAL_GPIO_EXTI_IRQHandler+0x14>)
{
 8001bee:	b510      	push	{r4, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001bf0:	695a      	ldr	r2, [r3, #20]
 8001bf2:	4210      	tst	r0, r2
 8001bf4:	d002      	beq.n	8001bfc <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001bf6:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001bf8:	f7ff fff6 	bl	8001be8 <HAL_GPIO_EXTI_Callback>
}
 8001bfc:	bd10      	pop	{r4, pc}
 8001bfe:	46c0      	nop			; (mov r8, r8)
 8001c00:	40010400 	.word	0x40010400

08001c04 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8001c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c06:	1e04      	subs	r4, r0, #0
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8001c08:	d047      	beq.n	8001c9a <HAL_LPTIM_Init+0x96>
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8001c0a:	232e      	movs	r3, #46	; 0x2e
 8001c0c:	5cc3      	ldrb	r3, [r0, r3]
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d038      	beq.n	8001c86 <HAL_LPTIM_Init+0x82>
    HAL_LPTIM_MspInit(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8001c14:	2202      	movs	r2, #2
 8001c16:	232e      	movs	r3, #46	; 0x2e

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8001c18:	6821      	ldr	r1, [r4, #0]

  if (((hlptim->Init.Clock.Source) == LPTIM_CLOCKSOURCE_ULPTIM) || ((hlptim->Init.CounterSource) == LPTIM_COUNTERSOURCE_EXTERNAL))
 8001c1a:	6860      	ldr	r0, [r4, #4]
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8001c1c:	54e2      	strb	r2, [r4, r3]
  tmpcfgr = hlptim->Instance->CFGR;
 8001c1e:	68ca      	ldr	r2, [r1, #12]
 8001c20:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  if (((hlptim->Init.Clock.Source) == LPTIM_CLOCKSOURCE_ULPTIM) || ((hlptim->Init.CounterSource) == LPTIM_COUNTERSOURCE_EXTERNAL))
 8001c22:	2801      	cmp	r0, #1
 8001c24:	d028      	beq.n	8001c78 <HAL_LPTIM_Init+0x74>
 8001c26:	2380      	movs	r3, #128	; 0x80
 8001c28:	041b      	lsls	r3, r3, #16
 8001c2a:	429e      	cmp	r6, r3
 8001c2c:	d024      	beq.n	8001c78 <HAL_LPTIM_Init+0x74>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
  }
  if ((hlptim->Init.Trigger.Source) != LPTIM_TRIGSOURCE_SOFTWARE)
 8001c2e:	6965      	ldr	r5, [r4, #20]
 8001c30:	4b21      	ldr	r3, [pc, #132]	; (8001cb8 <HAL_LPTIM_Init+0xb4>)
 8001c32:	429d      	cmp	r5, r3
 8001c34:	d033      	beq.n	8001c9e <HAL_LPTIM_Init+0x9a>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8001c36:	4b21      	ldr	r3, [pc, #132]	; (8001cbc <HAL_LPTIM_Init+0xb8>)
 8001c38:	401a      	ands	r2, r3
  }

  /* Clear CKSEL, CKPOL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_CKPOL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8001c3a:	4b21      	ldr	r3, [pc, #132]	; (8001cc0 <HAL_LPTIM_Init+0xbc>)

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
              hlptim->Init.Clock.Prescaler |
              hlptim->Init.OutputPolarity  |
              hlptim->Init.UpdateMode      |
 8001c3c:	68a7      	ldr	r7, [r4, #8]
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_CKPOL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8001c3e:	401a      	ands	r2, r3
              hlptim->Init.UpdateMode      |
 8001c40:	0003      	movs	r3, r0
 8001c42:	4333      	orrs	r3, r6
 8001c44:	433b      	orrs	r3, r7
 8001c46:	6a27      	ldr	r7, [r4, #32]
 8001c48:	433b      	orrs	r3, r7
 8001c4a:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8001c4c:	433b      	orrs	r3, r7
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8001c4e:	4313      	orrs	r3, r2
              hlptim->Init.CounterSource);

  if (((hlptim->Init.Clock.Source) == LPTIM_CLOCKSOURCE_ULPTIM) || ((hlptim->Init.CounterSource) == LPTIM_COUNTERSOURCE_EXTERNAL))
 8001c50:	2801      	cmp	r0, #1
 8001c52:	d01d      	beq.n	8001c90 <HAL_LPTIM_Init+0x8c>
 8001c54:	2280      	movs	r2, #128	; 0x80
 8001c56:	0412      	lsls	r2, r2, #16
 8001c58:	4296      	cmp	r6, r2
 8001c5a:	d019      	beq.n	8001c90 <HAL_LPTIM_Init+0x8c>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
                hlptim->Init.UltraLowPowerClock.SampleTime);
  }

  if ((hlptim->Init.Trigger.Source) != LPTIM_TRIGSOURCE_SOFTWARE)
 8001c5c:	4a16      	ldr	r2, [pc, #88]	; (8001cb8 <HAL_LPTIM_Init+0xb4>)
 8001c5e:	4295      	cmp	r5, r2
 8001c60:	d004      	beq.n	8001c6c <HAL_LPTIM_Init+0x68>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8001c62:	69a2      	ldr	r2, [r4, #24]
                hlptim->Init.Trigger.ActiveEdge |
 8001c64:	69e0      	ldr	r0, [r4, #28]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8001c66:	432a      	orrs	r2, r5
                hlptim->Init.Trigger.ActiveEdge |
 8001c68:	4302      	orrs	r2, r0
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8001c6a:	4313      	orrs	r3, r2
                hlptim->Init.Trigger.SampleTime);
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8001c6c:	60cb      	str	r3, [r1, #12]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8001c6e:	2201      	movs	r2, #1
 8001c70:	232e      	movs	r3, #46	; 0x2e

  /* Return function status */
  return HAL_OK;
 8001c72:	2000      	movs	r0, #0
  hlptim->State = HAL_LPTIM_STATE_READY;
 8001c74:	54e2      	strb	r2, [r4, r3]
}
 8001c76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8001c78:	231e      	movs	r3, #30
  if ((hlptim->Init.Trigger.Source) != LPTIM_TRIGSOURCE_SOFTWARE)
 8001c7a:	6965      	ldr	r5, [r4, #20]
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8001c7c:	439a      	bics	r2, r3
  if ((hlptim->Init.Trigger.Source) != LPTIM_TRIGSOURCE_SOFTWARE)
 8001c7e:	4b0e      	ldr	r3, [pc, #56]	; (8001cb8 <HAL_LPTIM_Init+0xb4>)
 8001c80:	429d      	cmp	r5, r3
 8001c82:	d1d8      	bne.n	8001c36 <HAL_LPTIM_Init+0x32>
 8001c84:	e7d9      	b.n	8001c3a <HAL_LPTIM_Init+0x36>
    hlptim->Lock = HAL_UNLOCKED;
 8001c86:	222d      	movs	r2, #45	; 0x2d
 8001c88:	5483      	strb	r3, [r0, r2]
    HAL_LPTIM_MspInit(hlptim);
 8001c8a:	f7ff f8af 	bl	8000dec <HAL_LPTIM_MspInit>
 8001c8e:	e7c1      	b.n	8001c14 <HAL_LPTIM_Init+0x10>
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8001c90:	68e2      	ldr	r2, [r4, #12]
 8001c92:	6920      	ldr	r0, [r4, #16]
 8001c94:	4302      	orrs	r2, r0
 8001c96:	4313      	orrs	r3, r2
 8001c98:	e7e0      	b.n	8001c5c <HAL_LPTIM_Init+0x58>
    return HAL_ERROR;
 8001c9a:	2001      	movs	r0, #1
 8001c9c:	e7eb      	b.n	8001c76 <HAL_LPTIM_Init+0x72>
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_CKPOL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8001c9e:	4b08      	ldr	r3, [pc, #32]	; (8001cc0 <HAL_LPTIM_Init+0xbc>)
 8001ca0:	401a      	ands	r2, r3
              hlptim->Init.UpdateMode      |
 8001ca2:	0003      	movs	r3, r0
 8001ca4:	68a0      	ldr	r0, [r4, #8]
 8001ca6:	4333      	orrs	r3, r6
 8001ca8:	4303      	orrs	r3, r0
 8001caa:	6a20      	ldr	r0, [r4, #32]
 8001cac:	4303      	orrs	r3, r0
 8001cae:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001cb0:	4303      	orrs	r3, r0
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	e7da      	b.n	8001c6c <HAL_LPTIM_Init+0x68>
 8001cb6:	46c0      	nop			; (mov r8, r8)
 8001cb8:	0000ffff 	.word	0x0000ffff
 8001cbc:	ffff1f3f 	.word	0xffff1f3f
 8001cc0:	ff19f1f8 	.word	0xff19f1f8

08001cc4 <HAL_LPTIM_Counter_Start>:
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8001cc4:	232e      	movs	r3, #46	; 0x2e
 8001cc6:	2202      	movs	r2, #2
{
 8001cc8:	b510      	push	{r4, lr}
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8001cca:	54c2      	strb	r2, [r0, r3]

  /* If clock source is not ULPTIM clock and counter source is external, then it must not be prescaled */
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM) && (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8001ccc:	6842      	ldr	r2, [r0, #4]
 8001cce:	6803      	ldr	r3, [r0, #0]
 8001cd0:	2a01      	cmp	r2, #1
 8001cd2:	d004      	beq.n	8001cde <HAL_LPTIM_Counter_Start+0x1a>
 8001cd4:	2280      	movs	r2, #128	; 0x80
 8001cd6:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8001cd8:	0412      	lsls	r2, r2, #16
 8001cda:	4294      	cmp	r4, r2
 8001cdc:	d00c      	beq.n	8001cf8 <HAL_LPTIM_Counter_Start+0x34>
    /* Set clock prescaler to 0 */
    hlptim->Instance->CFGR &= ~LPTIM_CFGR_PRESC;
  }

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8001cde:	2401      	movs	r4, #1
 8001ce0:	691a      	ldr	r2, [r3, #16]
 8001ce2:	4322      	orrs	r2, r4
 8001ce4:	611a      	str	r2, [r3, #16]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 8001ce6:	6199      	str	r1, [r3, #24]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 8001ce8:	2104      	movs	r1, #4
 8001cea:	691a      	ldr	r2, [r3, #16]
 8001cec:	430a      	orrs	r2, r1
 8001cee:	611a      	str	r2, [r3, #16]

  /* Change the TIM state*/
  hlptim->State = HAL_LPTIM_STATE_READY;
 8001cf0:	232e      	movs	r3, #46	; 0x2e
 8001cf2:	54c4      	strb	r4, [r0, r3]

  /* Return function status */
  return HAL_OK;
}
 8001cf4:	2000      	movs	r0, #0
 8001cf6:	bd10      	pop	{r4, pc}
    hlptim->Instance->CFGR &= ~LPTIM_CFGR_PRESC;
 8001cf8:	68da      	ldr	r2, [r3, #12]
 8001cfa:	4c02      	ldr	r4, [pc, #8]	; (8001d04 <HAL_LPTIM_Counter_Start+0x40>)
 8001cfc:	4022      	ands	r2, r4
 8001cfe:	60da      	str	r2, [r3, #12]
 8001d00:	e7ed      	b.n	8001cde <HAL_LPTIM_Counter_Start+0x1a>
 8001d02:	46c0      	nop			; (mov r8, r8)
 8001d04:	fffff1ff 	.word	0xfffff1ff

08001d08 <HAL_LPTIM_Counter_Stop>:
 8001d08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d0a:	46de      	mov	lr, fp
 8001d0c:	4657      	mov	r7, sl
 8001d0e:	464e      	mov	r6, r9
 8001d10:	4645      	mov	r5, r8
 8001d12:	232e      	movs	r3, #46	; 0x2e
 8001d14:	2202      	movs	r2, #2
 8001d16:	b5e0      	push	{r5, r6, r7, lr}
 8001d18:	0004      	movs	r4, r0
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	54c2      	strb	r2, [r0, r3]
 8001d1e:	b672      	cpsid	i
 8001d20:	4a45      	ldr	r2, [pc, #276]	; (8001e38 <HAL_LPTIM_Counter_Stop+0x130>)
 8001d22:	6803      	ldr	r3, [r0, #0]
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d13e      	bne.n	8001da6 <HAL_LPTIM_Counter_Stop+0x9e>
 8001d28:	4a44      	ldr	r2, [pc, #272]	; (8001e3c <HAL_LPTIM_Counter_Stop+0x134>)
 8001d2a:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 8001d2c:	689f      	ldr	r7, [r3, #8]
 8001d2e:	4688      	mov	r8, r1
 8001d30:	68d9      	ldr	r1, [r3, #12]
 8001d32:	6958      	ldr	r0, [r3, #20]
 8001d34:	9101      	str	r1, [sp, #4]
 8001d36:	699d      	ldr	r5, [r3, #24]
 8001d38:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001d3a:	468c      	mov	ip, r1
 8001d3c:	2180      	movs	r1, #128	; 0x80
 8001d3e:	4666      	mov	r6, ip
 8001d40:	0609      	lsls	r1, r1, #24
 8001d42:	4331      	orrs	r1, r6
 8001d44:	6291      	str	r1, [r2, #40]	; 0x28
 8001d46:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001d48:	0049      	lsls	r1, r1, #1
 8001d4a:	0849      	lsrs	r1, r1, #1
 8001d4c:	6291      	str	r1, [r2, #40]	; 0x28
 8001d4e:	0001      	movs	r1, r0
 8001d50:	4329      	orrs	r1, r5
 8001d52:	d016      	beq.n	8001d82 <HAL_LPTIM_Counter_Stop+0x7a>
 8001d54:	21c0      	movs	r1, #192	; 0xc0
 8001d56:	4646      	mov	r6, r8
 8001d58:	0309      	lsls	r1, r1, #12
 8001d5a:	400e      	ands	r6, r1
 8001d5c:	46b0      	mov	r8, r6
 8001d5e:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 8001d60:	4e37      	ldr	r6, [pc, #220]	; (8001e40 <HAL_LPTIM_Counter_Stop+0x138>)
 8001d62:	4031      	ands	r1, r6
 8001d64:	64d1      	str	r1, [r2, #76]	; 0x4c
 8001d66:	2800      	cmp	r0, #0
 8001d68:	d147      	bne.n	8001dfa <HAL_LPTIM_Counter_Stop+0xf2>
 8001d6a:	2d00      	cmp	r5, #0
 8001d6c:	d128      	bne.n	8001dc0 <HAL_LPTIM_Counter_Stop+0xb8>
 8001d6e:	4a32      	ldr	r2, [pc, #200]	; (8001e38 <HAL_LPTIM_Counter_Stop+0x130>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d106      	bne.n	8001d82 <HAL_LPTIM_Counter_Stop+0x7a>
 8001d74:	4931      	ldr	r1, [pc, #196]	; (8001e3c <HAL_LPTIM_Counter_Stop+0x134>)
 8001d76:	4832      	ldr	r0, [pc, #200]	; (8001e40 <HAL_LPTIM_Counter_Stop+0x138>)
 8001d78:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8001d7a:	4002      	ands	r2, r0
 8001d7c:	4640      	mov	r0, r8
 8001d7e:	4302      	orrs	r2, r0
 8001d80:	64ca      	str	r2, [r1, #76]	; 0x4c
 8001d82:	2101      	movs	r1, #1
 8001d84:	691a      	ldr	r2, [r3, #16]
 8001d86:	438a      	bics	r2, r1
 8001d88:	611a      	str	r2, [r3, #16]
 8001d8a:	9a01      	ldr	r2, [sp, #4]
 8001d8c:	609f      	str	r7, [r3, #8]
 8001d8e:	60da      	str	r2, [r3, #12]
 8001d90:	b662      	cpsie	i
 8001d92:	232e      	movs	r3, #46	; 0x2e
 8001d94:	2000      	movs	r0, #0
 8001d96:	54e1      	strb	r1, [r4, r3]
 8001d98:	b003      	add	sp, #12
 8001d9a:	bc3c      	pop	{r2, r3, r4, r5}
 8001d9c:	4690      	mov	r8, r2
 8001d9e:	4699      	mov	r9, r3
 8001da0:	46a2      	mov	sl, r4
 8001da2:	46ab      	mov	fp, r5
 8001da4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001da6:	689f      	ldr	r7, [r3, #8]
 8001da8:	68da      	ldr	r2, [r3, #12]
 8001daa:	6958      	ldr	r0, [r3, #20]
 8001dac:	9201      	str	r2, [sp, #4]
 8001dae:	2100      	movs	r1, #0
 8001db0:	0002      	movs	r2, r0
 8001db2:	699d      	ldr	r5, [r3, #24]
 8001db4:	4688      	mov	r8, r1
 8001db6:	432a      	orrs	r2, r5
 8001db8:	d0e3      	beq.n	8001d82 <HAL_LPTIM_Counter_Stop+0x7a>
 8001dba:	2800      	cmp	r0, #0
 8001dbc:	d0d5      	beq.n	8001d6a <HAL_LPTIM_Counter_Stop+0x62>
 8001dbe:	e01c      	b.n	8001dfa <HAL_LPTIM_Counter_Stop+0xf2>
 8001dc0:	2101      	movs	r1, #1
 8001dc2:	691a      	ldr	r2, [r3, #16]
 8001dc4:	430a      	orrs	r2, r1
 8001dc6:	611a      	str	r2, [r3, #16]
 8001dc8:	619d      	str	r5, [r3, #24]
 8001dca:	f7ff f959 	bl	8001080 <HAL_GetTick>
 8001dce:	23fa      	movs	r3, #250	; 0xfa
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	4681      	mov	r9, r0
 8001dd4:	2510      	movs	r5, #16
 8001dd6:	469a      	mov	sl, r3
 8001dd8:	e001      	b.n	8001dde <HAL_LPTIM_Counter_Stop+0xd6>
 8001dda:	4550      	cmp	r0, sl
 8001ddc:	d807      	bhi.n	8001dee <HAL_LPTIM_Counter_Stop+0xe6>
 8001dde:	f7ff f94f 	bl	8001080 <HAL_GetTick>
 8001de2:	464b      	mov	r3, r9
 8001de4:	1ac0      	subs	r0, r0, r3
 8001de6:	6823      	ldr	r3, [r4, #0]
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	4215      	tst	r5, r2
 8001dec:	d0f5      	beq.n	8001dda <HAL_LPTIM_Counter_Stop+0xd2>
 8001dee:	2210      	movs	r2, #16
 8001df0:	605a      	str	r2, [r3, #4]
 8001df2:	4a11      	ldr	r2, [pc, #68]	; (8001e38 <HAL_LPTIM_Counter_Stop+0x130>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d0bd      	beq.n	8001d74 <HAL_LPTIM_Counter_Stop+0x6c>
 8001df8:	e7c3      	b.n	8001d82 <HAL_LPTIM_Counter_Stop+0x7a>
 8001dfa:	2101      	movs	r1, #1
 8001dfc:	691a      	ldr	r2, [r3, #16]
 8001dfe:	430a      	orrs	r2, r1
 8001e00:	611a      	str	r2, [r3, #16]
 8001e02:	6158      	str	r0, [r3, #20]
 8001e04:	f7ff f93c 	bl	8001080 <HAL_GetTick>
 8001e08:	2308      	movs	r3, #8
 8001e0a:	4699      	mov	r9, r3
 8001e0c:	23fa      	movs	r3, #250	; 0xfa
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	4682      	mov	sl, r0
 8001e12:	469b      	mov	fp, r3
 8001e14:	e001      	b.n	8001e1a <HAL_LPTIM_Counter_Stop+0x112>
 8001e16:	4558      	cmp	r0, fp
 8001e18:	d808      	bhi.n	8001e2c <HAL_LPTIM_Counter_Stop+0x124>
 8001e1a:	f7ff f931 	bl	8001080 <HAL_GetTick>
 8001e1e:	4653      	mov	r3, sl
 8001e20:	4649      	mov	r1, r9
 8001e22:	1ac0      	subs	r0, r0, r3
 8001e24:	6823      	ldr	r3, [r4, #0]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	4211      	tst	r1, r2
 8001e2a:	d0f4      	beq.n	8001e16 <HAL_LPTIM_Counter_Stop+0x10e>
 8001e2c:	2208      	movs	r2, #8
 8001e2e:	605a      	str	r2, [r3, #4]
 8001e30:	2d00      	cmp	r5, #0
 8001e32:	d09c      	beq.n	8001d6e <HAL_LPTIM_Counter_Stop+0x66>
 8001e34:	e7c4      	b.n	8001dc0 <HAL_LPTIM_Counter_Stop+0xb8>
 8001e36:	46c0      	nop			; (mov r8, r8)
 8001e38:	40007c00 	.word	0x40007c00
 8001e3c:	40021000 	.word	0x40021000
 8001e40:	fff3ffff 	.word	0xfff3ffff

08001e44 <HAL_LPTIM_Counter_Start_IT>:
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8001e44:	232e      	movs	r3, #46	; 0x2e
 8001e46:	2202      	movs	r2, #2
{
 8001e48:	b510      	push	{r4, lr}
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8001e4a:	54c2      	strb	r2, [r0, r3]

  /* Enable EXTI Line interrupt on the LPTIM Wake-up Timer */
  __HAL_LPTIM_WAKEUPTIMER_EXTI_ENABLE_IT();
 8001e4c:	2380      	movs	r3, #128	; 0x80
 8001e4e:	4a14      	ldr	r2, [pc, #80]	; (8001ea0 <HAL_LPTIM_Counter_Start_IT+0x5c>)
 8001e50:	059b      	lsls	r3, r3, #22
 8001e52:	6814      	ldr	r4, [r2, #0]
 8001e54:	4323      	orrs	r3, r4
 8001e56:	6013      	str	r3, [r2, #0]

  /* If clock source is not ULPTIM clock and counter source is external, then it must not be prescaled */
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM) && (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8001e58:	6842      	ldr	r2, [r0, #4]
 8001e5a:	6803      	ldr	r3, [r0, #0]
 8001e5c:	2a01      	cmp	r2, #1
 8001e5e:	d004      	beq.n	8001e6a <HAL_LPTIM_Counter_Start_IT+0x26>
 8001e60:	2280      	movs	r2, #128	; 0x80
 8001e62:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8001e64:	0412      	lsls	r2, r2, #16
 8001e66:	4294      	cmp	r4, r2
 8001e68:	d014      	beq.n	8001e94 <HAL_LPTIM_Counter_Start_IT+0x50>
    /* Set clock prescaler to 0 */
    hlptim->Instance->CFGR &= ~LPTIM_CFGR_PRESC;
  }

  /* Enable Autoreload write complete interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARROK);
 8001e6a:	2410      	movs	r4, #16
 8001e6c:	689a      	ldr	r2, [r3, #8]
 8001e6e:	4322      	orrs	r2, r4
 8001e70:	609a      	str	r2, [r3, #8]

  /* Enable Autoreload match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARRM);
 8001e72:	689a      	ldr	r2, [r3, #8]
 8001e74:	3c0e      	subs	r4, #14
 8001e76:	4322      	orrs	r2, r4
 8001e78:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8001e7a:	691a      	ldr	r2, [r3, #16]
 8001e7c:	3c01      	subs	r4, #1
 8001e7e:	4322      	orrs	r2, r4
 8001e80:	611a      	str	r2, [r3, #16]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 8001e82:	6199      	str	r1, [r3, #24]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 8001e84:	2104      	movs	r1, #4
 8001e86:	691a      	ldr	r2, [r3, #16]
 8001e88:	430a      	orrs	r2, r1
 8001e8a:	611a      	str	r2, [r3, #16]

  /* Change the TIM state*/
  hlptim->State = HAL_LPTIM_STATE_READY;
 8001e8c:	232e      	movs	r3, #46	; 0x2e
 8001e8e:	54c4      	strb	r4, [r0, r3]

  /* Return function status */
  return HAL_OK;
}
 8001e90:	2000      	movs	r0, #0
 8001e92:	bd10      	pop	{r4, pc}
    hlptim->Instance->CFGR &= ~LPTIM_CFGR_PRESC;
 8001e94:	68da      	ldr	r2, [r3, #12]
 8001e96:	4c03      	ldr	r4, [pc, #12]	; (8001ea4 <HAL_LPTIM_Counter_Start_IT+0x60>)
 8001e98:	4022      	ands	r2, r4
 8001e9a:	60da      	str	r2, [r3, #12]
 8001e9c:	e7e5      	b.n	8001e6a <HAL_LPTIM_Counter_Start_IT+0x26>
 8001e9e:	46c0      	nop			; (mov r8, r8)
 8001ea0:	40010400 	.word	0x40010400
 8001ea4:	fffff1ff 	.word	0xfffff1ff

08001ea8 <HAL_LPTIM_ReadCounter>:
uint32_t HAL_LPTIM_ReadCounter(LPTIM_HandleTypeDef *hlptim)
{
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  return (hlptim->Instance->CNT);
 8001ea8:	6803      	ldr	r3, [r0, #0]
 8001eaa:	69d8      	ldr	r0, [r3, #28]
}
 8001eac:	4770      	bx	lr
 8001eae:	46c0      	nop			; (mov r8, r8)

08001eb0 <HAL_LPTIM_CompareMatchCallback>:
 8001eb0:	4770      	bx	lr
 8001eb2:	46c0      	nop			; (mov r8, r8)

08001eb4 <HAL_LPTIM_AutoReloadMatchCallback>:
 8001eb4:	4770      	bx	lr
 8001eb6:	46c0      	nop			; (mov r8, r8)

08001eb8 <HAL_LPTIM_TriggerCallback>:
 8001eb8:	4770      	bx	lr
 8001eba:	46c0      	nop			; (mov r8, r8)

08001ebc <HAL_LPTIM_CompareWriteCallback>:
 8001ebc:	4770      	bx	lr
 8001ebe:	46c0      	nop			; (mov r8, r8)

08001ec0 <HAL_LPTIM_AutoReloadWriteCallback>:
 8001ec0:	4770      	bx	lr
 8001ec2:	46c0      	nop			; (mov r8, r8)

08001ec4 <HAL_LPTIM_DirectionUpCallback>:
 8001ec4:	4770      	bx	lr
 8001ec6:	46c0      	nop			; (mov r8, r8)

08001ec8 <HAL_LPTIM_DirectionDownCallback>:
 8001ec8:	4770      	bx	lr
 8001eca:	46c0      	nop			; (mov r8, r8)

08001ecc <HAL_LPTIM_IRQHandler>:
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8001ecc:	2201      	movs	r2, #1
 8001ece:	6803      	ldr	r3, [r0, #0]
{
 8001ed0:	b510      	push	{r4, lr}
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8001ed2:	6819      	ldr	r1, [r3, #0]
{
 8001ed4:	0004      	movs	r4, r0
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8001ed6:	420a      	tst	r2, r1
 8001ed8:	d002      	beq.n	8001ee0 <HAL_LPTIM_IRQHandler+0x14>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 8001eda:	6899      	ldr	r1, [r3, #8]
 8001edc:	420a      	tst	r2, r1
 8001ede:	d12f      	bne.n	8001f40 <HAL_LPTIM_IRQHandler+0x74>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 8001ee0:	2202      	movs	r2, #2
 8001ee2:	6819      	ldr	r1, [r3, #0]
 8001ee4:	420a      	tst	r2, r1
 8001ee6:	d002      	beq.n	8001eee <HAL_LPTIM_IRQHandler+0x22>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 8001ee8:	6899      	ldr	r1, [r3, #8]
 8001eea:	420a      	tst	r2, r1
 8001eec:	d12d      	bne.n	8001f4a <HAL_LPTIM_IRQHandler+0x7e>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8001eee:	2204      	movs	r2, #4
 8001ef0:	6819      	ldr	r1, [r3, #0]
 8001ef2:	420a      	tst	r2, r1
 8001ef4:	d002      	beq.n	8001efc <HAL_LPTIM_IRQHandler+0x30>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 8001ef6:	6899      	ldr	r1, [r3, #8]
 8001ef8:	420a      	tst	r2, r1
 8001efa:	d12c      	bne.n	8001f56 <HAL_LPTIM_IRQHandler+0x8a>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 8001efc:	2208      	movs	r2, #8
 8001efe:	6819      	ldr	r1, [r3, #0]
 8001f00:	420a      	tst	r2, r1
 8001f02:	d002      	beq.n	8001f0a <HAL_LPTIM_IRQHandler+0x3e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 8001f04:	6899      	ldr	r1, [r3, #8]
 8001f06:	420a      	tst	r2, r1
 8001f08:	d12b      	bne.n	8001f62 <HAL_LPTIM_IRQHandler+0x96>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8001f0a:	2210      	movs	r2, #16
 8001f0c:	6819      	ldr	r1, [r3, #0]
 8001f0e:	420a      	tst	r2, r1
 8001f10:	d002      	beq.n	8001f18 <HAL_LPTIM_IRQHandler+0x4c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8001f12:	6899      	ldr	r1, [r3, #8]
 8001f14:	420a      	tst	r2, r1
 8001f16:	d12a      	bne.n	8001f6e <HAL_LPTIM_IRQHandler+0xa2>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8001f18:	2220      	movs	r2, #32
 8001f1a:	6819      	ldr	r1, [r3, #0]
 8001f1c:	420a      	tst	r2, r1
 8001f1e:	d002      	beq.n	8001f26 <HAL_LPTIM_IRQHandler+0x5a>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8001f20:	6899      	ldr	r1, [r3, #8]
 8001f22:	420a      	tst	r2, r1
 8001f24:	d129      	bne.n	8001f7a <HAL_LPTIM_IRQHandler+0xae>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8001f26:	2240      	movs	r2, #64	; 0x40
 8001f28:	6819      	ldr	r1, [r3, #0]
 8001f2a:	420a      	tst	r2, r1
 8001f2c:	d002      	beq.n	8001f34 <HAL_LPTIM_IRQHandler+0x68>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 8001f2e:	6899      	ldr	r1, [r3, #8]
 8001f30:	420a      	tst	r2, r1
 8001f32:	d100      	bne.n	8001f36 <HAL_LPTIM_IRQHandler+0x6a>
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f34:	bd10      	pop	{r4, pc}
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8001f36:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_DirectionDownCallback(hlptim);
 8001f38:	0020      	movs	r0, r4
 8001f3a:	f7ff ffc5 	bl	8001ec8 <HAL_LPTIM_DirectionDownCallback>
}
 8001f3e:	e7f9      	b.n	8001f34 <HAL_LPTIM_IRQHandler+0x68>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 8001f40:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_CompareMatchCallback(hlptim);
 8001f42:	f7ff ffb5 	bl	8001eb0 <HAL_LPTIM_CompareMatchCallback>
 8001f46:	6823      	ldr	r3, [r4, #0]
 8001f48:	e7ca      	b.n	8001ee0 <HAL_LPTIM_IRQHandler+0x14>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 8001f4a:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 8001f4c:	0020      	movs	r0, r4
 8001f4e:	f7ff ffb1 	bl	8001eb4 <HAL_LPTIM_AutoReloadMatchCallback>
 8001f52:	6823      	ldr	r3, [r4, #0]
 8001f54:	e7cb      	b.n	8001eee <HAL_LPTIM_IRQHandler+0x22>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8001f56:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_TriggerCallback(hlptim);
 8001f58:	0020      	movs	r0, r4
 8001f5a:	f7ff ffad 	bl	8001eb8 <HAL_LPTIM_TriggerCallback>
 8001f5e:	6823      	ldr	r3, [r4, #0]
 8001f60:	e7cc      	b.n	8001efc <HAL_LPTIM_IRQHandler+0x30>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8001f62:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8001f64:	0020      	movs	r0, r4
 8001f66:	f7ff ffa9 	bl	8001ebc <HAL_LPTIM_CompareWriteCallback>
 8001f6a:	6823      	ldr	r3, [r4, #0]
 8001f6c:	e7cd      	b.n	8001f0a <HAL_LPTIM_IRQHandler+0x3e>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8001f6e:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 8001f70:	0020      	movs	r0, r4
 8001f72:	f7ff ffa5 	bl	8001ec0 <HAL_LPTIM_AutoReloadWriteCallback>
 8001f76:	6823      	ldr	r3, [r4, #0]
 8001f78:	e7ce      	b.n	8001f18 <HAL_LPTIM_IRQHandler+0x4c>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8001f7a:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_DirectionUpCallback(hlptim);
 8001f7c:	0020      	movs	r0, r4
 8001f7e:	f7ff ffa1 	bl	8001ec4 <HAL_LPTIM_DirectionUpCallback>
 8001f82:	6823      	ldr	r3, [r4, #0]
 8001f84:	e7cf      	b.n	8001f26 <HAL_LPTIM_IRQHandler+0x5a>
 8001f86:	46c0      	nop			; (mov r8, r8)

08001f88 <HAL_PWR_ConfigPVD>:
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));

  /* Set PLS[7:5] bits according to PVDLevel value */
  MODIFY_REG(PWR->CR, PWR_CR_PLS, sConfigPVD->PVDLevel);
 8001f88:	21e0      	movs	r1, #224	; 0xe0
 8001f8a:	4a1a      	ldr	r2, [pc, #104]	; (8001ff4 <HAL_PWR_ConfigPVD+0x6c>)
 8001f8c:	6813      	ldr	r3, [r2, #0]
 8001f8e:	438b      	bics	r3, r1
 8001f90:	6801      	ldr	r1, [r0, #0]
 8001f92:	430b      	orrs	r3, r1
 8001f94:	6013      	str	r3, [r2, #0]
  
  /* Clear any previous config. Keep it clear if no event or IT mode is selected */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 8001f96:	4b18      	ldr	r3, [pc, #96]	; (8001ff8 <HAL_PWR_ConfigPVD+0x70>)
 8001f98:	4a18      	ldr	r2, [pc, #96]	; (8001ffc <HAL_PWR_ConfigPVD+0x74>)
 8001f9a:	6859      	ldr	r1, [r3, #4]
 8001f9c:	4011      	ands	r1, r2
 8001f9e:	6059      	str	r1, [r3, #4]
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 8001fa0:	6819      	ldr	r1, [r3, #0]
 8001fa2:	4011      	ands	r1, r2
 8001fa4:	6019      	str	r1, [r3, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE(); 
 8001fa6:	68d9      	ldr	r1, [r3, #12]
 8001fa8:	4011      	ands	r1, r2
 8001faa:	60d9      	str	r1, [r3, #12]
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 8001fac:	6899      	ldr	r1, [r3, #8]
 8001fae:	400a      	ands	r2, r1

  /* Configure interrupt mode */
  if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 8001fb0:	2180      	movs	r1, #128	; 0x80
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 8001fb2:	609a      	str	r2, [r3, #8]
  if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 8001fb4:	6842      	ldr	r2, [r0, #4]
 8001fb6:	0249      	lsls	r1, r1, #9
 8001fb8:	420a      	tst	r2, r1
 8001fba:	d002      	beq.n	8001fc2 <HAL_PWR_ConfigPVD+0x3a>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 8001fbc:	6818      	ldr	r0, [r3, #0]
 8001fbe:	4301      	orrs	r1, r0
 8001fc0:	6019      	str	r1, [r3, #0]
  }
  
  /* Configure event mode */
  if((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 8001fc2:	0393      	lsls	r3, r2, #14
 8001fc4:	d505      	bpl.n	8001fd2 <HAL_PWR_ConfigPVD+0x4a>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 8001fc6:	2380      	movs	r3, #128	; 0x80
 8001fc8:	490b      	ldr	r1, [pc, #44]	; (8001ff8 <HAL_PWR_ConfigPVD+0x70>)
 8001fca:	025b      	lsls	r3, r3, #9
 8001fcc:	6848      	ldr	r0, [r1, #4]
 8001fce:	4303      	orrs	r3, r0
 8001fd0:	604b      	str	r3, [r1, #4]
  }
  
  /* Configure the edge */
  if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 8001fd2:	07d3      	lsls	r3, r2, #31
 8001fd4:	d505      	bpl.n	8001fe2 <HAL_PWR_ConfigPVD+0x5a>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 8001fd6:	2380      	movs	r3, #128	; 0x80
 8001fd8:	4907      	ldr	r1, [pc, #28]	; (8001ff8 <HAL_PWR_ConfigPVD+0x70>)
 8001fda:	025b      	lsls	r3, r3, #9
 8001fdc:	6888      	ldr	r0, [r1, #8]
 8001fde:	4303      	orrs	r3, r0
 8001fe0:	608b      	str	r3, [r1, #8]
  }
  
  if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 8001fe2:	0793      	lsls	r3, r2, #30
 8001fe4:	d505      	bpl.n	8001ff2 <HAL_PWR_ConfigPVD+0x6a>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 8001fe6:	2380      	movs	r3, #128	; 0x80
 8001fe8:	4a03      	ldr	r2, [pc, #12]	; (8001ff8 <HAL_PWR_ConfigPVD+0x70>)
 8001fea:	025b      	lsls	r3, r3, #9
 8001fec:	68d1      	ldr	r1, [r2, #12]
 8001fee:	430b      	orrs	r3, r1
 8001ff0:	60d3      	str	r3, [r2, #12]
  }
}
 8001ff2:	4770      	bx	lr
 8001ff4:	40007000 	.word	0x40007000
 8001ff8:	40010400 	.word	0x40010400
 8001ffc:	fffeffff 	.word	0xfffeffff

08002000 <HAL_PWR_EnablePVD>:
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
  /* Enable the power voltage detector */
  SET_BIT(PWR->CR, PWR_CR_PVDE);
 8002000:	2110      	movs	r1, #16
 8002002:	4a02      	ldr	r2, [pc, #8]	; (800200c <HAL_PWR_EnablePVD+0xc>)
 8002004:	6813      	ldr	r3, [r2, #0]
 8002006:	430b      	orrs	r3, r1
 8002008:	6013      	str	r3, [r2, #0]
}
 800200a:	4770      	bx	lr
 800200c:	40007000 	.word	0x40007000

08002010 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8002010:	b510      	push	{r4, lr}

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8002012:	2403      	movs	r4, #3
  tmpreg = PWR->CR;
 8002014:	4a0b      	ldr	r2, [pc, #44]	; (8002044 <HAL_PWR_EnterSTOPMode+0x34>)
 8002016:	6813      	ldr	r3, [r2, #0]
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8002018:	43a3      	bics	r3, r4

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 800201a:	4318      	orrs	r0, r3

  /* Store the new value */
  PWR->CR = tmpreg;
 800201c:	6010      	str	r0, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 800201e:	2004      	movs	r0, #4
 8002020:	4a09      	ldr	r2, [pc, #36]	; (8002048 <HAL_PWR_EnterSTOPMode+0x38>)
 8002022:	6913      	ldr	r3, [r2, #16]
 8002024:	4303      	orrs	r3, r0
 8002026:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8002028:	2901      	cmp	r1, #1
 800202a:	d008      	beq.n	800203e <HAL_PWR_EnterSTOPMode+0x2e>
  __ASM volatile ("sev");
 800202c:	bf40      	sev
  __ASM volatile ("wfe");
 800202e:	bf20      	wfe
 8002030:	bf20      	wfe
    __WFE();
    __WFE();
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8002032:	2104      	movs	r1, #4
 8002034:	4a04      	ldr	r2, [pc, #16]	; (8002048 <HAL_PWR_EnterSTOPMode+0x38>)
 8002036:	6913      	ldr	r3, [r2, #16]
 8002038:	438b      	bics	r3, r1
 800203a:	6113      	str	r3, [r2, #16]

}
 800203c:	bd10      	pop	{r4, pc}
  __ASM volatile ("wfi");
 800203e:	bf30      	wfi
 8002040:	e7f7      	b.n	8002032 <HAL_PWR_EnterSTOPMode+0x22>
 8002042:	46c0      	nop			; (mov r8, r8)
 8002044:	40007000 	.word	0x40007000
 8002048:	e000ed00 	.word	0xe000ed00

0800204c <HAL_PWR_PVDCallback>:
__weak void HAL_PWR_PVDCallback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 800204c:	4770      	bx	lr
 800204e:	46c0      	nop			; (mov r8, r8)

08002050 <HAL_PWR_PVD_IRQHandler>:
{
 8002050:	b570      	push	{r4, r5, r6, lr}
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8002052:	2580      	movs	r5, #128	; 0x80
 8002054:	4c04      	ldr	r4, [pc, #16]	; (8002068 <HAL_PWR_PVD_IRQHandler+0x18>)
 8002056:	026d      	lsls	r5, r5, #9
 8002058:	6963      	ldr	r3, [r4, #20]
 800205a:	422b      	tst	r3, r5
 800205c:	d002      	beq.n	8002064 <HAL_PWR_PVD_IRQHandler+0x14>
    HAL_PWR_PVDCallback();
 800205e:	f7ff fff5 	bl	800204c <HAL_PWR_PVDCallback>
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8002062:	6165      	str	r5, [r4, #20]
}
 8002064:	bd70      	pop	{r4, r5, r6, pc}
 8002066:	46c0      	nop			; (mov r8, r8)
 8002068:	40010400 	.word	0x40010400

0800206c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800206c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800206e:	46d6      	mov	lr, sl
 8002070:	464f      	mov	r7, r9
 8002072:	4646      	mov	r6, r8
 8002074:	b5c0      	push	{r6, r7, lr}
 8002076:	0004      	movs	r4, r0
 8002078:	b082      	sub	sp, #8
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 800207a:	2800      	cmp	r0, #0
 800207c:	d100      	bne.n	8002080 <HAL_RCC_OscConfig+0x14>
 800207e:	e127      	b.n	80022d0 <HAL_RCC_OscConfig+0x264>
    return HAL_ERROR;
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002080:	250c      	movs	r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002082:	2680      	movs	r6, #128	; 0x80
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002084:	4bc7      	ldr	r3, [pc, #796]	; (80023a4 <HAL_RCC_OscConfig+0x338>)
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002086:	0276      	lsls	r6, r6, #9
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002088:	68da      	ldr	r2, [r3, #12]
 800208a:	4015      	ands	r5, r2
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800208c:	68da      	ldr	r2, [r3, #12]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800208e:	6803      	ldr	r3, [r0, #0]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002090:	4016      	ands	r6, r2
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002092:	07da      	lsls	r2, r3, #31
 8002094:	d533      	bpl.n	80020fe <HAL_RCC_OscConfig+0x92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002096:	2d08      	cmp	r5, #8
 8002098:	d100      	bne.n	800209c <HAL_RCC_OscConfig+0x30>
 800209a:	e110      	b.n	80022be <HAL_RCC_OscConfig+0x252>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800209c:	2d0c      	cmp	r5, #12
 800209e:	d100      	bne.n	80020a2 <HAL_RCC_OscConfig+0x36>
 80020a0:	e10a      	b.n	80022b8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020a2:	2080      	movs	r0, #128	; 0x80
 80020a4:	6861      	ldr	r1, [r4, #4]
 80020a6:	0240      	lsls	r0, r0, #9
 80020a8:	4281      	cmp	r1, r0
 80020aa:	d100      	bne.n	80020ae <HAL_RCC_OscConfig+0x42>
 80020ac:	e192      	b.n	80023d4 <HAL_RCC_OscConfig+0x368>
 80020ae:	22a0      	movs	r2, #160	; 0xa0
 80020b0:	02d2      	lsls	r2, r2, #11
 80020b2:	4291      	cmp	r1, r2
 80020b4:	d100      	bne.n	80020b8 <HAL_RCC_OscConfig+0x4c>
 80020b6:	e265      	b.n	8002584 <HAL_RCC_OscConfig+0x518>
 80020b8:	4fba      	ldr	r7, [pc, #744]	; (80023a4 <HAL_RCC_OscConfig+0x338>)
 80020ba:	4bbb      	ldr	r3, [pc, #748]	; (80023a8 <HAL_RCC_OscConfig+0x33c>)
 80020bc:	683a      	ldr	r2, [r7, #0]
 80020be:	401a      	ands	r2, r3
 80020c0:	603a      	str	r2, [r7, #0]
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	4ab9      	ldr	r2, [pc, #740]	; (80023ac <HAL_RCC_OscConfig+0x340>)
 80020c6:	4003      	ands	r3, r0
 80020c8:	9301      	str	r3, [sp, #4]
 80020ca:	9b01      	ldr	r3, [sp, #4]
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	4013      	ands	r3, r2
 80020d0:	603b      	str	r3, [r7, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020d2:	2900      	cmp	r1, #0
 80020d4:	d000      	beq.n	80020d8 <HAL_RCC_OscConfig+0x6c>
 80020d6:	e181      	b.n	80023dc <HAL_RCC_OscConfig+0x370>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020d8:	f7fe ffd2 	bl	8001080 <HAL_GetTick>

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80020dc:	2380      	movs	r3, #128	; 0x80
 80020de:	029b      	lsls	r3, r3, #10
        tickstart = HAL_GetTick();
 80020e0:	4681      	mov	r9, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80020e2:	4698      	mov	r8, r3
 80020e4:	e006      	b.n	80020f4 <HAL_RCC_OscConfig+0x88>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020e6:	f7fe ffcb 	bl	8001080 <HAL_GetTick>
 80020ea:	464b      	mov	r3, r9
 80020ec:	1ac0      	subs	r0, r0, r3
 80020ee:	2864      	cmp	r0, #100	; 0x64
 80020f0:	d900      	bls.n	80020f4 <HAL_RCC_OscConfig+0x88>
 80020f2:	e1b2      	b.n	800245a <HAL_RCC_OscConfig+0x3ee>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80020f4:	4642      	mov	r2, r8
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	4213      	tst	r3, r2
 80020fa:	d1f4      	bne.n	80020e6 <HAL_RCC_OscConfig+0x7a>
 80020fc:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020fe:	079a      	lsls	r2, r3, #30
 8002100:	d500      	bpl.n	8002104 <HAL_RCC_OscConfig+0x98>
 8002102:	e0ab      	b.n	800225c <HAL_RCC_OscConfig+0x1f0>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002104:	06da      	lsls	r2, r3, #27
 8002106:	d52a      	bpl.n	800215e <HAL_RCC_OscConfig+0xf2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8002108:	2d00      	cmp	r5, #0
 800210a:	d100      	bne.n	800210e <HAL_RCC_OscConfig+0xa2>
 800210c:	e0e7      	b.n	80022de <HAL_RCC_OscConfig+0x272>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800210e:	69a3      	ldr	r3, [r4, #24]
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002110:	4ea4      	ldr	r6, [pc, #656]	; (80023a4 <HAL_RCC_OscConfig+0x338>)
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002112:	2b00      	cmp	r3, #0
 8002114:	d100      	bne.n	8002118 <HAL_RCC_OscConfig+0xac>
 8002116:	e1cc      	b.n	80024b2 <HAL_RCC_OscConfig+0x446>
        __HAL_RCC_MSI_ENABLE();
 8002118:	2380      	movs	r3, #128	; 0x80
 800211a:	6832      	ldr	r2, [r6, #0]
 800211c:	005b      	lsls	r3, r3, #1
 800211e:	4313      	orrs	r3, r2
 8002120:	6033      	str	r3, [r6, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002122:	f7fe ffad 	bl	8001080 <HAL_GetTick>

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002126:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 8002128:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800212a:	00bf      	lsls	r7, r7, #2
 800212c:	e006      	b.n	800213c <HAL_RCC_OscConfig+0xd0>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800212e:	f7fe ffa7 	bl	8001080 <HAL_GetTick>
 8002132:	4643      	mov	r3, r8
 8002134:	1ac0      	subs	r0, r0, r3
 8002136:	2802      	cmp	r0, #2
 8002138:	d900      	bls.n	800213c <HAL_RCC_OscConfig+0xd0>
 800213a:	e18e      	b.n	800245a <HAL_RCC_OscConfig+0x3ee>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800213c:	6833      	ldr	r3, [r6, #0]
 800213e:	423b      	tst	r3, r7
 8002140:	d0f5      	beq.n	800212e <HAL_RCC_OscConfig+0xc2>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002142:	6873      	ldr	r3, [r6, #4]
 8002144:	4a9a      	ldr	r2, [pc, #616]	; (80023b0 <HAL_RCC_OscConfig+0x344>)
 8002146:	4013      	ands	r3, r2
 8002148:	6a22      	ldr	r2, [r4, #32]
 800214a:	4313      	orrs	r3, r2
 800214c:	6073      	str	r3, [r6, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800214e:	6872      	ldr	r2, [r6, #4]
 8002150:	69e3      	ldr	r3, [r4, #28]
 8002152:	0212      	lsls	r2, r2, #8
 8002154:	061b      	lsls	r3, r3, #24
 8002156:	0a12      	lsrs	r2, r2, #8
 8002158:	4313      	orrs	r3, r2
 800215a:	6073      	str	r3, [r6, #4]
 800215c:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800215e:	071a      	lsls	r2, r3, #28
 8002160:	d519      	bpl.n	8002196 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002162:	6963      	ldr	r3, [r4, #20]
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002164:	4e8f      	ldr	r6, [pc, #572]	; (80023a4 <HAL_RCC_OscConfig+0x338>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002166:	2b00      	cmp	r3, #0
 8002168:	d100      	bne.n	800216c <HAL_RCC_OscConfig+0x100>
 800216a:	e18d      	b.n	8002488 <HAL_RCC_OscConfig+0x41c>
      __HAL_RCC_LSI_ENABLE();
 800216c:	2201      	movs	r2, #1
 800216e:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8002170:	4313      	orrs	r3, r2
 8002172:	6533      	str	r3, [r6, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002174:	f7fe ff84 	bl	8001080 <HAL_GetTick>

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002178:	2302      	movs	r3, #2
      tickstart = HAL_GetTick();
 800217a:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800217c:	4698      	mov	r8, r3
 800217e:	e005      	b.n	800218c <HAL_RCC_OscConfig+0x120>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002180:	f7fe ff7e 	bl	8001080 <HAL_GetTick>
 8002184:	1bc0      	subs	r0, r0, r7
 8002186:	2802      	cmp	r0, #2
 8002188:	d900      	bls.n	800218c <HAL_RCC_OscConfig+0x120>
 800218a:	e166      	b.n	800245a <HAL_RCC_OscConfig+0x3ee>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800218c:	4642      	mov	r2, r8
 800218e:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8002190:	421a      	tst	r2, r3
 8002192:	d0f5      	beq.n	8002180 <HAL_RCC_OscConfig+0x114>
 8002194:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002196:	075b      	lsls	r3, r3, #29
 8002198:	d541      	bpl.n	800221e <HAL_RCC_OscConfig+0x1b2>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800219a:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 800219c:	2000      	movs	r0, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800219e:	4a81      	ldr	r2, [pc, #516]	; (80023a4 <HAL_RCC_OscConfig+0x338>)
 80021a0:	055b      	lsls	r3, r3, #21
 80021a2:	6b91      	ldr	r1, [r2, #56]	; 0x38
    FlagStatus       pwrclkchanged = RESET;
 80021a4:	4682      	mov	sl, r0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021a6:	4219      	tst	r1, r3
 80021a8:	d104      	bne.n	80021b4 <HAL_RCC_OscConfig+0x148>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021aa:	6b91      	ldr	r1, [r2, #56]	; 0x38
 80021ac:	430b      	orrs	r3, r1
 80021ae:	6393      	str	r3, [r2, #56]	; 0x38
      pwrclkchanged = SET;
 80021b0:	2301      	movs	r3, #1
 80021b2:	469a      	mov	sl, r3
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021b4:	2780      	movs	r7, #128	; 0x80
 80021b6:	4e7f      	ldr	r6, [pc, #508]	; (80023b4 <HAL_RCC_OscConfig+0x348>)
 80021b8:	007f      	lsls	r7, r7, #1
 80021ba:	6833      	ldr	r3, [r6, #0]
 80021bc:	423b      	tst	r3, r7
 80021be:	d100      	bne.n	80021c2 <HAL_RCC_OscConfig+0x156>
 80021c0:	e13b      	b.n	800243a <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021c2:	2280      	movs	r2, #128	; 0x80
 80021c4:	68a3      	ldr	r3, [r4, #8]
 80021c6:	0052      	lsls	r2, r2, #1
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d100      	bne.n	80021ce <HAL_RCC_OscConfig+0x162>
 80021cc:	e1e4      	b.n	8002598 <HAL_RCC_OscConfig+0x52c>
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d100      	bne.n	80021d4 <HAL_RCC_OscConfig+0x168>
 80021d2:	e117      	b.n	8002404 <HAL_RCC_OscConfig+0x398>
 80021d4:	21a0      	movs	r1, #160	; 0xa0
 80021d6:	00c9      	lsls	r1, r1, #3
 80021d8:	428b      	cmp	r3, r1
 80021da:	d100      	bne.n	80021de <HAL_RCC_OscConfig+0x172>
 80021dc:	e20c      	b.n	80025f8 <HAL_RCC_OscConfig+0x58c>
 80021de:	4b71      	ldr	r3, [pc, #452]	; (80023a4 <HAL_RCC_OscConfig+0x338>)
 80021e0:	4975      	ldr	r1, [pc, #468]	; (80023b8 <HAL_RCC_OscConfig+0x34c>)
 80021e2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80021e4:	400a      	ands	r2, r1
 80021e6:	651a      	str	r2, [r3, #80]	; 0x50
 80021e8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80021ea:	4974      	ldr	r1, [pc, #464]	; (80023bc <HAL_RCC_OscConfig+0x350>)
 80021ec:	400a      	ands	r2, r1
 80021ee:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021f0:	f7fe ff46 	bl	8001080 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80021f4:	2680      	movs	r6, #128	; 0x80
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021f6:	4b72      	ldr	r3, [pc, #456]	; (80023c0 <HAL_RCC_OscConfig+0x354>)
      tickstart = HAL_GetTick();
 80021f8:	4681      	mov	r9, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80021fa:	4f6a      	ldr	r7, [pc, #424]	; (80023a4 <HAL_RCC_OscConfig+0x338>)
 80021fc:	00b6      	lsls	r6, r6, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021fe:	4698      	mov	r8, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002200:	e006      	b.n	8002210 <HAL_RCC_OscConfig+0x1a4>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002202:	f7fe ff3d 	bl	8001080 <HAL_GetTick>
 8002206:	464b      	mov	r3, r9
 8002208:	1ac0      	subs	r0, r0, r3
 800220a:	4540      	cmp	r0, r8
 800220c:	d900      	bls.n	8002210 <HAL_RCC_OscConfig+0x1a4>
 800220e:	e124      	b.n	800245a <HAL_RCC_OscConfig+0x3ee>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002210:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002212:	4233      	tst	r3, r6
 8002214:	d0f5      	beq.n	8002202 <HAL_RCC_OscConfig+0x196>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002216:	4653      	mov	r3, sl
 8002218:	2b01      	cmp	r3, #1
 800221a:	d100      	bne.n	800221e <HAL_RCC_OscConfig+0x1b2>
 800221c:	e1ac      	b.n	8002578 <HAL_RCC_OscConfig+0x50c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800221e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002220:	2b00      	cmp	r3, #0
 8002222:	d019      	beq.n	8002258 <HAL_RCC_OscConfig+0x1ec>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002224:	2d0c      	cmp	r5, #12
 8002226:	d100      	bne.n	800222a <HAL_RCC_OscConfig+0x1be>
 8002228:	e1bb      	b.n	80025a2 <HAL_RCC_OscConfig+0x536>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800222a:	2b02      	cmp	r3, #2
 800222c:	d100      	bne.n	8002230 <HAL_RCC_OscConfig+0x1c4>
 800222e:	e16f      	b.n	8002510 <HAL_RCC_OscConfig+0x4a4>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002230:	4c5c      	ldr	r4, [pc, #368]	; (80023a4 <HAL_RCC_OscConfig+0x338>)
 8002232:	4a64      	ldr	r2, [pc, #400]	; (80023c4 <HAL_RCC_OscConfig+0x358>)
 8002234:	6823      	ldr	r3, [r4, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002236:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8002238:	4013      	ands	r3, r2
 800223a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800223c:	f7fe ff20 	bl	8001080 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002240:	04ad      	lsls	r5, r5, #18
        tickstart = HAL_GetTick();
 8002242:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002244:	e005      	b.n	8002252 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002246:	f7fe ff1b 	bl	8001080 <HAL_GetTick>
 800224a:	1b80      	subs	r0, r0, r6
 800224c:	2802      	cmp	r0, #2
 800224e:	d900      	bls.n	8002252 <HAL_RCC_OscConfig+0x1e6>
 8002250:	e103      	b.n	800245a <HAL_RCC_OscConfig+0x3ee>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002252:	6823      	ldr	r3, [r4, #0]
 8002254:	422b      	tst	r3, r5
 8002256:	d1f6      	bne.n	8002246 <HAL_RCC_OscConfig+0x1da>
        }
      }
    }
  }

  return HAL_OK;
 8002258:	2000      	movs	r0, #0
 800225a:	e03a      	b.n	80022d2 <HAL_RCC_OscConfig+0x266>
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800225c:	2220      	movs	r2, #32
    hsi_state = RCC_OscInitStruct->HSIState;
 800225e:	68e3      	ldr	r3, [r4, #12]
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8002260:	421a      	tst	r2, r3
 8002262:	d004      	beq.n	800226e <HAL_RCC_OscConfig+0x202>
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8002264:	484f      	ldr	r0, [pc, #316]	; (80023a4 <HAL_RCC_OscConfig+0x338>)
      hsi_state &= ~RCC_CR_HSIOUTEN;
 8002266:	4393      	bics	r3, r2
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8002268:	6801      	ldr	r1, [r0, #0]
 800226a:	4311      	orrs	r1, r2
 800226c:	6001      	str	r1, [r0, #0]
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800226e:	2d04      	cmp	r5, #4
 8002270:	d061      	beq.n	8002336 <HAL_RCC_OscConfig+0x2ca>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002272:	2d0c      	cmp	r5, #12
 8002274:	d05d      	beq.n	8002332 <HAL_RCC_OscConfig+0x2c6>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002276:	4e4b      	ldr	r6, [pc, #300]	; (80023a4 <HAL_RCC_OscConfig+0x338>)
      if(hsi_state != RCC_HSI_OFF)
 8002278:	2b00      	cmp	r3, #0
 800227a:	d100      	bne.n	800227e <HAL_RCC_OscConfig+0x212>
 800227c:	e0ef      	b.n	800245e <HAL_RCC_OscConfig+0x3f2>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800227e:	2109      	movs	r1, #9
 8002280:	6832      	ldr	r2, [r6, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002282:	2704      	movs	r7, #4
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002284:	438a      	bics	r2, r1
 8002286:	4313      	orrs	r3, r2
 8002288:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800228a:	f7fe fef9 	bl	8001080 <HAL_GetTick>
 800228e:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002290:	e006      	b.n	80022a0 <HAL_RCC_OscConfig+0x234>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002292:	f7fe fef5 	bl	8001080 <HAL_GetTick>
 8002296:	4643      	mov	r3, r8
 8002298:	1ac0      	subs	r0, r0, r3
 800229a:	2802      	cmp	r0, #2
 800229c:	d900      	bls.n	80022a0 <HAL_RCC_OscConfig+0x234>
 800229e:	e0dc      	b.n	800245a <HAL_RCC_OscConfig+0x3ee>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80022a0:	6833      	ldr	r3, [r6, #0]
 80022a2:	421f      	tst	r7, r3
 80022a4:	d0f5      	beq.n	8002292 <HAL_RCC_OscConfig+0x226>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022a6:	6872      	ldr	r2, [r6, #4]
 80022a8:	6923      	ldr	r3, [r4, #16]
 80022aa:	4947      	ldr	r1, [pc, #284]	; (80023c8 <HAL_RCC_OscConfig+0x35c>)
 80022ac:	021b      	lsls	r3, r3, #8
 80022ae:	400a      	ands	r2, r1
 80022b0:	4313      	orrs	r3, r2
 80022b2:	6073      	str	r3, [r6, #4]
 80022b4:	6823      	ldr	r3, [r4, #0]
 80022b6:	e725      	b.n	8002104 <HAL_RCC_OscConfig+0x98>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80022b8:	2e00      	cmp	r6, #0
 80022ba:	d100      	bne.n	80022be <HAL_RCC_OscConfig+0x252>
 80022bc:	e6f1      	b.n	80020a2 <HAL_RCC_OscConfig+0x36>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022be:	4a39      	ldr	r2, [pc, #228]	; (80023a4 <HAL_RCC_OscConfig+0x338>)
 80022c0:	6812      	ldr	r2, [r2, #0]
 80022c2:	0392      	lsls	r2, r2, #14
 80022c4:	d400      	bmi.n	80022c8 <HAL_RCC_OscConfig+0x25c>
 80022c6:	e71a      	b.n	80020fe <HAL_RCC_OscConfig+0x92>
 80022c8:	6862      	ldr	r2, [r4, #4]
 80022ca:	2a00      	cmp	r2, #0
 80022cc:	d000      	beq.n	80022d0 <HAL_RCC_OscConfig+0x264>
 80022ce:	e716      	b.n	80020fe <HAL_RCC_OscConfig+0x92>
        return HAL_ERROR;
 80022d0:	2001      	movs	r0, #1
}
 80022d2:	b002      	add	sp, #8
 80022d4:	bc1c      	pop	{r2, r3, r4}
 80022d6:	4690      	mov	r8, r2
 80022d8:	4699      	mov	r9, r3
 80022da:	46a2      	mov	sl, r4
 80022dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80022de:	4b31      	ldr	r3, [pc, #196]	; (80023a4 <HAL_RCC_OscConfig+0x338>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	059b      	lsls	r3, r3, #22
 80022e4:	d502      	bpl.n	80022ec <HAL_RCC_OscConfig+0x280>
 80022e6:	69a3      	ldr	r3, [r4, #24]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d0f1      	beq.n	80022d0 <HAL_RCC_OscConfig+0x264>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022ec:	4a2d      	ldr	r2, [pc, #180]	; (80023a4 <HAL_RCC_OscConfig+0x338>)
 80022ee:	4830      	ldr	r0, [pc, #192]	; (80023b0 <HAL_RCC_OscConfig+0x344>)
 80022f0:	6851      	ldr	r1, [r2, #4]
 80022f2:	6a23      	ldr	r3, [r4, #32]
 80022f4:	4001      	ands	r1, r0
 80022f6:	4319      	orrs	r1, r3
 80022f8:	6051      	str	r1, [r2, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022fa:	6850      	ldr	r0, [r2, #4]
 80022fc:	69e1      	ldr	r1, [r4, #28]
 80022fe:	0200      	lsls	r0, r0, #8
 8002300:	0a00      	lsrs	r0, r0, #8
 8002302:	0609      	lsls	r1, r1, #24
 8002304:	4301      	orrs	r1, r0
 8002306:	6051      	str	r1, [r2, #4]
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002308:	68d1      	ldr	r1, [r2, #12]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800230a:	2280      	movs	r2, #128	; 0x80
 800230c:	0b5b      	lsrs	r3, r3, #13
 800230e:	3301      	adds	r3, #1
 8002310:	0212      	lsls	r2, r2, #8
 8002312:	409a      	lsls	r2, r3
 8002314:	0013      	movs	r3, r2
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002316:	060a      	lsls	r2, r1, #24
 8002318:	492c      	ldr	r1, [pc, #176]	; (80023cc <HAL_RCC_OscConfig+0x360>)
 800231a:	0f12      	lsrs	r2, r2, #28
 800231c:	5c8a      	ldrb	r2, [r1, r2]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 800231e:	2000      	movs	r0, #0
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002320:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002322:	4a2b      	ldr	r2, [pc, #172]	; (80023d0 <HAL_RCC_OscConfig+0x364>)
 8002324:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8002326:	f7fe fe65 	bl	8000ff4 <HAL_InitTick>
        if(status != HAL_OK)
 800232a:	2800      	cmp	r0, #0
 800232c:	d1d1      	bne.n	80022d2 <HAL_RCC_OscConfig+0x266>
 800232e:	6823      	ldr	r3, [r4, #0]
 8002330:	e715      	b.n	800215e <HAL_RCC_OscConfig+0xf2>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002332:	2e00      	cmp	r6, #0
 8002334:	d19f      	bne.n	8002276 <HAL_RCC_OscConfig+0x20a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8002336:	4a1b      	ldr	r2, [pc, #108]	; (80023a4 <HAL_RCC_OscConfig+0x338>)
 8002338:	6812      	ldr	r2, [r2, #0]
 800233a:	0752      	lsls	r2, r2, #29
 800233c:	d501      	bpl.n	8002342 <HAL_RCC_OscConfig+0x2d6>
 800233e:	2b00      	cmp	r3, #0
 8002340:	d0c6      	beq.n	80022d0 <HAL_RCC_OscConfig+0x264>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002342:	4a18      	ldr	r2, [pc, #96]	; (80023a4 <HAL_RCC_OscConfig+0x338>)
 8002344:	6921      	ldr	r1, [r4, #16]
 8002346:	6850      	ldr	r0, [r2, #4]
 8002348:	4e1f      	ldr	r6, [pc, #124]	; (80023c8 <HAL_RCC_OscConfig+0x35c>)
 800234a:	0209      	lsls	r1, r1, #8
 800234c:	4030      	ands	r0, r6
 800234e:	4301      	orrs	r1, r0
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002350:	2009      	movs	r0, #9
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002352:	6051      	str	r1, [r2, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002354:	6811      	ldr	r1, [r2, #0]
 8002356:	4381      	bics	r1, r0
 8002358:	430b      	orrs	r3, r1
 800235a:	6013      	str	r3, [r2, #0]
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800235c:	230c      	movs	r3, #12
  tmpreg = RCC->CFGR;
 800235e:	68d1      	ldr	r1, [r2, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 8002360:	400b      	ands	r3, r1
 8002362:	2b08      	cmp	r3, #8
 8002364:	d100      	bne.n	8002368 <HAL_RCC_OscConfig+0x2fc>
 8002366:	e145      	b.n	80025f4 <HAL_RCC_OscConfig+0x588>
 8002368:	2b0c      	cmp	r3, #12
 800236a:	d100      	bne.n	800236e <HAL_RCC_OscConfig+0x302>
 800236c:	e0b7      	b.n	80024de <HAL_RCC_OscConfig+0x472>
 800236e:	2b04      	cmp	r3, #4
 8002370:	d100      	bne.n	8002374 <HAL_RCC_OscConfig+0x308>
 8002372:	e133      	b.n	80025dc <HAL_RCC_OscConfig+0x570>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002374:	2080      	movs	r0, #128	; 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002376:	6853      	ldr	r3, [r2, #4]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002378:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800237a:	041b      	lsls	r3, r3, #16
 800237c:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800237e:	3301      	adds	r3, #1
 8002380:	4098      	lsls	r0, r3
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002382:	4b08      	ldr	r3, [pc, #32]	; (80023a4 <HAL_RCC_OscConfig+0x338>)
 8002384:	4a11      	ldr	r2, [pc, #68]	; (80023cc <HAL_RCC_OscConfig+0x360>)
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	061b      	lsls	r3, r3, #24
 800238a:	0f1b      	lsrs	r3, r3, #28
 800238c:	5cd3      	ldrb	r3, [r2, r3]
 800238e:	40d8      	lsrs	r0, r3
 8002390:	4b0f      	ldr	r3, [pc, #60]	; (80023d0 <HAL_RCC_OscConfig+0x364>)
 8002392:	6018      	str	r0, [r3, #0]
      status = HAL_InitTick (TICK_INT_PRIORITY);
 8002394:	2000      	movs	r0, #0
 8002396:	f7fe fe2d 	bl	8000ff4 <HAL_InitTick>
      if(status != HAL_OK)
 800239a:	2800      	cmp	r0, #0
 800239c:	d199      	bne.n	80022d2 <HAL_RCC_OscConfig+0x266>
 800239e:	6823      	ldr	r3, [r4, #0]
 80023a0:	e6b0      	b.n	8002104 <HAL_RCC_OscConfig+0x98>
 80023a2:	46c0      	nop			; (mov r8, r8)
 80023a4:	40021000 	.word	0x40021000
 80023a8:	fffeffff 	.word	0xfffeffff
 80023ac:	fffbffff 	.word	0xfffbffff
 80023b0:	ffff1fff 	.word	0xffff1fff
 80023b4:	40007000 	.word	0x40007000
 80023b8:	fffffeff 	.word	0xfffffeff
 80023bc:	fffffbff 	.word	0xfffffbff
 80023c0:	00001388 	.word	0x00001388
 80023c4:	feffffff 	.word	0xfeffffff
 80023c8:	ffffe0ff 	.word	0xffffe0ff
 80023cc:	08003478 	.word	0x08003478
 80023d0:	2000000c 	.word	0x2000000c
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023d4:	4a97      	ldr	r2, [pc, #604]	; (8002634 <HAL_RCC_OscConfig+0x5c8>)
 80023d6:	6813      	ldr	r3, [r2, #0]
 80023d8:	430b      	orrs	r3, r1
 80023da:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80023dc:	f7fe fe50 	bl	8001080 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80023e0:	2780      	movs	r7, #128	; 0x80
 80023e2:	4b94      	ldr	r3, [pc, #592]	; (8002634 <HAL_RCC_OscConfig+0x5c8>)
        tickstart = HAL_GetTick();
 80023e4:	4681      	mov	r9, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80023e6:	4698      	mov	r8, r3
 80023e8:	02bf      	lsls	r7, r7, #10
 80023ea:	e005      	b.n	80023f8 <HAL_RCC_OscConfig+0x38c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023ec:	f7fe fe48 	bl	8001080 <HAL_GetTick>
 80023f0:	464b      	mov	r3, r9
 80023f2:	1ac0      	subs	r0, r0, r3
 80023f4:	2864      	cmp	r0, #100	; 0x64
 80023f6:	d830      	bhi.n	800245a <HAL_RCC_OscConfig+0x3ee>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80023f8:	4643      	mov	r3, r8
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	423b      	tst	r3, r7
 80023fe:	d0f5      	beq.n	80023ec <HAL_RCC_OscConfig+0x380>
 8002400:	6823      	ldr	r3, [r4, #0]
 8002402:	e67c      	b.n	80020fe <HAL_RCC_OscConfig+0x92>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002404:	4e8b      	ldr	r6, [pc, #556]	; (8002634 <HAL_RCC_OscConfig+0x5c8>)
 8002406:	4a8c      	ldr	r2, [pc, #560]	; (8002638 <HAL_RCC_OscConfig+0x5cc>)
 8002408:	6d33      	ldr	r3, [r6, #80]	; 0x50
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800240a:	2780      	movs	r7, #128	; 0x80
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800240c:	4013      	ands	r3, r2
 800240e:	6533      	str	r3, [r6, #80]	; 0x50
 8002410:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8002412:	4a8a      	ldr	r2, [pc, #552]	; (800263c <HAL_RCC_OscConfig+0x5d0>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002414:	00bf      	lsls	r7, r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002416:	4013      	ands	r3, r2
 8002418:	6533      	str	r3, [r6, #80]	; 0x50
      tickstart = HAL_GetTick();
 800241a:	f7fe fe31 	bl	8001080 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800241e:	4b88      	ldr	r3, [pc, #544]	; (8002640 <HAL_RCC_OscConfig+0x5d4>)
      tickstart = HAL_GetTick();
 8002420:	4681      	mov	r9, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002422:	4698      	mov	r8, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002424:	e005      	b.n	8002432 <HAL_RCC_OscConfig+0x3c6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002426:	f7fe fe2b 	bl	8001080 <HAL_GetTick>
 800242a:	464b      	mov	r3, r9
 800242c:	1ac0      	subs	r0, r0, r3
 800242e:	4540      	cmp	r0, r8
 8002430:	d813      	bhi.n	800245a <HAL_RCC_OscConfig+0x3ee>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002432:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8002434:	423b      	tst	r3, r7
 8002436:	d1f6      	bne.n	8002426 <HAL_RCC_OscConfig+0x3ba>
 8002438:	e6ed      	b.n	8002216 <HAL_RCC_OscConfig+0x1aa>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800243a:	6833      	ldr	r3, [r6, #0]
 800243c:	433b      	orrs	r3, r7
 800243e:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002440:	f7fe fe1e 	bl	8001080 <HAL_GetTick>
 8002444:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002446:	6833      	ldr	r3, [r6, #0]
 8002448:	423b      	tst	r3, r7
 800244a:	d000      	beq.n	800244e <HAL_RCC_OscConfig+0x3e2>
 800244c:	e6b9      	b.n	80021c2 <HAL_RCC_OscConfig+0x156>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800244e:	f7fe fe17 	bl	8001080 <HAL_GetTick>
 8002452:	4643      	mov	r3, r8
 8002454:	1ac0      	subs	r0, r0, r3
 8002456:	2864      	cmp	r0, #100	; 0x64
 8002458:	d9f5      	bls.n	8002446 <HAL_RCC_OscConfig+0x3da>
            return HAL_TIMEOUT;
 800245a:	2003      	movs	r0, #3
 800245c:	e739      	b.n	80022d2 <HAL_RCC_OscConfig+0x266>
        __HAL_RCC_HSI_DISABLE();
 800245e:	2201      	movs	r2, #1
 8002460:	6833      	ldr	r3, [r6, #0]
 8002462:	4393      	bics	r3, r2
 8002464:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8002466:	f7fe fe0b 	bl	8001080 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800246a:	2304      	movs	r3, #4
        tickstart = HAL_GetTick();
 800246c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800246e:	4698      	mov	r8, r3
 8002470:	e004      	b.n	800247c <HAL_RCC_OscConfig+0x410>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002472:	f7fe fe05 	bl	8001080 <HAL_GetTick>
 8002476:	1bc0      	subs	r0, r0, r7
 8002478:	2802      	cmp	r0, #2
 800247a:	d8ee      	bhi.n	800245a <HAL_RCC_OscConfig+0x3ee>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800247c:	4642      	mov	r2, r8
 800247e:	6833      	ldr	r3, [r6, #0]
 8002480:	421a      	tst	r2, r3
 8002482:	d1f6      	bne.n	8002472 <HAL_RCC_OscConfig+0x406>
 8002484:	6823      	ldr	r3, [r4, #0]
 8002486:	e63d      	b.n	8002104 <HAL_RCC_OscConfig+0x98>
      __HAL_RCC_LSI_DISABLE();
 8002488:	2201      	movs	r2, #1
 800248a:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800248c:	4393      	bics	r3, r2
 800248e:	6533      	str	r3, [r6, #80]	; 0x50
      tickstart = HAL_GetTick();
 8002490:	f7fe fdf6 	bl	8001080 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002494:	2302      	movs	r3, #2
      tickstart = HAL_GetTick();
 8002496:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002498:	4698      	mov	r8, r3
 800249a:	e004      	b.n	80024a6 <HAL_RCC_OscConfig+0x43a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800249c:	f7fe fdf0 	bl	8001080 <HAL_GetTick>
 80024a0:	1bc0      	subs	r0, r0, r7
 80024a2:	2802      	cmp	r0, #2
 80024a4:	d8d9      	bhi.n	800245a <HAL_RCC_OscConfig+0x3ee>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80024a6:	4642      	mov	r2, r8
 80024a8:	6d33      	ldr	r3, [r6, #80]	; 0x50
 80024aa:	421a      	tst	r2, r3
 80024ac:	d1f6      	bne.n	800249c <HAL_RCC_OscConfig+0x430>
 80024ae:	6823      	ldr	r3, [r4, #0]
 80024b0:	e671      	b.n	8002196 <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_MSI_DISABLE();
 80024b2:	6833      	ldr	r3, [r6, #0]
 80024b4:	4a60      	ldr	r2, [pc, #384]	; (8002638 <HAL_RCC_OscConfig+0x5cc>)
 80024b6:	4013      	ands	r3, r2
 80024b8:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80024ba:	f7fe fde1 	bl	8001080 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80024be:	2380      	movs	r3, #128	; 0x80
 80024c0:	009b      	lsls	r3, r3, #2
        tickstart = HAL_GetTick();
 80024c2:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80024c4:	4698      	mov	r8, r3
 80024c6:	e004      	b.n	80024d2 <HAL_RCC_OscConfig+0x466>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80024c8:	f7fe fdda 	bl	8001080 <HAL_GetTick>
 80024cc:	1bc0      	subs	r0, r0, r7
 80024ce:	2802      	cmp	r0, #2
 80024d0:	d8c3      	bhi.n	800245a <HAL_RCC_OscConfig+0x3ee>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80024d2:	4642      	mov	r2, r8
 80024d4:	6833      	ldr	r3, [r6, #0]
 80024d6:	4213      	tst	r3, r2
 80024d8:	d1f6      	bne.n	80024c8 <HAL_RCC_OscConfig+0x45c>
 80024da:	6823      	ldr	r3, [r4, #0]
 80024dc:	e63f      	b.n	800215e <HAL_RCC_OscConfig+0xf2>
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80024de:	028b      	lsls	r3, r1, #10
 80024e0:	4858      	ldr	r0, [pc, #352]	; (8002644 <HAL_RCC_OscConfig+0x5d8>)
 80024e2:	0f1b      	lsrs	r3, r3, #28
 80024e4:	5cc6      	ldrb	r6, [r0, r3]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80024e6:	0209      	lsls	r1, r1, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80024e8:	68d3      	ldr	r3, [r2, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80024ea:	0f89      	lsrs	r1, r1, #30
 80024ec:	3101      	adds	r1, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80024ee:	03db      	lsls	r3, r3, #15
 80024f0:	d500      	bpl.n	80024f4 <HAL_RCC_OscConfig+0x488>
 80024f2:	e08b      	b.n	800260c <HAL_RCC_OscConfig+0x5a0>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80024f4:	6813      	ldr	r3, [r2, #0]
 80024f6:	06db      	lsls	r3, r3, #27
 80024f8:	d400      	bmi.n	80024fc <HAL_RCC_OscConfig+0x490>
 80024fa:	e091      	b.n	8002620 <HAL_RCC_OscConfig+0x5b4>
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 80024fc:	0173      	lsls	r3, r6, #5
 80024fe:	1b9b      	subs	r3, r3, r6
 8002500:	0198      	lsls	r0, r3, #6
 8002502:	1ac0      	subs	r0, r0, r3
 8002504:	00c0      	lsls	r0, r0, #3
 8002506:	1980      	adds	r0, r0, r6
 8002508:	0200      	lsls	r0, r0, #8
 800250a:	f7fd fdfd 	bl	8000108 <__udivsi3>
 800250e:	e738      	b.n	8002382 <HAL_RCC_OscConfig+0x316>
        __HAL_RCC_PLL_DISABLE();
 8002510:	4d48      	ldr	r5, [pc, #288]	; (8002634 <HAL_RCC_OscConfig+0x5c8>)
 8002512:	4a4d      	ldr	r2, [pc, #308]	; (8002648 <HAL_RCC_OscConfig+0x5dc>)
 8002514:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002516:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8002518:	4013      	ands	r3, r2
 800251a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800251c:	f7fe fdb0 	bl	8001080 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002520:	04b6      	lsls	r6, r6, #18
        tickstart = HAL_GetTick();
 8002522:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002524:	e004      	b.n	8002530 <HAL_RCC_OscConfig+0x4c4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002526:	f7fe fdab 	bl	8001080 <HAL_GetTick>
 800252a:	1bc0      	subs	r0, r0, r7
 800252c:	2802      	cmp	r0, #2
 800252e:	d894      	bhi.n	800245a <HAL_RCC_OscConfig+0x3ee>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002530:	682b      	ldr	r3, [r5, #0]
 8002532:	4233      	tst	r3, r6
 8002534:	d1f7      	bne.n	8002526 <HAL_RCC_OscConfig+0x4ba>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002536:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002538:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800253a:	68ea      	ldr	r2, [r5, #12]
 800253c:	430b      	orrs	r3, r1
 800253e:	4943      	ldr	r1, [pc, #268]	; (800264c <HAL_RCC_OscConfig+0x5e0>)
 8002540:	400a      	ands	r2, r1
 8002542:	4313      	orrs	r3, r2
 8002544:	6b22      	ldr	r2, [r4, #48]	; 0x30
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002546:	2480      	movs	r4, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002548:	4313      	orrs	r3, r2
 800254a:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 800254c:	2380      	movs	r3, #128	; 0x80
 800254e:	682a      	ldr	r2, [r5, #0]
 8002550:	045b      	lsls	r3, r3, #17
 8002552:	4313      	orrs	r3, r2
 8002554:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002556:	f7fe fd93 	bl	8001080 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800255a:	4d36      	ldr	r5, [pc, #216]	; (8002634 <HAL_RCC_OscConfig+0x5c8>)
        tickstart = HAL_GetTick();
 800255c:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800255e:	04a4      	lsls	r4, r4, #18
 8002560:	e005      	b.n	800256e <HAL_RCC_OscConfig+0x502>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002562:	f7fe fd8d 	bl	8001080 <HAL_GetTick>
 8002566:	1b80      	subs	r0, r0, r6
 8002568:	2802      	cmp	r0, #2
 800256a:	d900      	bls.n	800256e <HAL_RCC_OscConfig+0x502>
 800256c:	e775      	b.n	800245a <HAL_RCC_OscConfig+0x3ee>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800256e:	682b      	ldr	r3, [r5, #0]
 8002570:	4223      	tst	r3, r4
 8002572:	d0f6      	beq.n	8002562 <HAL_RCC_OscConfig+0x4f6>
  return HAL_OK;
 8002574:	2000      	movs	r0, #0
 8002576:	e6ac      	b.n	80022d2 <HAL_RCC_OscConfig+0x266>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002578:	4a2e      	ldr	r2, [pc, #184]	; (8002634 <HAL_RCC_OscConfig+0x5c8>)
 800257a:	4935      	ldr	r1, [pc, #212]	; (8002650 <HAL_RCC_OscConfig+0x5e4>)
 800257c:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800257e:	400b      	ands	r3, r1
 8002580:	6393      	str	r3, [r2, #56]	; 0x38
 8002582:	e64c      	b.n	800221e <HAL_RCC_OscConfig+0x1b2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002584:	2380      	movs	r3, #128	; 0x80
 8002586:	4a2b      	ldr	r2, [pc, #172]	; (8002634 <HAL_RCC_OscConfig+0x5c8>)
 8002588:	02db      	lsls	r3, r3, #11
 800258a:	6811      	ldr	r1, [r2, #0]
 800258c:	430b      	orrs	r3, r1
 800258e:	6013      	str	r3, [r2, #0]
 8002590:	6813      	ldr	r3, [r2, #0]
 8002592:	4303      	orrs	r3, r0
 8002594:	6013      	str	r3, [r2, #0]
 8002596:	e721      	b.n	80023dc <HAL_RCC_OscConfig+0x370>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002598:	4a26      	ldr	r2, [pc, #152]	; (8002634 <HAL_RCC_OscConfig+0x5c8>)
 800259a:	6d11      	ldr	r1, [r2, #80]	; 0x50
 800259c:	430b      	orrs	r3, r1
 800259e:	6513      	str	r3, [r2, #80]	; 0x50
 80025a0:	e626      	b.n	80021f0 <HAL_RCC_OscConfig+0x184>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d100      	bne.n	80025a8 <HAL_RCC_OscConfig+0x53c>
 80025a6:	e693      	b.n	80022d0 <HAL_RCC_OscConfig+0x264>
        pll_config = RCC->CFGR;
 80025a8:	4b22      	ldr	r3, [pc, #136]	; (8002634 <HAL_RCC_OscConfig+0x5c8>)
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025aa:	6aa1      	ldr	r1, [r4, #40]	; 0x28
        pll_config = RCC->CFGR;
 80025ac:	68da      	ldr	r2, [r3, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025ae:	2380      	movs	r3, #128	; 0x80
 80025b0:	025b      	lsls	r3, r3, #9
 80025b2:	4013      	ands	r3, r2
        return HAL_ERROR;
 80025b4:	2001      	movs	r0, #1
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025b6:	428b      	cmp	r3, r1
 80025b8:	d000      	beq.n	80025bc <HAL_RCC_OscConfig+0x550>
 80025ba:	e68a      	b.n	80022d2 <HAL_RCC_OscConfig+0x266>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80025bc:	23f0      	movs	r3, #240	; 0xf0
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025be:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80025c0:	039b      	lsls	r3, r3, #14
 80025c2:	4013      	ands	r3, r2
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025c4:	428b      	cmp	r3, r1
 80025c6:	d000      	beq.n	80025ca <HAL_RCC_OscConfig+0x55e>
 80025c8:	e683      	b.n	80022d2 <HAL_RCC_OscConfig+0x266>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80025ca:	20c0      	movs	r0, #192	; 0xc0
 80025cc:	0400      	lsls	r0, r0, #16
 80025ce:	4002      	ands	r2, r0
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80025d0:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80025d2:	1a10      	subs	r0, r2, r0
 80025d4:	1e42      	subs	r2, r0, #1
 80025d6:	4190      	sbcs	r0, r2
    return HAL_ERROR;
 80025d8:	b2c0      	uxtb	r0, r0
 80025da:	e67a      	b.n	80022d2 <HAL_RCC_OscConfig+0x266>
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80025dc:	6813      	ldr	r3, [r2, #0]
 80025de:	3007      	adds	r0, #7
 80025e0:	4018      	ands	r0, r3
        sysclockfreq =  (HSI_VALUE >> 2);
 80025e2:	4243      	negs	r3, r0
 80025e4:	4158      	adcs	r0, r3
 80025e6:	4b1b      	ldr	r3, [pc, #108]	; (8002654 <HAL_RCC_OscConfig+0x5e8>)
 80025e8:	4240      	negs	r0, r0
 80025ea:	4018      	ands	r0, r3
 80025ec:	4b1a      	ldr	r3, [pc, #104]	; (8002658 <HAL_RCC_OscConfig+0x5ec>)
 80025ee:	469c      	mov	ip, r3
 80025f0:	4460      	add	r0, ip
 80025f2:	e6c6      	b.n	8002382 <HAL_RCC_OscConfig+0x316>
      sysclockfreq = HSE_VALUE;
 80025f4:	4819      	ldr	r0, [pc, #100]	; (800265c <HAL_RCC_OscConfig+0x5f0>)
 80025f6:	e6c4      	b.n	8002382 <HAL_RCC_OscConfig+0x316>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025f8:	4b0e      	ldr	r3, [pc, #56]	; (8002634 <HAL_RCC_OscConfig+0x5c8>)
 80025fa:	3901      	subs	r1, #1
 80025fc:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80025fe:	39ff      	subs	r1, #255	; 0xff
 8002600:	4301      	orrs	r1, r0
 8002602:	6519      	str	r1, [r3, #80]	; 0x50
 8002604:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002606:	430a      	orrs	r2, r1
 8002608:	651a      	str	r2, [r3, #80]	; 0x50
 800260a:	e5f1      	b.n	80021f0 <HAL_RCC_OscConfig+0x184>
        pllvco = (HSE_VALUE * pllm) / plld;
 800260c:	0170      	lsls	r0, r6, #5
 800260e:	1b80      	subs	r0, r0, r6
 8002610:	0183      	lsls	r3, r0, #6
 8002612:	1a18      	subs	r0, r3, r0
 8002614:	00c0      	lsls	r0, r0, #3
 8002616:	1980      	adds	r0, r0, r6
 8002618:	0240      	lsls	r0, r0, #9
 800261a:	f7fd fd75 	bl	8000108 <__udivsi3>
 800261e:	e6b0      	b.n	8002382 <HAL_RCC_OscConfig+0x316>
         pllvco = (HSI_VALUE * pllm) / plld;
 8002620:	0173      	lsls	r3, r6, #5
 8002622:	1b9b      	subs	r3, r3, r6
 8002624:	0198      	lsls	r0, r3, #6
 8002626:	1ac0      	subs	r0, r0, r3
 8002628:	00c0      	lsls	r0, r0, #3
 800262a:	1980      	adds	r0, r0, r6
 800262c:	0280      	lsls	r0, r0, #10
 800262e:	f7fd fd6b 	bl	8000108 <__udivsi3>
 8002632:	e6a6      	b.n	8002382 <HAL_RCC_OscConfig+0x316>
 8002634:	40021000 	.word	0x40021000
 8002638:	fffffeff 	.word	0xfffffeff
 800263c:	fffffbff 	.word	0xfffffbff
 8002640:	00001388 	.word	0x00001388
 8002644:	08003490 	.word	0x08003490
 8002648:	feffffff 	.word	0xfeffffff
 800264c:	ff02ffff 	.word	0xff02ffff
 8002650:	efffffff 	.word	0xefffffff
 8002654:	00b71b00 	.word	0x00b71b00
 8002658:	003d0900 	.word	0x003d0900
 800265c:	007a1200 	.word	0x007a1200

08002660 <HAL_RCC_ClockConfig>:
{
 8002660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002662:	46ce      	mov	lr, r9
 8002664:	4647      	mov	r7, r8
 8002666:	0004      	movs	r4, r0
 8002668:	b580      	push	{r7, lr}
 800266a:	000d      	movs	r5, r1
  if(RCC_ClkInitStruct == NULL)
 800266c:	2800      	cmp	r0, #0
 800266e:	d00d      	beq.n	800268c <HAL_RCC_ClockConfig+0x2c>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002670:	2301      	movs	r3, #1
 8002672:	497e      	ldr	r1, [pc, #504]	; (800286c <HAL_RCC_ClockConfig+0x20c>)
 8002674:	680a      	ldr	r2, [r1, #0]
 8002676:	401a      	ands	r2, r3
 8002678:	42aa      	cmp	r2, r5
 800267a:	d20c      	bcs.n	8002696 <HAL_RCC_ClockConfig+0x36>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800267c:	680a      	ldr	r2, [r1, #0]
 800267e:	439a      	bics	r2, r3
 8002680:	432a      	orrs	r2, r5
 8002682:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002684:	680a      	ldr	r2, [r1, #0]
 8002686:	4013      	ands	r3, r2
 8002688:	42ab      	cmp	r3, r5
 800268a:	d004      	beq.n	8002696 <HAL_RCC_ClockConfig+0x36>
    return HAL_ERROR;
 800268c:	2001      	movs	r0, #1
}
 800268e:	bc0c      	pop	{r2, r3}
 8002690:	4690      	mov	r8, r2
 8002692:	4699      	mov	r9, r3
 8002694:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002696:	6823      	ldr	r3, [r4, #0]
 8002698:	079a      	lsls	r2, r3, #30
 800269a:	d506      	bpl.n	80026aa <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800269c:	20f0      	movs	r0, #240	; 0xf0
 800269e:	4974      	ldr	r1, [pc, #464]	; (8002870 <HAL_RCC_ClockConfig+0x210>)
 80026a0:	68ca      	ldr	r2, [r1, #12]
 80026a2:	4382      	bics	r2, r0
 80026a4:	68a0      	ldr	r0, [r4, #8]
 80026a6:	4302      	orrs	r2, r0
 80026a8:	60ca      	str	r2, [r1, #12]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026aa:	07db      	lsls	r3, r3, #31
 80026ac:	d52d      	bpl.n	800270a <HAL_RCC_ClockConfig+0xaa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80026ae:	4a70      	ldr	r2, [pc, #448]	; (8002870 <HAL_RCC_ClockConfig+0x210>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026b0:	6863      	ldr	r3, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80026b2:	6812      	ldr	r2, [r2, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	d066      	beq.n	8002786 <HAL_RCC_ClockConfig+0x126>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026b8:	2b03      	cmp	r3, #3
 80026ba:	d100      	bne.n	80026be <HAL_RCC_ClockConfig+0x5e>
 80026bc:	e088      	b.n	80027d0 <HAL_RCC_ClockConfig+0x170>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d100      	bne.n	80026c4 <HAL_RCC_ClockConfig+0x64>
 80026c2:	e0b5      	b.n	8002830 <HAL_RCC_ClockConfig+0x1d0>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80026c4:	0592      	lsls	r2, r2, #22
 80026c6:	d5e1      	bpl.n	800268c <HAL_RCC_ClockConfig+0x2c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026c8:	2103      	movs	r1, #3
 80026ca:	4e69      	ldr	r6, [pc, #420]	; (8002870 <HAL_RCC_ClockConfig+0x210>)
 80026cc:	68f2      	ldr	r2, [r6, #12]
 80026ce:	438a      	bics	r2, r1
 80026d0:	4313      	orrs	r3, r2
 80026d2:	60f3      	str	r3, [r6, #12]
    tickstart = HAL_GetTick();
 80026d4:	f7fe fcd4 	bl	8001080 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026d8:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 80026da:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026dc:	2b02      	cmp	r3, #2
 80026de:	d100      	bne.n	80026e2 <HAL_RCC_ClockConfig+0x82>
 80026e0:	e096      	b.n	8002810 <HAL_RCC_ClockConfig+0x1b0>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026e2:	2b03      	cmp	r3, #3
 80026e4:	d100      	bne.n	80026e8 <HAL_RCC_ClockConfig+0x88>
 80026e6:	e0a7      	b.n	8002838 <HAL_RCC_ClockConfig+0x1d8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d07f      	beq.n	80027ec <HAL_RCC_ClockConfig+0x18c>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80026ec:	230c      	movs	r3, #12
 80026ee:	4698      	mov	r8, r3
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026f0:	4b60      	ldr	r3, [pc, #384]	; (8002874 <HAL_RCC_ClockConfig+0x214>)
 80026f2:	4699      	mov	r9, r3
 80026f4:	e005      	b.n	8002702 <HAL_RCC_ClockConfig+0xa2>
 80026f6:	f7fe fcc3 	bl	8001080 <HAL_GetTick>
 80026fa:	1bc0      	subs	r0, r0, r7
 80026fc:	4548      	cmp	r0, r9
 80026fe:	d900      	bls.n	8002702 <HAL_RCC_ClockConfig+0xa2>
 8002700:	e084      	b.n	800280c <HAL_RCC_ClockConfig+0x1ac>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002702:	4642      	mov	r2, r8
 8002704:	68f3      	ldr	r3, [r6, #12]
 8002706:	421a      	tst	r2, r3
 8002708:	d1f5      	bne.n	80026f6 <HAL_RCC_ClockConfig+0x96>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800270a:	2101      	movs	r1, #1
 800270c:	4a57      	ldr	r2, [pc, #348]	; (800286c <HAL_RCC_ClockConfig+0x20c>)
 800270e:	6813      	ldr	r3, [r2, #0]
 8002710:	400b      	ands	r3, r1
 8002712:	42ab      	cmp	r3, r5
 8002714:	d905      	bls.n	8002722 <HAL_RCC_ClockConfig+0xc2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002716:	6813      	ldr	r3, [r2, #0]
 8002718:	438b      	bics	r3, r1
 800271a:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800271c:	6813      	ldr	r3, [r2, #0]
 800271e:	4219      	tst	r1, r3
 8002720:	d1b4      	bne.n	800268c <HAL_RCC_ClockConfig+0x2c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002722:	6823      	ldr	r3, [r4, #0]
 8002724:	075a      	lsls	r2, r3, #29
 8002726:	d506      	bpl.n	8002736 <HAL_RCC_ClockConfig+0xd6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002728:	4951      	ldr	r1, [pc, #324]	; (8002870 <HAL_RCC_ClockConfig+0x210>)
 800272a:	4853      	ldr	r0, [pc, #332]	; (8002878 <HAL_RCC_ClockConfig+0x218>)
 800272c:	68ca      	ldr	r2, [r1, #12]
 800272e:	4002      	ands	r2, r0
 8002730:	68e0      	ldr	r0, [r4, #12]
 8002732:	4302      	orrs	r2, r0
 8002734:	60ca      	str	r2, [r1, #12]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002736:	071b      	lsls	r3, r3, #28
 8002738:	d507      	bpl.n	800274a <HAL_RCC_ClockConfig+0xea>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800273a:	494d      	ldr	r1, [pc, #308]	; (8002870 <HAL_RCC_ClockConfig+0x210>)
 800273c:	6923      	ldr	r3, [r4, #16]
 800273e:	68ca      	ldr	r2, [r1, #12]
 8002740:	484e      	ldr	r0, [pc, #312]	; (800287c <HAL_RCC_ClockConfig+0x21c>)
 8002742:	00db      	lsls	r3, r3, #3
 8002744:	4002      	ands	r2, r0
 8002746:	4313      	orrs	r3, r2
 8002748:	60cb      	str	r3, [r1, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 800274a:	230c      	movs	r3, #12
  tmpreg = RCC->CFGR;
 800274c:	4a48      	ldr	r2, [pc, #288]	; (8002870 <HAL_RCC_ClockConfig+0x210>)
 800274e:	68d1      	ldr	r1, [r2, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 8002750:	400b      	ands	r3, r1
 8002752:	2b08      	cmp	r3, #8
 8002754:	d01a      	beq.n	800278c <HAL_RCC_ClockConfig+0x12c>
 8002756:	2b0c      	cmp	r3, #12
 8002758:	d023      	beq.n	80027a2 <HAL_RCC_ClockConfig+0x142>
 800275a:	2b04      	cmp	r3, #4
 800275c:	d018      	beq.n	8002790 <HAL_RCC_ClockConfig+0x130>
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800275e:	2080      	movs	r0, #128	; 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002760:	6853      	ldr	r3, [r2, #4]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002762:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002764:	041b      	lsls	r3, r3, #16
 8002766:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002768:	3301      	adds	r3, #1
 800276a:	4098      	lsls	r0, r3
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800276c:	4b40      	ldr	r3, [pc, #256]	; (8002870 <HAL_RCC_ClockConfig+0x210>)
 800276e:	4a44      	ldr	r2, [pc, #272]	; (8002880 <HAL_RCC_ClockConfig+0x220>)
 8002770:	68db      	ldr	r3, [r3, #12]
 8002772:	061b      	lsls	r3, r3, #24
 8002774:	0f1b      	lsrs	r3, r3, #28
 8002776:	5cd3      	ldrb	r3, [r2, r3]
 8002778:	40d8      	lsrs	r0, r3
 800277a:	4b42      	ldr	r3, [pc, #264]	; (8002884 <HAL_RCC_ClockConfig+0x224>)
 800277c:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(TICK_INT_PRIORITY);
 800277e:	2000      	movs	r0, #0
 8002780:	f7fe fc38 	bl	8000ff4 <HAL_InitTick>
 8002784:	e783      	b.n	800268e <HAL_RCC_ClockConfig+0x2e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002786:	0392      	lsls	r2, r2, #14
 8002788:	d49e      	bmi.n	80026c8 <HAL_RCC_ClockConfig+0x68>
 800278a:	e77f      	b.n	800268c <HAL_RCC_ClockConfig+0x2c>
      sysclockfreq = HSE_VALUE;
 800278c:	483e      	ldr	r0, [pc, #248]	; (8002888 <HAL_RCC_ClockConfig+0x228>)
 800278e:	e7ed      	b.n	800276c <HAL_RCC_ClockConfig+0x10c>
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002790:	6810      	ldr	r0, [r2, #0]
        sysclockfreq =  HSI_VALUE;
 8002792:	4b3e      	ldr	r3, [pc, #248]	; (800288c <HAL_RCC_ClockConfig+0x22c>)
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002794:	06c0      	lsls	r0, r0, #27
        sysclockfreq =  HSI_VALUE;
 8002796:	17c0      	asrs	r0, r0, #31
 8002798:	4018      	ands	r0, r3
 800279a:	4b3d      	ldr	r3, [pc, #244]	; (8002890 <HAL_RCC_ClockConfig+0x230>)
 800279c:	469c      	mov	ip, r3
 800279e:	4460      	add	r0, ip
 80027a0:	e7e4      	b.n	800276c <HAL_RCC_ClockConfig+0x10c>
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80027a2:	028b      	lsls	r3, r1, #10
 80027a4:	483b      	ldr	r0, [pc, #236]	; (8002894 <HAL_RCC_ClockConfig+0x234>)
 80027a6:	0f1b      	lsrs	r3, r3, #28
 80027a8:	5cc4      	ldrb	r4, [r0, r3]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80027aa:	0209      	lsls	r1, r1, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80027ac:	68d3      	ldr	r3, [r2, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80027ae:	0f89      	lsrs	r1, r1, #30
 80027b0:	3101      	adds	r1, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80027b2:	03db      	lsls	r3, r3, #15
 80027b4:	d410      	bmi.n	80027d8 <HAL_RCC_ClockConfig+0x178>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80027b6:	6813      	ldr	r3, [r2, #0]
 80027b8:	06db      	lsls	r3, r3, #27
 80027ba:	d54d      	bpl.n	8002858 <HAL_RCC_ClockConfig+0x1f8>
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 80027bc:	0163      	lsls	r3, r4, #5
 80027be:	1b1b      	subs	r3, r3, r4
 80027c0:	0198      	lsls	r0, r3, #6
 80027c2:	1ac0      	subs	r0, r0, r3
 80027c4:	00c0      	lsls	r0, r0, #3
 80027c6:	1900      	adds	r0, r0, r4
 80027c8:	0200      	lsls	r0, r0, #8
 80027ca:	f7fd fc9d 	bl	8000108 <__udivsi3>
 80027ce:	e7cd      	b.n	800276c <HAL_RCC_ClockConfig+0x10c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80027d0:	0192      	lsls	r2, r2, #6
 80027d2:	d500      	bpl.n	80027d6 <HAL_RCC_ClockConfig+0x176>
 80027d4:	e778      	b.n	80026c8 <HAL_RCC_ClockConfig+0x68>
 80027d6:	e759      	b.n	800268c <HAL_RCC_ClockConfig+0x2c>
        pllvco = (HSE_VALUE * pllm) / plld;
 80027d8:	0160      	lsls	r0, r4, #5
 80027da:	1b00      	subs	r0, r0, r4
 80027dc:	0183      	lsls	r3, r0, #6
 80027de:	1a18      	subs	r0, r3, r0
 80027e0:	00c0      	lsls	r0, r0, #3
 80027e2:	1900      	adds	r0, r0, r4
 80027e4:	0240      	lsls	r0, r0, #9
 80027e6:	f7fd fc8f 	bl	8000108 <__udivsi3>
 80027ea:	e7bf      	b.n	800276c <HAL_RCC_ClockConfig+0x10c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80027ec:	330b      	adds	r3, #11
 80027ee:	4698      	mov	r8, r3
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027f0:	4b20      	ldr	r3, [pc, #128]	; (8002874 <HAL_RCC_ClockConfig+0x214>)
 80027f2:	4699      	mov	r9, r3
 80027f4:	e004      	b.n	8002800 <HAL_RCC_ClockConfig+0x1a0>
 80027f6:	f7fe fc43 	bl	8001080 <HAL_GetTick>
 80027fa:	1bc0      	subs	r0, r0, r7
 80027fc:	4548      	cmp	r0, r9
 80027fe:	d805      	bhi.n	800280c <HAL_RCC_ClockConfig+0x1ac>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002800:	4642      	mov	r2, r8
 8002802:	68f3      	ldr	r3, [r6, #12]
 8002804:	4013      	ands	r3, r2
 8002806:	2b04      	cmp	r3, #4
 8002808:	d1f5      	bne.n	80027f6 <HAL_RCC_ClockConfig+0x196>
 800280a:	e77e      	b.n	800270a <HAL_RCC_ClockConfig+0xaa>
          return HAL_TIMEOUT;
 800280c:	2003      	movs	r0, #3
 800280e:	e73e      	b.n	800268e <HAL_RCC_ClockConfig+0x2e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002810:	330a      	adds	r3, #10
 8002812:	4698      	mov	r8, r3
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002814:	4b17      	ldr	r3, [pc, #92]	; (8002874 <HAL_RCC_ClockConfig+0x214>)
 8002816:	4699      	mov	r9, r3
 8002818:	e004      	b.n	8002824 <HAL_RCC_ClockConfig+0x1c4>
 800281a:	f7fe fc31 	bl	8001080 <HAL_GetTick>
 800281e:	1bc0      	subs	r0, r0, r7
 8002820:	4548      	cmp	r0, r9
 8002822:	d8f3      	bhi.n	800280c <HAL_RCC_ClockConfig+0x1ac>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002824:	4642      	mov	r2, r8
 8002826:	68f3      	ldr	r3, [r6, #12]
 8002828:	4013      	ands	r3, r2
 800282a:	2b08      	cmp	r3, #8
 800282c:	d1f5      	bne.n	800281a <HAL_RCC_ClockConfig+0x1ba>
 800282e:	e76c      	b.n	800270a <HAL_RCC_ClockConfig+0xaa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002830:	0752      	lsls	r2, r2, #29
 8002832:	d500      	bpl.n	8002836 <HAL_RCC_ClockConfig+0x1d6>
 8002834:	e748      	b.n	80026c8 <HAL_RCC_ClockConfig+0x68>
 8002836:	e729      	b.n	800268c <HAL_RCC_ClockConfig+0x2c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002838:	3309      	adds	r3, #9
 800283a:	4698      	mov	r8, r3
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800283c:	4b0d      	ldr	r3, [pc, #52]	; (8002874 <HAL_RCC_ClockConfig+0x214>)
 800283e:	4699      	mov	r9, r3
 8002840:	e004      	b.n	800284c <HAL_RCC_ClockConfig+0x1ec>
 8002842:	f7fe fc1d 	bl	8001080 <HAL_GetTick>
 8002846:	1bc0      	subs	r0, r0, r7
 8002848:	4548      	cmp	r0, r9
 800284a:	d8df      	bhi.n	800280c <HAL_RCC_ClockConfig+0x1ac>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800284c:	4642      	mov	r2, r8
 800284e:	68f3      	ldr	r3, [r6, #12]
 8002850:	4013      	ands	r3, r2
 8002852:	2b0c      	cmp	r3, #12
 8002854:	d1f5      	bne.n	8002842 <HAL_RCC_ClockConfig+0x1e2>
 8002856:	e758      	b.n	800270a <HAL_RCC_ClockConfig+0xaa>
         pllvco = (HSI_VALUE * pllm) / plld;
 8002858:	0163      	lsls	r3, r4, #5
 800285a:	1b1b      	subs	r3, r3, r4
 800285c:	0198      	lsls	r0, r3, #6
 800285e:	1ac0      	subs	r0, r0, r3
 8002860:	00c0      	lsls	r0, r0, #3
 8002862:	1900      	adds	r0, r0, r4
 8002864:	0280      	lsls	r0, r0, #10
 8002866:	f7fd fc4f 	bl	8000108 <__udivsi3>
 800286a:	e77f      	b.n	800276c <HAL_RCC_ClockConfig+0x10c>
 800286c:	40022000 	.word	0x40022000
 8002870:	40021000 	.word	0x40021000
 8002874:	00001388 	.word	0x00001388
 8002878:	fffff8ff 	.word	0xfffff8ff
 800287c:	ffffc7ff 	.word	0xffffc7ff
 8002880:	08003478 	.word	0x08003478
 8002884:	2000000c 	.word	0x2000000c
 8002888:	007a1200 	.word	0x007a1200
 800288c:	ff48e500 	.word	0xff48e500
 8002890:	00f42400 	.word	0x00f42400
 8002894:	08003490 	.word	0x08003490

08002898 <HAL_RCC_GetSysClockFreq>:
  switch (tmpreg & RCC_CFGR_SWS)
 8002898:	230c      	movs	r3, #12
  tmpreg = RCC->CFGR;
 800289a:	4a24      	ldr	r2, [pc, #144]	; (800292c <HAL_RCC_GetSysClockFreq+0x94>)
{
 800289c:	b510      	push	{r4, lr}
  tmpreg = RCC->CFGR;
 800289e:	68d1      	ldr	r1, [r2, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 80028a0:	400b      	ands	r3, r1
 80028a2:	2b08      	cmp	r3, #8
 80028a4:	d02b      	beq.n	80028fe <HAL_RCC_GetSysClockFreq+0x66>
 80028a6:	2b0c      	cmp	r3, #12
 80028a8:	d012      	beq.n	80028d0 <HAL_RCC_GetSysClockFreq+0x38>
 80028aa:	2b04      	cmp	r3, #4
 80028ac:	d007      	beq.n	80028be <HAL_RCC_GetSysClockFreq+0x26>
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80028ae:	2080      	movs	r0, #128	; 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80028b0:	6853      	ldr	r3, [r2, #4]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80028b2:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80028b4:	041b      	lsls	r3, r3, #16
 80028b6:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80028b8:	3301      	adds	r3, #1
 80028ba:	4098      	lsls	r0, r3
      break;
    }
  }
  return sysclockfreq;
}
 80028bc:	bd10      	pop	{r4, pc}
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80028be:	6810      	ldr	r0, [r2, #0]
        sysclockfreq =  HSI_VALUE;
 80028c0:	4b1b      	ldr	r3, [pc, #108]	; (8002930 <HAL_RCC_GetSysClockFreq+0x98>)
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80028c2:	06c0      	lsls	r0, r0, #27
        sysclockfreq =  HSI_VALUE;
 80028c4:	17c0      	asrs	r0, r0, #31
 80028c6:	4018      	ands	r0, r3
 80028c8:	4b1a      	ldr	r3, [pc, #104]	; (8002934 <HAL_RCC_GetSysClockFreq+0x9c>)
 80028ca:	469c      	mov	ip, r3
 80028cc:	4460      	add	r0, ip
 80028ce:	e7f5      	b.n	80028bc <HAL_RCC_GetSysClockFreq+0x24>
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80028d0:	028b      	lsls	r3, r1, #10
 80028d2:	4819      	ldr	r0, [pc, #100]	; (8002938 <HAL_RCC_GetSysClockFreq+0xa0>)
 80028d4:	0f1b      	lsrs	r3, r3, #28
 80028d6:	5cc4      	ldrb	r4, [r0, r3]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80028d8:	0209      	lsls	r1, r1, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80028da:	68d3      	ldr	r3, [r2, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80028dc:	0f89      	lsrs	r1, r1, #30
 80028de:	3101      	adds	r1, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80028e0:	03db      	lsls	r3, r3, #15
 80028e2:	d40e      	bmi.n	8002902 <HAL_RCC_GetSysClockFreq+0x6a>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80028e4:	6813      	ldr	r3, [r2, #0]
 80028e6:	06db      	lsls	r3, r3, #27
 80028e8:	d515      	bpl.n	8002916 <HAL_RCC_GetSysClockFreq+0x7e>
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 80028ea:	0163      	lsls	r3, r4, #5
 80028ec:	1b1b      	subs	r3, r3, r4
 80028ee:	0198      	lsls	r0, r3, #6
 80028f0:	1ac0      	subs	r0, r0, r3
 80028f2:	00c0      	lsls	r0, r0, #3
 80028f4:	1900      	adds	r0, r0, r4
 80028f6:	0200      	lsls	r0, r0, #8
 80028f8:	f7fd fc06 	bl	8000108 <__udivsi3>
 80028fc:	e7de      	b.n	80028bc <HAL_RCC_GetSysClockFreq+0x24>
      sysclockfreq = HSE_VALUE;
 80028fe:	480f      	ldr	r0, [pc, #60]	; (800293c <HAL_RCC_GetSysClockFreq+0xa4>)
 8002900:	e7dc      	b.n	80028bc <HAL_RCC_GetSysClockFreq+0x24>
        pllvco = (HSE_VALUE * pllm) / plld;
 8002902:	0160      	lsls	r0, r4, #5
 8002904:	1b00      	subs	r0, r0, r4
 8002906:	0183      	lsls	r3, r0, #6
 8002908:	1a18      	subs	r0, r3, r0
 800290a:	00c0      	lsls	r0, r0, #3
 800290c:	1900      	adds	r0, r0, r4
 800290e:	0240      	lsls	r0, r0, #9
 8002910:	f7fd fbfa 	bl	8000108 <__udivsi3>
 8002914:	e7d2      	b.n	80028bc <HAL_RCC_GetSysClockFreq+0x24>
         pllvco = (HSI_VALUE * pllm) / plld;
 8002916:	0163      	lsls	r3, r4, #5
 8002918:	1b1b      	subs	r3, r3, r4
 800291a:	0198      	lsls	r0, r3, #6
 800291c:	1ac0      	subs	r0, r0, r3
 800291e:	00c0      	lsls	r0, r0, #3
 8002920:	1900      	adds	r0, r0, r4
 8002922:	0280      	lsls	r0, r0, #10
 8002924:	f7fd fbf0 	bl	8000108 <__udivsi3>
 8002928:	e7c8      	b.n	80028bc <HAL_RCC_GetSysClockFreq+0x24>
 800292a:	46c0      	nop			; (mov r8, r8)
 800292c:	40021000 	.word	0x40021000
 8002930:	ff48e500 	.word	0xff48e500
 8002934:	00f42400 	.word	0x00f42400
 8002938:	08003490 	.word	0x08003490
 800293c:	007a1200 	.word	0x007a1200

08002940 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002940:	4b04      	ldr	r3, [pc, #16]	; (8002954 <HAL_RCC_GetPCLK1Freq+0x14>)
 8002942:	4a05      	ldr	r2, [pc, #20]	; (8002958 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002944:	68db      	ldr	r3, [r3, #12]
 8002946:	055b      	lsls	r3, r3, #21
 8002948:	0f5b      	lsrs	r3, r3, #29
 800294a:	5cd3      	ldrb	r3, [r2, r3]
 800294c:	4a03      	ldr	r2, [pc, #12]	; (800295c <HAL_RCC_GetPCLK1Freq+0x1c>)
 800294e:	6810      	ldr	r0, [r2, #0]
 8002950:	40d8      	lsrs	r0, r3
}
 8002952:	4770      	bx	lr
 8002954:	40021000 	.word	0x40021000
 8002958:	08003488 	.word	0x08003488
 800295c:	2000000c 	.word	0x2000000c

08002960 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002960:	4b04      	ldr	r3, [pc, #16]	; (8002974 <HAL_RCC_GetPCLK2Freq+0x14>)
 8002962:	4a05      	ldr	r2, [pc, #20]	; (8002978 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002964:	68db      	ldr	r3, [r3, #12]
 8002966:	049b      	lsls	r3, r3, #18
 8002968:	0f5b      	lsrs	r3, r3, #29
 800296a:	5cd3      	ldrb	r3, [r2, r3]
 800296c:	4a03      	ldr	r2, [pc, #12]	; (800297c <HAL_RCC_GetPCLK2Freq+0x1c>)
 800296e:	6810      	ldr	r0, [r2, #0]
 8002970:	40d8      	lsrs	r0, r3
}
 8002972:	4770      	bx	lr
 8002974:	40021000 	.word	0x40021000
 8002978:	08003488 	.word	0x08003488
 800297c:	2000000c 	.word	0x2000000c

08002980 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002982:	46ce      	mov	lr, r9
 8002984:	4647      	mov	r7, r8

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002986:	6803      	ldr	r3, [r0, #0]
{
 8002988:	b580      	push	{r7, lr}
 800298a:	0004      	movs	r4, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800298c:	069a      	lsls	r2, r3, #26
 800298e:	d52e      	bpl.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x6e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002990:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8002992:	2000      	movs	r0, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002994:	4a5c      	ldr	r2, [pc, #368]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002996:	055b      	lsls	r3, r3, #21
 8002998:	6b91      	ldr	r1, [r2, #56]	; 0x38
    FlagStatus       pwrclkchanged = RESET;
 800299a:	4680      	mov	r8, r0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800299c:	4219      	tst	r1, r3
 800299e:	d104      	bne.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x2a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029a0:	6b91      	ldr	r1, [r2, #56]	; 0x38
 80029a2:	430b      	orrs	r3, r1
 80029a4:	6393      	str	r3, [r2, #56]	; 0x38
      pwrclkchanged = SET;
 80029a6:	2301      	movs	r3, #1
 80029a8:	4698      	mov	r8, r3
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029aa:	2680      	movs	r6, #128	; 0x80
 80029ac:	4d57      	ldr	r5, [pc, #348]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80029ae:	0076      	lsls	r6, r6, #1
 80029b0:	682b      	ldr	r3, [r5, #0]
 80029b2:	4233      	tst	r3, r6
 80029b4:	d044      	beq.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80029b6:	6865      	ldr	r5, [r4, #4]
 80029b8:	20c0      	movs	r0, #192	; 0xc0
 80029ba:	21c0      	movs	r1, #192	; 0xc0
 80029bc:	002f      	movs	r7, r5
 80029be:	002a      	movs	r2, r5
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80029c0:	4e51      	ldr	r6, [pc, #324]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x188>)
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80029c2:	0380      	lsls	r0, r0, #14
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80029c4:	6833      	ldr	r3, [r6, #0]
 80029c6:	0289      	lsls	r1, r1, #10
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80029c8:	4007      	ands	r7, r0
 80029ca:	400a      	ands	r2, r1
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80029cc:	4003      	ands	r3, r0
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80029ce:	429f      	cmp	r7, r3
 80029d0:	d056      	beq.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x100>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80029d2:	428a      	cmp	r2, r1
 80029d4:	d04a      	beq.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0xec>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80029d6:	6d33      	ldr	r3, [r6, #80]	; 0x50
 80029d8:	4019      	ands	r1, r3

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80029da:	d000      	beq.n	80029de <HAL_RCCEx_PeriphCLKConfig+0x5e>
 80029dc:	e08f      	b.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x17e>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029de:	494a      	ldr	r1, [pc, #296]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80029e0:	6d0b      	ldr	r3, [r1, #80]	; 0x50
 80029e2:	431a      	orrs	r2, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80029e4:	4643      	mov	r3, r8
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029e6:	650a      	str	r2, [r1, #80]	; 0x50
    if(pwrclkchanged == SET)
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d039      	beq.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0xe0>
 80029ec:	6823      	ldr	r3, [r4, #0]
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80029ee:	079a      	lsls	r2, r3, #30
 80029f0:	d506      	bpl.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80029f2:	200c      	movs	r0, #12
 80029f4:	4944      	ldr	r1, [pc, #272]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80029f6:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80029f8:	4382      	bics	r2, r0
 80029fa:	68a0      	ldr	r0, [r4, #8]
 80029fc:	4302      	orrs	r2, r0
 80029fe:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002a00:	075a      	lsls	r2, r3, #29
 8002a02:	d506      	bpl.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002a04:	4940      	ldr	r1, [pc, #256]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002a06:	4842      	ldr	r0, [pc, #264]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8002a08:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8002a0a:	4002      	ands	r2, r0
 8002a0c:	68e0      	ldr	r0, [r4, #12]
 8002a0e:	4302      	orrs	r2, r0
 8002a10:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a12:	071a      	lsls	r2, r3, #28
 8002a14:	d506      	bpl.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0xa4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a16:	493c      	ldr	r1, [pc, #240]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002a18:	483e      	ldr	r0, [pc, #248]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8002a1a:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8002a1c:	4002      	ands	r2, r0
 8002a1e:	6920      	ldr	r0, [r4, #16]
 8002a20:	4302      	orrs	r2, r0
 8002a22:	64ca      	str	r2, [r1, #76]	; 0x4c
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
  }

  return HAL_OK;
 8002a24:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002a26:	061b      	lsls	r3, r3, #24
 8002a28:	d506      	bpl.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002a2a:	4a37      	ldr	r2, [pc, #220]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002a2c:	493a      	ldr	r1, [pc, #232]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8002a2e:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8002a30:	400b      	ands	r3, r1
 8002a32:	6961      	ldr	r1, [r4, #20]
 8002a34:	430b      	orrs	r3, r1
 8002a36:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 8002a38:	bc0c      	pop	{r2, r3}
 8002a3a:	4690      	mov	r8, r2
 8002a3c:	4699      	mov	r9, r3
 8002a3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a40:	682b      	ldr	r3, [r5, #0]
 8002a42:	4333      	orrs	r3, r6
 8002a44:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8002a46:	f7fe fb1b 	bl	8001080 <HAL_GetTick>
 8002a4a:	0007      	movs	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a4c:	e004      	b.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0xd8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a4e:	f7fe fb17 	bl	8001080 <HAL_GetTick>
 8002a52:	1bc0      	subs	r0, r0, r7
 8002a54:	2864      	cmp	r0, #100	; 0x64
 8002a56:	d850      	bhi.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a58:	682b      	ldr	r3, [r5, #0]
 8002a5a:	4233      	tst	r3, r6
 8002a5c:	d0f7      	beq.n	8002a4e <HAL_RCCEx_PeriphCLKConfig+0xce>
 8002a5e:	e7aa      	b.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x36>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a60:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 8002a62:	4a2e      	ldr	r2, [pc, #184]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x19c>)
 8002a64:	4013      	ands	r3, r2
 8002a66:	638b      	str	r3, [r1, #56]	; 0x38
 8002a68:	6823      	ldr	r3, [r4, #0]
 8002a6a:	e7c0      	b.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x6e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002a6c:	6833      	ldr	r3, [r6, #0]
          return HAL_ERROR;
 8002a6e:	2001      	movs	r0, #1
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002a70:	039b      	lsls	r3, r3, #14
 8002a72:	d4e1      	bmi.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002a74:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8002a76:	4013      	ands	r3, r2
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002a78:	d036      	beq.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d105      	bne.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x10a>
 8002a7e:	e030      	b.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x162>
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002a80:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8002a82:	4019      	ands	r1, r3
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002a84:	d028      	beq.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x158>
 8002a86:	4291      	cmp	r1, r2
 8002a88:	d026      	beq.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002a8a:	6823      	ldr	r3, [r4, #0]
 8002a8c:	069b      	lsls	r3, r3, #26
 8002a8e:	d523      	bpl.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      __HAL_RCC_BACKUPRESET_FORCE();
 8002a90:	2180      	movs	r1, #128	; 0x80
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002a92:	4e1d      	ldr	r6, [pc, #116]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x188>)
      __HAL_RCC_BACKUPRESET_FORCE();
 8002a94:	0309      	lsls	r1, r1, #12
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002a96:	6d30      	ldr	r0, [r6, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_FORCE();
 8002a98:	6d37      	ldr	r7, [r6, #80]	; 0x50
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002a9a:	4b21      	ldr	r3, [pc, #132]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
      __HAL_RCC_BACKUPRESET_FORCE();
 8002a9c:	4339      	orrs	r1, r7
 8002a9e:	6531      	str	r1, [r6, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002aa0:	6d31      	ldr	r1, [r6, #80]	; 0x50
 8002aa2:	4f20      	ldr	r7, [pc, #128]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002aa4:	4003      	ands	r3, r0
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002aa6:	4039      	ands	r1, r7
 8002aa8:	6531      	str	r1, [r6, #80]	; 0x50
      RCC->CSR = temp_reg;
 8002aaa:	6533      	str	r3, [r6, #80]	; 0x50
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002aac:	05c3      	lsls	r3, r0, #23
 8002aae:	d513      	bpl.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x158>
        tickstart = HAL_GetTick();
 8002ab0:	f7fe fae6 	bl	8001080 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ab4:	2580      	movs	r5, #128	; 0x80
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ab6:	4b1c      	ldr	r3, [pc, #112]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
        tickstart = HAL_GetTick();
 8002ab8:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002aba:	00ad      	lsls	r5, r5, #2
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002abc:	4699      	mov	r9, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002abe:	e004      	b.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x14a>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ac0:	f7fe fade 	bl	8001080 <HAL_GetTick>
 8002ac4:	1bc0      	subs	r0, r0, r7
 8002ac6:	4548      	cmp	r0, r9
 8002ac8:	d817      	bhi.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002aca:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8002acc:	422b      	tst	r3, r5
 8002ace:	d0f7      	beq.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x140>
 8002ad0:	22c0      	movs	r2, #192	; 0xc0
 8002ad2:	6865      	ldr	r5, [r4, #4]
 8002ad4:	0292      	lsls	r2, r2, #10
 8002ad6:	402a      	ands	r2, r5
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ad8:	23c0      	movs	r3, #192	; 0xc0
 8002ada:	029b      	lsls	r3, r3, #10
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d000      	beq.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x162>
 8002ae0:	e77d      	b.n	80029de <HAL_RCCEx_PeriphCLKConfig+0x5e>
 8002ae2:	27c0      	movs	r7, #192	; 0xc0
 8002ae4:	03bf      	lsls	r7, r7, #14
 8002ae6:	402f      	ands	r7, r5
 8002ae8:	4a07      	ldr	r2, [pc, #28]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002aea:	4910      	ldr	r1, [pc, #64]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002aec:	6813      	ldr	r3, [r2, #0]
 8002aee:	400b      	ands	r3, r1
 8002af0:	431f      	orrs	r7, r3
 8002af2:	6017      	str	r7, [r2, #0]
 8002af4:	22c0      	movs	r2, #192	; 0xc0
 8002af6:	0292      	lsls	r2, r2, #10
 8002af8:	e771      	b.n	80029de <HAL_RCCEx_PeriphCLKConfig+0x5e>
          return HAL_TIMEOUT;
 8002afa:	2003      	movs	r0, #3
 8002afc:	e79c      	b.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002afe:	4291      	cmp	r1, r2
 8002b00:	d100      	bne.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x184>
 8002b02:	e76c      	b.n	80029de <HAL_RCCEx_PeriphCLKConfig+0x5e>
 8002b04:	e7c1      	b.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x10a>
 8002b06:	46c0      	nop			; (mov r8, r8)
 8002b08:	40021000 	.word	0x40021000
 8002b0c:	40007000 	.word	0x40007000
 8002b10:	fffff3ff 	.word	0xfffff3ff
 8002b14:	ffffcfff 	.word	0xffffcfff
 8002b18:	fff3ffff 	.word	0xfff3ffff
 8002b1c:	efffffff 	.word	0xefffffff
 8002b20:	fffcffff 	.word	0xfffcffff
 8002b24:	fff7ffff 	.word	0xfff7ffff
 8002b28:	00001388 	.word	0x00001388
 8002b2c:	ffcfffff 	.word	0xffcfffff

08002b30 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8002b30:	b570      	push	{r4, r5, r6, lr}
 8002b32:	0004      	movs	r4, r0
  /* Check the UART handle allocation */
  if (huart == NULL)
  {
    return HAL_ERROR;
 8002b34:	2001      	movs	r0, #1
  if (huart == NULL)
 8002b36:	2c00      	cmp	r4, #0
 8002b38:	d012      	beq.n	8002b60 <HAL_UART_DeInit+0x30>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 8002b3a:	2324      	movs	r3, #36	; 0x24

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);

  huart->Instance->CR1 = 0x0U;
 8002b3c:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_BUSY;
 8002b3e:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8002b40:	6823      	ldr	r3, [r4, #0]
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	4382      	bics	r2, r0
 8002b46:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8002b48:	0020      	movs	r0, r4
  huart->Instance->CR1 = 0x0U;
 8002b4a:	601d      	str	r5, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8002b4c:	605d      	str	r5, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8002b4e:	609d      	str	r5, [r3, #8]
  HAL_UART_MspDeInit(huart);
 8002b50:	f7fe f9b2 	bl	8000eb8 <HAL_UART_MspDeInit>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
  huart->gState = HAL_UART_STATE_RESET;
  huart->RxState = HAL_UART_STATE_RESET;

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8002b54:	2370      	movs	r3, #112	; 0x70

  return HAL_OK;
 8002b56:	2000      	movs	r0, #0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b58:	67e5      	str	r5, [r4, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_RESET;
 8002b5a:	6765      	str	r5, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_RESET;
 8002b5c:	67a5      	str	r5, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8002b5e:	54e5      	strb	r5, [r4, r3]
}
 8002b60:	bd70      	pop	{r4, r5, r6, pc}
 8002b62:	46c0      	nop			; (mov r8, r8)

08002b64 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002b66:	6f85      	ldr	r5, [r0, #120]	; 0x78
{
 8002b68:	0004      	movs	r4, r0

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8002b6a:	2002      	movs	r0, #2
  if (huart->RxState == HAL_UART_STATE_READY)
 8002b6c:	2d20      	cmp	r5, #32
 8002b6e:	d13b      	bne.n	8002be8 <HAL_UART_Receive_DMA+0x84>
    if ((pData == NULL) || (Size == 0U))
 8002b70:	2900      	cmp	r1, #0
 8002b72:	d03a      	beq.n	8002bea <HAL_UART_Receive_DMA+0x86>
      return HAL_ERROR;
 8002b74:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 8002b76:	2a00      	cmp	r2, #0
 8002b78:	d036      	beq.n	8002be8 <HAL_UART_Receive_DMA+0x84>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b7a:	2380      	movs	r3, #128	; 0x80
 8002b7c:	68a5      	ldr	r5, [r4, #8]
 8002b7e:	015b      	lsls	r3, r3, #5
 8002b80:	429d      	cmp	r5, r3
 8002b82:	d034      	beq.n	8002bee <HAL_UART_Receive_DMA+0x8a>
    __HAL_LOCK(huart);
 8002b84:	2570      	movs	r5, #112	; 0x70
 8002b86:	5d63      	ldrb	r3, [r4, r5]
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d03d      	beq.n	8002c08 <HAL_UART_Receive_DMA+0xa4>
 8002b8c:	2301      	movs	r3, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b8e:	2600      	movs	r6, #0
    __HAL_LOCK(huart);
 8002b90:	5563      	strb	r3, [r4, r5]
    if (huart->hdmarx != NULL)
 8002b92:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    huart->RxXferSize = Size;
 8002b94:	3357      	adds	r3, #87	; 0x57
    huart->pRxBuffPtr = pData;
 8002b96:	6561      	str	r1, [r4, #84]	; 0x54
    huart->RxXferSize = Size;
 8002b98:	52e2      	strh	r2, [r4, r3]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002b9a:	3b36      	subs	r3, #54	; 0x36
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b9c:	67e6      	str	r6, [r4, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002b9e:	67a3      	str	r3, [r4, #120]	; 0x78
 8002ba0:	6823      	ldr	r3, [r4, #0]
    if (huart->hdmarx != NULL)
 8002ba2:	2800      	cmp	r0, #0
 8002ba4:	d010      	beq.n	8002bc8 <HAL_UART_Receive_DMA+0x64>
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002ba6:	4f19      	ldr	r7, [pc, #100]	; (8002c0c <HAL_UART_Receive_DMA+0xa8>)
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8002ba8:	3324      	adds	r3, #36	; 0x24
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002baa:	62c7      	str	r7, [r0, #44]	; 0x2c
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002bac:	4f18      	ldr	r7, [pc, #96]	; (8002c10 <HAL_UART_Receive_DMA+0xac>)
      huart->hdmarx->XferAbortCallback = NULL;
 8002bae:	6386      	str	r6, [r0, #56]	; 0x38
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002bb0:	6307      	str	r7, [r0, #48]	; 0x30
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002bb2:	4f18      	ldr	r7, [pc, #96]	; (8002c14 <HAL_UART_Receive_DMA+0xb0>)
 8002bb4:	6347      	str	r7, [r0, #52]	; 0x34
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8002bb6:	001f      	movs	r7, r3
 8002bb8:	0013      	movs	r3, r2
 8002bba:	000a      	movs	r2, r1
 8002bbc:	0039      	movs	r1, r7
 8002bbe:	f7fe fb63 	bl	8001288 <HAL_DMA_Start_IT>
 8002bc2:	2800      	cmp	r0, #0
 8002bc4:	d119      	bne.n	8002bfa <HAL_UART_Receive_DMA+0x96>
 8002bc6:	6823      	ldr	r3, [r4, #0]
    __HAL_UNLOCK(huart);
 8002bc8:	2270      	movs	r2, #112	; 0x70
 8002bca:	2100      	movs	r1, #0
 8002bcc:	54a1      	strb	r1, [r4, r2]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002bce:	6819      	ldr	r1, [r3, #0]
 8002bd0:	3290      	adds	r2, #144	; 0x90
 8002bd2:	430a      	orrs	r2, r1
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bd4:	2101      	movs	r1, #1
    return HAL_OK;
 8002bd6:	2000      	movs	r0, #0
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002bd8:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bda:	689a      	ldr	r2, [r3, #8]
 8002bdc:	430a      	orrs	r2, r1
 8002bde:	609a      	str	r2, [r3, #8]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002be0:	689a      	ldr	r2, [r3, #8]
 8002be2:	313f      	adds	r1, #63	; 0x3f
 8002be4:	430a      	orrs	r2, r1
 8002be6:	609a      	str	r2, [r3, #8]
  }
}
 8002be8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_ERROR;
 8002bea:	2001      	movs	r0, #1
 8002bec:	e7fc      	b.n	8002be8 <HAL_UART_Receive_DMA+0x84>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002bee:	6923      	ldr	r3, [r4, #16]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d1c7      	bne.n	8002b84 <HAL_UART_Receive_DMA+0x20>
      if ((((uint32_t)pData) & 1) != 0)
 8002bf4:	4201      	tst	r1, r0
 8002bf6:	d0c5      	beq.n	8002b84 <HAL_UART_Receive_DMA+0x20>
 8002bf8:	e7f6      	b.n	8002be8 <HAL_UART_Receive_DMA+0x84>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8002bfa:	2310      	movs	r3, #16
 8002bfc:	67e3      	str	r3, [r4, #124]	; 0x7c
        huart->gState = HAL_UART_STATE_READY;
 8002bfe:	3310      	adds	r3, #16
        __HAL_UNLOCK(huart);
 8002c00:	5566      	strb	r6, [r4, r5]
        return HAL_ERROR;
 8002c02:	2001      	movs	r0, #1
        huart->gState = HAL_UART_STATE_READY;
 8002c04:	6763      	str	r3, [r4, #116]	; 0x74
        return HAL_ERROR;
 8002c06:	e7ef      	b.n	8002be8 <HAL_UART_Receive_DMA+0x84>
    return HAL_BUSY;
 8002c08:	2002      	movs	r0, #2
 8002c0a:	e7ed      	b.n	8002be8 <HAL_UART_Receive_DMA+0x84>
 8002c0c:	08002c1d 	.word	0x08002c1d
 8002c10:	08002c5d 	.word	0x08002c5d
 8002c14:	08002c6d 	.word	0x08002c6d

08002c18 <HAL_UART_RxCpltCallback>:
 8002c18:	4770      	bx	lr
 8002c1a:	46c0      	nop			; (mov r8, r8)

08002c1c <UART_DMAReceiveCplt>:
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8002c1c:	2120      	movs	r1, #32
 8002c1e:	6803      	ldr	r3, [r0, #0]
{
 8002c20:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8002c22:	681b      	ldr	r3, [r3, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002c24:	6a82      	ldr	r2, [r0, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8002c26:	400b      	ands	r3, r1
 8002c28:	d110      	bne.n	8002c4c <UART_DMAReceiveCplt+0x30>
  {
    huart->RxXferCount = 0U;
 8002c2a:	205a      	movs	r0, #90	; 0x5a
 8002c2c:	5213      	strh	r3, [r2, r0]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002c2e:	6813      	ldr	r3, [r2, #0]
 8002c30:	4c08      	ldr	r4, [pc, #32]	; (8002c54 <UART_DMAReceiveCplt+0x38>)
 8002c32:	6818      	ldr	r0, [r3, #0]
 8002c34:	4020      	ands	r0, r4
 8002c36:	6018      	str	r0, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c38:	6898      	ldr	r0, [r3, #8]
 8002c3a:	3403      	adds	r4, #3
 8002c3c:	34ff      	adds	r4, #255	; 0xff
 8002c3e:	43a0      	bics	r0, r4
 8002c40:	6098      	str	r0, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c42:	6898      	ldr	r0, [r3, #8]
 8002c44:	343f      	adds	r4, #63	; 0x3f
 8002c46:	43a0      	bics	r0, r4
 8002c48:	6098      	str	r0, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002c4a:	6791      	str	r1, [r2, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8002c4c:	0010      	movs	r0, r2
 8002c4e:	f7ff ffe3 	bl	8002c18 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002c52:	bd10      	pop	{r4, pc}
 8002c54:	fffffeff 	.word	0xfffffeff

08002c58 <HAL_UART_RxHalfCpltCallback>:
 8002c58:	4770      	bx	lr
 8002c5a:	46c0      	nop			; (mov r8, r8)

08002c5c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002c5c:	b510      	push	{r4, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8002c5e:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8002c60:	f7ff fffa 	bl	8002c58 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002c64:	bd10      	pop	{r4, pc}
 8002c66:	46c0      	nop			; (mov r8, r8)

08002c68 <HAL_UART_ErrorCallback>:
 8002c68:	4770      	bx	lr
 8002c6a:	46c0      	nop			; (mov r8, r8)

08002c6c <UART_DMAError>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002c6c:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 8002c6e:	b510      	push	{r4, lr}

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8002c70:	6803      	ldr	r3, [r0, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8002c72:	6f44      	ldr	r4, [r0, #116]	; 0x74
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8002c74:	6f81      	ldr	r1, [r0, #120]	; 0x78
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8002c76:	689a      	ldr	r2, [r3, #8]
 8002c78:	0612      	lsls	r2, r2, #24
 8002c7a:	d501      	bpl.n	8002c80 <UART_DMAError+0x14>
 8002c7c:	2c21      	cmp	r4, #33	; 0x21
 8002c7e:	d01b      	beq.n	8002cb8 <UART_DMAError+0x4c>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8002c80:	689a      	ldr	r2, [r3, #8]
 8002c82:	0652      	lsls	r2, r2, #25
 8002c84:	d501      	bpl.n	8002c8a <UART_DMAError+0x1e>
 8002c86:	2922      	cmp	r1, #34	; 0x22
 8002c88:	d006      	beq.n	8002c98 <UART_DMAError+0x2c>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002c8a:	2210      	movs	r2, #16
 8002c8c:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	67c3      	str	r3, [r0, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002c92:	f7ff ffe9 	bl	8002c68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002c96:	bd10      	pop	{r4, pc}
    huart->RxXferCount = 0U;
 8002c98:	2100      	movs	r1, #0
 8002c9a:	225a      	movs	r2, #90	; 0x5a
 8002c9c:	5281      	strh	r1, [r0, r2]
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	4c0a      	ldr	r4, [pc, #40]	; (8002ccc <UART_DMAError+0x60>)
 8002ca2:	4022      	ands	r2, r4
 8002ca4:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ca6:	689a      	ldr	r2, [r3, #8]
 8002ca8:	3423      	adds	r4, #35	; 0x23
 8002caa:	34ff      	adds	r4, #255	; 0xff
 8002cac:	43a2      	bics	r2, r4
 8002cae:	609a      	str	r2, [r3, #8]
  huart->RxState = HAL_UART_STATE_READY;
 8002cb0:	2320      	movs	r3, #32
  huart->RxISR = NULL;
 8002cb2:	6601      	str	r1, [r0, #96]	; 0x60
  huart->RxState = HAL_UART_STATE_READY;
 8002cb4:	6783      	str	r3, [r0, #120]	; 0x78
 8002cb6:	e7e8      	b.n	8002c8a <UART_DMAError+0x1e>
    huart->TxXferCount = 0U;
 8002cb8:	2252      	movs	r2, #82	; 0x52
 8002cba:	2400      	movs	r4, #0
 8002cbc:	5284      	strh	r4, [r0, r2]
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	34c0      	adds	r4, #192	; 0xc0
 8002cc2:	43a2      	bics	r2, r4
 8002cc4:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8002cc6:	2220      	movs	r2, #32
 8002cc8:	6742      	str	r2, [r0, #116]	; 0x74
 8002cca:	e7d9      	b.n	8002c80 <UART_DMAError+0x14>
 8002ccc:	fffffedf 	.word	0xfffffedf

08002cd0 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002cd0:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8002cd2:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002cd4:	07da      	lsls	r2, r3, #31
 8002cd6:	d506      	bpl.n	8002ce6 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002cd8:	6801      	ldr	r1, [r0, #0]
 8002cda:	4c28      	ldr	r4, [pc, #160]	; (8002d7c <UART_AdvFeatureConfig+0xac>)
 8002cdc:	684a      	ldr	r2, [r1, #4]
 8002cde:	4022      	ands	r2, r4
 8002ce0:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8002ce2:	4322      	orrs	r2, r4
 8002ce4:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002ce6:	079a      	lsls	r2, r3, #30
 8002ce8:	d506      	bpl.n	8002cf8 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002cea:	6801      	ldr	r1, [r0, #0]
 8002cec:	4c24      	ldr	r4, [pc, #144]	; (8002d80 <UART_AdvFeatureConfig+0xb0>)
 8002cee:	684a      	ldr	r2, [r1, #4]
 8002cf0:	4022      	ands	r2, r4
 8002cf2:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8002cf4:	4322      	orrs	r2, r4
 8002cf6:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002cf8:	075a      	lsls	r2, r3, #29
 8002cfa:	d506      	bpl.n	8002d0a <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002cfc:	6801      	ldr	r1, [r0, #0]
 8002cfe:	4c21      	ldr	r4, [pc, #132]	; (8002d84 <UART_AdvFeatureConfig+0xb4>)
 8002d00:	684a      	ldr	r2, [r1, #4]
 8002d02:	4022      	ands	r2, r4
 8002d04:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8002d06:	4322      	orrs	r2, r4
 8002d08:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002d0a:	071a      	lsls	r2, r3, #28
 8002d0c:	d506      	bpl.n	8002d1c <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002d0e:	6801      	ldr	r1, [r0, #0]
 8002d10:	4c1d      	ldr	r4, [pc, #116]	; (8002d88 <UART_AdvFeatureConfig+0xb8>)
 8002d12:	684a      	ldr	r2, [r1, #4]
 8002d14:	4022      	ands	r2, r4
 8002d16:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8002d18:	4322      	orrs	r2, r4
 8002d1a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002d1c:	06da      	lsls	r2, r3, #27
 8002d1e:	d506      	bpl.n	8002d2e <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002d20:	6801      	ldr	r1, [r0, #0]
 8002d22:	4c1a      	ldr	r4, [pc, #104]	; (8002d8c <UART_AdvFeatureConfig+0xbc>)
 8002d24:	688a      	ldr	r2, [r1, #8]
 8002d26:	4022      	ands	r2, r4
 8002d28:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8002d2a:	4322      	orrs	r2, r4
 8002d2c:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002d2e:	069a      	lsls	r2, r3, #26
 8002d30:	d506      	bpl.n	8002d40 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002d32:	6801      	ldr	r1, [r0, #0]
 8002d34:	4c16      	ldr	r4, [pc, #88]	; (8002d90 <UART_AdvFeatureConfig+0xc0>)
 8002d36:	688a      	ldr	r2, [r1, #8]
 8002d38:	4022      	ands	r2, r4
 8002d3a:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8002d3c:	4322      	orrs	r2, r4
 8002d3e:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002d40:	065a      	lsls	r2, r3, #25
 8002d42:	d50a      	bpl.n	8002d5a <UART_AdvFeatureConfig+0x8a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002d44:	6801      	ldr	r1, [r0, #0]
 8002d46:	4d13      	ldr	r5, [pc, #76]	; (8002d94 <UART_AdvFeatureConfig+0xc4>)
 8002d48:	684a      	ldr	r2, [r1, #4]
 8002d4a:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8002d4c:	402a      	ands	r2, r5
 8002d4e:	4322      	orrs	r2, r4
 8002d50:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002d52:	2280      	movs	r2, #128	; 0x80
 8002d54:	0352      	lsls	r2, r2, #13
 8002d56:	4294      	cmp	r4, r2
 8002d58:	d009      	beq.n	8002d6e <UART_AdvFeatureConfig+0x9e>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002d5a:	061b      	lsls	r3, r3, #24
 8002d5c:	d506      	bpl.n	8002d6c <UART_AdvFeatureConfig+0x9c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002d5e:	6802      	ldr	r2, [r0, #0]
 8002d60:	490d      	ldr	r1, [pc, #52]	; (8002d98 <UART_AdvFeatureConfig+0xc8>)
 8002d62:	6853      	ldr	r3, [r2, #4]
 8002d64:	400b      	ands	r3, r1
 8002d66:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002d68:	430b      	orrs	r3, r1
 8002d6a:	6053      	str	r3, [r2, #4]
}
 8002d6c:	bd30      	pop	{r4, r5, pc}
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002d6e:	684a      	ldr	r2, [r1, #4]
 8002d70:	4c0a      	ldr	r4, [pc, #40]	; (8002d9c <UART_AdvFeatureConfig+0xcc>)
 8002d72:	4022      	ands	r2, r4
 8002d74:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8002d76:	4322      	orrs	r2, r4
 8002d78:	604a      	str	r2, [r1, #4]
 8002d7a:	e7ee      	b.n	8002d5a <UART_AdvFeatureConfig+0x8a>
 8002d7c:	fffdffff 	.word	0xfffdffff
 8002d80:	fffeffff 	.word	0xfffeffff
 8002d84:	fffbffff 	.word	0xfffbffff
 8002d88:	ffff7fff 	.word	0xffff7fff
 8002d8c:	ffffefff 	.word	0xffffefff
 8002d90:	ffffdfff 	.word	0xffffdfff
 8002d94:	ffefffff 	.word	0xffefffff
 8002d98:	fff7ffff 	.word	0xfff7ffff
 8002d9c:	ff9fffff 	.word	0xff9fffff

08002da0 <HAL_UART_Init>:
{
 8002da0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002da2:	46c6      	mov	lr, r8
 8002da4:	0004      	movs	r4, r0
 8002da6:	b500      	push	{lr}
  if (huart == NULL)
 8002da8:	2800      	cmp	r0, #0
 8002daa:	d035      	beq.n	8002e18 <HAL_UART_Init+0x78>
  if (huart->gState == HAL_UART_STATE_RESET)
 8002dac:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d02d      	beq.n	8002e0e <HAL_UART_Init+0x6e>
  huart->gState = HAL_UART_STATE_BUSY;
 8002db2:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8002db4:	2101      	movs	r1, #1
  huart->gState = HAL_UART_STATE_BUSY;
 8002db6:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8002db8:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002dba:	6925      	ldr	r5, [r4, #16]
  __HAL_UART_DISABLE(huart);
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	438a      	bics	r2, r1
 8002dc0:	601a      	str	r2, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002dc2:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002dc4:	6818      	ldr	r0, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002dc6:	432a      	orrs	r2, r5
 8002dc8:	6965      	ldr	r5, [r4, #20]
 8002dca:	69e1      	ldr	r1, [r4, #28]
 8002dcc:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002dce:	4dac      	ldr	r5, [pc, #688]	; (8003080 <HAL_UART_Init+0x2e0>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002dd0:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002dd2:	4028      	ands	r0, r5
 8002dd4:	4302      	orrs	r2, r0
 8002dd6:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002dd8:	685a      	ldr	r2, [r3, #4]
 8002dda:	48aa      	ldr	r0, [pc, #680]	; (8003084 <HAL_UART_Init+0x2e4>)
 8002ddc:	4002      	ands	r2, r0
 8002dde:	68e0      	ldr	r0, [r4, #12]
 8002de0:	4302      	orrs	r2, r0
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002de2:	48a9      	ldr	r0, [pc, #676]	; (8003088 <HAL_UART_Init+0x2e8>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002de4:	605a      	str	r2, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002de6:	69a2      	ldr	r2, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002de8:	4283      	cmp	r3, r0
 8002dea:	d017      	beq.n	8002e1c <HAL_UART_Init+0x7c>
    tmpreg |= huart->Init.OneBitSampling;
 8002dec:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002dee:	6898      	ldr	r0, [r3, #8]
    tmpreg |= huart->Init.OneBitSampling;
 8002df0:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002df2:	4da6      	ldr	r5, [pc, #664]	; (800308c <HAL_UART_Init+0x2ec>)
 8002df4:	4028      	ands	r0, r5
 8002df6:	4302      	orrs	r2, r0
 8002df8:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002dfa:	4aa5      	ldr	r2, [pc, #660]	; (8003090 <HAL_UART_Init+0x2f0>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d028      	beq.n	8002e52 <HAL_UART_Init+0xb2>
  huart->RxISR = NULL;
 8002e00:	2300      	movs	r3, #0
    return HAL_ERROR;
 8002e02:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 8002e04:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8002e06:	6663      	str	r3, [r4, #100]	; 0x64
}
 8002e08:	bc04      	pop	{r2}
 8002e0a:	4690      	mov	r8, r2
 8002e0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    huart->Lock = HAL_UNLOCKED;
 8002e0e:	2270      	movs	r2, #112	; 0x70
 8002e10:	5483      	strb	r3, [r0, r2]
    HAL_UART_MspInit(huart);
 8002e12:	f7fe f805 	bl	8000e20 <HAL_UART_MspInit>
 8002e16:	e7cc      	b.n	8002db2 <HAL_UART_Init+0x12>
    return HAL_ERROR;
 8002e18:	2001      	movs	r0, #1
 8002e1a:	e7f5      	b.n	8002e08 <HAL_UART_Init+0x68>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002e1c:	6899      	ldr	r1, [r3, #8]
 8002e1e:	489b      	ldr	r0, [pc, #620]	; (800308c <HAL_UART_Init+0x2ec>)
 8002e20:	4001      	ands	r1, r0
 8002e22:	430a      	orrs	r2, r1
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e24:	21c0      	movs	r1, #192	; 0xc0
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002e26:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e28:	2280      	movs	r2, #128	; 0x80
 8002e2a:	489a      	ldr	r0, [pc, #616]	; (8003094 <HAL_UART_Init+0x2f4>)
 8002e2c:	0109      	lsls	r1, r1, #4
 8002e2e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8002e30:	00d2      	lsls	r2, r2, #3
 8002e32:	400b      	ands	r3, r1
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d100      	bne.n	8002e3a <HAL_UART_Init+0x9a>
 8002e38:	e0cf      	b.n	8002fda <HAL_UART_Init+0x23a>
 8002e3a:	d800      	bhi.n	8002e3e <HAL_UART_Init+0x9e>
 8002e3c:	e09e      	b.n	8002f7c <HAL_UART_Init+0x1dc>
 8002e3e:	2280      	movs	r2, #128	; 0x80
 8002e40:	0112      	lsls	r2, r2, #4
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d100      	bne.n	8002e48 <HAL_UART_Init+0xa8>
 8002e46:	e10d      	b.n	8003064 <HAL_UART_Init+0x2c4>
 8002e48:	428b      	cmp	r3, r1
 8002e4a:	d1d9      	bne.n	8002e00 <HAL_UART_Init+0x60>
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8002e4c:	2080      	movs	r0, #128	; 0x80
 8002e4e:	0200      	lsls	r0, r0, #8
 8002e50:	e09b      	b.n	8002f8a <HAL_UART_Init+0x1ea>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e52:	4b90      	ldr	r3, [pc, #576]	; (8003094 <HAL_UART_Init+0x2f4>)
 8002e54:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002e56:	230c      	movs	r3, #12
 8002e58:	4013      	ands	r3, r2
 8002e5a:	4a8f      	ldr	r2, [pc, #572]	; (8003098 <HAL_UART_Init+0x2f8>)
 8002e5c:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e5e:	2280      	movs	r2, #128	; 0x80
 8002e60:	0212      	lsls	r2, r2, #8
 8002e62:	4291      	cmp	r1, r2
 8002e64:	d100      	bne.n	8002e68 <HAL_UART_Init+0xc8>
 8002e66:	e0b1      	b.n	8002fcc <HAL_UART_Init+0x22c>
    switch (clocksource)
 8002e68:	2b08      	cmp	r3, #8
 8002e6a:	d8c9      	bhi.n	8002e00 <HAL_UART_Init+0x60>
 8002e6c:	4a8b      	ldr	r2, [pc, #556]	; (800309c <HAL_UART_Init+0x2fc>)
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	58d3      	ldr	r3, [r2, r3]
 8002e72:	469f      	mov	pc, r3
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002e74:	f7ff fd74 	bl	8002960 <HAL_RCC_GetPCLK2Freq>
 8002e78:	6863      	ldr	r3, [r4, #4]
 8002e7a:	085b      	lsrs	r3, r3, #1
 8002e7c:	1818      	adds	r0, r3, r0
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002e7e:	6861      	ldr	r1, [r4, #4]
 8002e80:	f7fd f942 	bl	8000108 <__udivsi3>
 8002e84:	0400      	lsls	r0, r0, #16
 8002e86:	0c00      	lsrs	r0, r0, #16
 8002e88:	0003      	movs	r3, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e8a:	4a85      	ldr	r2, [pc, #532]	; (80030a0 <HAL_UART_Init+0x300>)
 8002e8c:	3b10      	subs	r3, #16
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d8b6      	bhi.n	8002e00 <HAL_UART_Init+0x60>
      huart->Instance->BRR = usartdiv;
 8002e92:	6823      	ldr	r3, [r4, #0]
 8002e94:	60d8      	str	r0, [r3, #12]
  huart->RxISR = NULL;
 8002e96:	2300      	movs	r3, #0
 8002e98:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8002e9a:	6663      	str	r3, [r4, #100]	; 0x64
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002e9c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d15a      	bne.n	8002f58 <HAL_UART_Init+0x1b8>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ea2:	6823      	ldr	r3, [r4, #0]
 8002ea4:	497f      	ldr	r1, [pc, #508]	; (80030a4 <HAL_UART_Init+0x304>)
 8002ea6:	685a      	ldr	r2, [r3, #4]
 8002ea8:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002eaa:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002eac:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002eae:	689a      	ldr	r2, [r3, #8]
 8002eb0:	438a      	bics	r2, r1
 8002eb2:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	3929      	subs	r1, #41	; 0x29
 8002eb8:	430a      	orrs	r2, r1
 8002eba:	601a      	str	r2, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	67e3      	str	r3, [r4, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8002ec0:	f7fe f8de 	bl	8001080 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002ec4:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8002ec6:	0006      	movs	r6, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	0712      	lsls	r2, r2, #28
 8002ecc:	d427      	bmi.n	8002f1e <HAL_UART_Init+0x17e>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	0752      	lsls	r2, r2, #29
 8002ed2:	d445      	bmi.n	8002f60 <HAL_UART_Init+0x1c0>
  huart->gState = HAL_UART_STATE_READY;
 8002ed4:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8002ed6:	2200      	movs	r2, #0
  huart->gState = HAL_UART_STATE_READY;
 8002ed8:	6763      	str	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8002eda:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8002edc:	3350      	adds	r3, #80	; 0x50
 8002ede:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 8002ee0:	2000      	movs	r0, #0
 8002ee2:	e791      	b.n	8002e08 <HAL_UART_Init+0x68>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002ee4:	4b6b      	ldr	r3, [pc, #428]	; (8003094 <HAL_UART_Init+0x2f4>)
 8002ee6:	6861      	ldr	r1, [r4, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	0848      	lsrs	r0, r1, #1
 8002eec:	06db      	lsls	r3, r3, #27
 8002eee:	d577      	bpl.n	8002fe0 <HAL_UART_Init+0x240>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8002ef0:	4b6d      	ldr	r3, [pc, #436]	; (80030a8 <HAL_UART_Init+0x308>)
 8002ef2:	469c      	mov	ip, r3
 8002ef4:	4460      	add	r0, ip
 8002ef6:	e7c3      	b.n	8002e80 <HAL_UART_Init+0xe0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002ef8:	6863      	ldr	r3, [r4, #4]
 8002efa:	0858      	lsrs	r0, r3, #1
 8002efc:	2380      	movs	r3, #128	; 0x80
 8002efe:	021b      	lsls	r3, r3, #8
 8002f00:	469c      	mov	ip, r3
 8002f02:	4460      	add	r0, ip
 8002f04:	e7bb      	b.n	8002e7e <HAL_UART_Init+0xde>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002f06:	f7ff fcc7 	bl	8002898 <HAL_RCC_GetSysClockFreq>
 8002f0a:	6863      	ldr	r3, [r4, #4]
 8002f0c:	085b      	lsrs	r3, r3, #1
 8002f0e:	1818      	adds	r0, r3, r0
 8002f10:	e7b5      	b.n	8002e7e <HAL_UART_Init+0xde>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002f12:	f7ff fd15 	bl	8002940 <HAL_RCC_GetPCLK1Freq>
 8002f16:	6863      	ldr	r3, [r4, #4]
 8002f18:	085b      	lsrs	r3, r3, #1
 8002f1a:	1818      	adds	r0, r3, r0
 8002f1c:	e7af      	b.n	8002e7e <HAL_UART_Init+0xde>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f1e:	4a63      	ldr	r2, [pc, #396]	; (80030ac <HAL_UART_Init+0x30c>)
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f20:	2780      	movs	r7, #128	; 0x80
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f22:	4690      	mov	r8, r2
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f24:	03bf      	lsls	r7, r7, #14
 8002f26:	69dd      	ldr	r5, [r3, #28]
 8002f28:	403d      	ands	r5, r7
 8002f2a:	d1d0      	bne.n	8002ece <HAL_UART_Init+0x12e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f2c:	f7fe f8a8 	bl	8001080 <HAL_GetTick>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f30:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f32:	1b80      	subs	r0, r0, r6
 8002f34:	4540      	cmp	r0, r8
 8002f36:	d9f6      	bls.n	8002f26 <HAL_UART_Init+0x186>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	495d      	ldr	r1, [pc, #372]	; (80030b0 <HAL_UART_Init+0x310>)
      return HAL_TIMEOUT;
 8002f3c:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f3e:	400a      	ands	r2, r1
 8002f40:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f42:	689a      	ldr	r2, [r3, #8]
 8002f44:	31a3      	adds	r1, #163	; 0xa3
 8002f46:	31ff      	adds	r1, #255	; 0xff
 8002f48:	438a      	bics	r2, r1
 8002f4a:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8002f4c:	2320      	movs	r3, #32
 8002f4e:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8002f50:	67a3      	str	r3, [r4, #120]	; 0x78
        __HAL_UNLOCK(huart);
 8002f52:	3350      	adds	r3, #80	; 0x50
 8002f54:	54e5      	strb	r5, [r4, r3]
 8002f56:	e757      	b.n	8002e08 <HAL_UART_Init+0x68>
    UART_AdvFeatureConfig(huart);
 8002f58:	0020      	movs	r0, r4
 8002f5a:	f7ff feb9 	bl	8002cd0 <UART_AdvFeatureConfig>
 8002f5e:	e7a0      	b.n	8002ea2 <HAL_UART_Init+0x102>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f60:	4a52      	ldr	r2, [pc, #328]	; (80030ac <HAL_UART_Init+0x30c>)
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f62:	2780      	movs	r7, #128	; 0x80
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f64:	4690      	mov	r8, r2
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f66:	03ff      	lsls	r7, r7, #15
 8002f68:	69dd      	ldr	r5, [r3, #28]
 8002f6a:	403d      	ands	r5, r7
 8002f6c:	d1b2      	bne.n	8002ed4 <HAL_UART_Init+0x134>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f6e:	f7fe f887 	bl	8001080 <HAL_GetTick>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f72:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f74:	1b80      	subs	r0, r0, r6
 8002f76:	4540      	cmp	r0, r8
 8002f78:	d9f6      	bls.n	8002f68 <HAL_UART_Init+0x1c8>
 8002f7a:	e7dd      	b.n	8002f38 <HAL_UART_Init+0x198>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d000      	beq.n	8002f82 <HAL_UART_Init+0x1e2>
 8002f80:	e73e      	b.n	8002e00 <HAL_UART_Init+0x60>
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8002f82:	f7ff fcdd 	bl	8002940 <HAL_RCC_GetPCLK1Freq>
    if (lpuart_ker_ck_pres != 0U)
 8002f86:	2800      	cmp	r0, #0
 8002f88:	d075      	beq.n	8003076 <HAL_UART_Init+0x2d6>
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002f8a:	6863      	ldr	r3, [r4, #4]
 8002f8c:	005a      	lsls	r2, r3, #1
 8002f8e:	18d2      	adds	r2, r2, r3
 8002f90:	4282      	cmp	r2, r0
 8002f92:	d900      	bls.n	8002f96 <HAL_UART_Init+0x1f6>
 8002f94:	e734      	b.n	8002e00 <HAL_UART_Init+0x60>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002f96:	031a      	lsls	r2, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002f98:	4290      	cmp	r0, r2
 8002f9a:	d900      	bls.n	8002f9e <HAL_UART_Init+0x1fe>
 8002f9c:	e730      	b.n	8002e00 <HAL_UART_Init+0x60>
        usartdiv = (uint32_t)(UART_DIV_LPUART(lpuart_ker_ck_pres, huart->Init.BaudRate));
 8002f9e:	2700      	movs	r7, #0
 8002fa0:	0e02      	lsrs	r2, r0, #24
 8002fa2:	0201      	lsls	r1, r0, #8
 8002fa4:	085e      	lsrs	r6, r3, #1
 8002fa6:	1989      	adds	r1, r1, r6
 8002fa8:	417a      	adcs	r2, r7
 8002faa:	0008      	movs	r0, r1
 8002fac:	0011      	movs	r1, r2
 8002fae:	001a      	movs	r2, r3
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	f7fd f935 	bl	8000220 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002fb6:	4b3f      	ldr	r3, [pc, #252]	; (80030b4 <HAL_UART_Init+0x314>)
 8002fb8:	18c2      	adds	r2, r0, r3
 8002fba:	4b3f      	ldr	r3, [pc, #252]	; (80030b8 <HAL_UART_Init+0x318>)
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d900      	bls.n	8002fc2 <HAL_UART_Init+0x222>
 8002fc0:	e71e      	b.n	8002e00 <HAL_UART_Init+0x60>
          huart->Instance->BRR = usartdiv;
 8002fc2:	6823      	ldr	r3, [r4, #0]
 8002fc4:	60d8      	str	r0, [r3, #12]
  huart->RxISR = NULL;
 8002fc6:	6627      	str	r7, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8002fc8:	6667      	str	r7, [r4, #100]	; 0x64
 8002fca:	e767      	b.n	8002e9c <HAL_UART_Init+0xfc>
    switch (clocksource)
 8002fcc:	2b08      	cmp	r3, #8
 8002fce:	d900      	bls.n	8002fd2 <HAL_UART_Init+0x232>
 8002fd0:	e716      	b.n	8002e00 <HAL_UART_Init+0x60>
 8002fd2:	4a3a      	ldr	r2, [pc, #232]	; (80030bc <HAL_UART_Init+0x31c>)
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	58d3      	ldr	r3, [r2, r3]
 8002fd8:	469f      	mov	pc, r3
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8002fda:	f7ff fc5d 	bl	8002898 <HAL_RCC_GetSysClockFreq>
 8002fde:	e7d2      	b.n	8002f86 <HAL_UART_Init+0x1e6>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002fe0:	4b37      	ldr	r3, [pc, #220]	; (80030c0 <HAL_UART_Init+0x320>)
 8002fe2:	469c      	mov	ip, r3
 8002fe4:	4460      	add	r0, ip
 8002fe6:	e74b      	b.n	8002e80 <HAL_UART_Init+0xe0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002fe8:	f7ff fcba 	bl	8002960 <HAL_RCC_GetPCLK2Freq>
 8002fec:	6863      	ldr	r3, [r4, #4]
 8002fee:	0040      	lsls	r0, r0, #1
 8002ff0:	085b      	lsrs	r3, r3, #1
 8002ff2:	18c0      	adds	r0, r0, r3
 8002ff4:	6861      	ldr	r1, [r4, #4]
 8002ff6:	f7fd f887 	bl	8000108 <__udivsi3>
 8002ffa:	0400      	lsls	r0, r0, #16
 8002ffc:	0c00      	lsrs	r0, r0, #16
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ffe:	0003      	movs	r3, r0
 8003000:	4a27      	ldr	r2, [pc, #156]	; (80030a0 <HAL_UART_Init+0x300>)
 8003002:	3b10      	subs	r3, #16
 8003004:	4293      	cmp	r3, r2
 8003006:	d900      	bls.n	800300a <HAL_UART_Init+0x26a>
 8003008:	e6fa      	b.n	8002e00 <HAL_UART_Init+0x60>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800300a:	230f      	movs	r3, #15
 800300c:	0002      	movs	r2, r0
 800300e:	439a      	bics	r2, r3
 8003010:	0013      	movs	r3, r2
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003012:	0700      	lsls	r0, r0, #28
 8003014:	0f40      	lsrs	r0, r0, #29
      huart->Instance->BRR = brrtemp;
 8003016:	4318      	orrs	r0, r3
  huart->RxISR = NULL;
 8003018:	2300      	movs	r3, #0
      huart->Instance->BRR = brrtemp;
 800301a:	6822      	ldr	r2, [r4, #0]
 800301c:	60d0      	str	r0, [r2, #12]
  huart->RxISR = NULL;
 800301e:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8003020:	6663      	str	r3, [r4, #100]	; 0x64
 8003022:	e73b      	b.n	8002e9c <HAL_UART_Init+0xfc>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003024:	6863      	ldr	r3, [r4, #4]
 8003026:	6861      	ldr	r1, [r4, #4]
 8003028:	0858      	lsrs	r0, r3, #1
 800302a:	2380      	movs	r3, #128	; 0x80
 800302c:	025b      	lsls	r3, r3, #9
 800302e:	469c      	mov	ip, r3
 8003030:	4460      	add	r0, ip
 8003032:	f7fd f869 	bl	8000108 <__udivsi3>
 8003036:	0400      	lsls	r0, r0, #16
 8003038:	0c00      	lsrs	r0, r0, #16
 800303a:	e7e0      	b.n	8002ffe <HAL_UART_Init+0x25e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800303c:	f7ff fc2c 	bl	8002898 <HAL_RCC_GetSysClockFreq>
 8003040:	e7d4      	b.n	8002fec <HAL_UART_Init+0x24c>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003042:	4b14      	ldr	r3, [pc, #80]	; (8003094 <HAL_UART_Init+0x2f4>)
 8003044:	6861      	ldr	r1, [r4, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	0848      	lsrs	r0, r1, #1
 800304a:	06db      	lsls	r3, r3, #27
 800304c:	d516      	bpl.n	800307c <HAL_UART_Init+0x2dc>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 800304e:	4b1d      	ldr	r3, [pc, #116]	; (80030c4 <HAL_UART_Init+0x324>)
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003050:	469c      	mov	ip, r3
 8003052:	4460      	add	r0, ip
 8003054:	f7fd f858 	bl	8000108 <__udivsi3>
 8003058:	0400      	lsls	r0, r0, #16
 800305a:	0c00      	lsrs	r0, r0, #16
 800305c:	e7cf      	b.n	8002ffe <HAL_UART_Init+0x25e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800305e:	f7ff fc6f 	bl	8002940 <HAL_RCC_GetPCLK1Freq>
 8003062:	e7c3      	b.n	8002fec <HAL_UART_Init+0x24c>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003064:	6800      	ldr	r0, [r0, #0]
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8003066:	4b18      	ldr	r3, [pc, #96]	; (80030c8 <HAL_UART_Init+0x328>)
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003068:	06c0      	lsls	r0, r0, #27
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 800306a:	17c0      	asrs	r0, r0, #31
 800306c:	4018      	ands	r0, r3
 800306e:	4b14      	ldr	r3, [pc, #80]	; (80030c0 <HAL_UART_Init+0x320>)
 8003070:	469c      	mov	ip, r3
 8003072:	4460      	add	r0, ip
 8003074:	e789      	b.n	8002f8a <HAL_UART_Init+0x1ea>
  huart->RxISR = NULL;
 8003076:	6620      	str	r0, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8003078:	6660      	str	r0, [r4, #100]	; 0x64
 800307a:	e70f      	b.n	8002e9c <HAL_UART_Init+0xfc>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800307c:	4b13      	ldr	r3, [pc, #76]	; (80030cc <HAL_UART_Init+0x32c>)
 800307e:	e7e7      	b.n	8003050 <HAL_UART_Init+0x2b0>
 8003080:	efff69f3 	.word	0xefff69f3
 8003084:	ffffcfff 	.word	0xffffcfff
 8003088:	40004800 	.word	0x40004800
 800308c:	fffff4ff 	.word	0xfffff4ff
 8003090:	40004400 	.word	0x40004400
 8003094:	40021000 	.word	0x40021000
 8003098:	0800352c 	.word	0x0800352c
 800309c:	0800349c 	.word	0x0800349c
 80030a0:	0000ffef 	.word	0x0000ffef
 80030a4:	ffffb7ff 	.word	0xffffb7ff
 80030a8:	003d0900 	.word	0x003d0900
 80030ac:	01ffffff 	.word	0x01ffffff
 80030b0:	fffffe5f 	.word	0xfffffe5f
 80030b4:	fffffd00 	.word	0xfffffd00
 80030b8:	000ffcff 	.word	0x000ffcff
 80030bc:	080034c0 	.word	0x080034c0
 80030c0:	00f42400 	.word	0x00f42400
 80030c4:	007a1200 	.word	0x007a1200
 80030c8:	ff48e500 	.word	0xff48e500
 80030cc:	01e84800 	.word	0x01e84800

080030d0 <HAL_HalfDuplex_Init>:
{
 80030d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030d2:	46c6      	mov	lr, r8
 80030d4:	0004      	movs	r4, r0
 80030d6:	b500      	push	{lr}
  if (huart == NULL)
 80030d8:	2800      	cmp	r0, #0
 80030da:	d035      	beq.n	8003148 <HAL_HalfDuplex_Init+0x78>
  if (huart->gState == HAL_UART_STATE_RESET)
 80030dc:	6f43      	ldr	r3, [r0, #116]	; 0x74
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d02d      	beq.n	800313e <HAL_HalfDuplex_Init+0x6e>
  huart->gState = HAL_UART_STATE_BUSY;
 80030e2:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80030e4:	2101      	movs	r1, #1
  huart->gState = HAL_UART_STATE_BUSY;
 80030e6:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 80030e8:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80030ea:	6925      	ldr	r5, [r4, #16]
  __HAL_UART_DISABLE(huart);
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	438a      	bics	r2, r1
 80030f0:	601a      	str	r2, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80030f2:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80030f4:	6818      	ldr	r0, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80030f6:	432a      	orrs	r2, r5
 80030f8:	6965      	ldr	r5, [r4, #20]
 80030fa:	69e1      	ldr	r1, [r4, #28]
 80030fc:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80030fe:	4dae      	ldr	r5, [pc, #696]	; (80033b8 <HAL_HalfDuplex_Init+0x2e8>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003100:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003102:	4028      	ands	r0, r5
 8003104:	4302      	orrs	r2, r0
 8003106:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003108:	685a      	ldr	r2, [r3, #4]
 800310a:	48ac      	ldr	r0, [pc, #688]	; (80033bc <HAL_HalfDuplex_Init+0x2ec>)
 800310c:	4002      	ands	r2, r0
 800310e:	68e0      	ldr	r0, [r4, #12]
 8003110:	4302      	orrs	r2, r0
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003112:	48ab      	ldr	r0, [pc, #684]	; (80033c0 <HAL_HalfDuplex_Init+0x2f0>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003114:	605a      	str	r2, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003116:	69a2      	ldr	r2, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003118:	4283      	cmp	r3, r0
 800311a:	d017      	beq.n	800314c <HAL_HalfDuplex_Init+0x7c>
    tmpreg |= huart->Init.OneBitSampling;
 800311c:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800311e:	6898      	ldr	r0, [r3, #8]
    tmpreg |= huart->Init.OneBitSampling;
 8003120:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003122:	4da8      	ldr	r5, [pc, #672]	; (80033c4 <HAL_HalfDuplex_Init+0x2f4>)
 8003124:	4028      	ands	r0, r5
 8003126:	4302      	orrs	r2, r0
 8003128:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800312a:	4aa7      	ldr	r2, [pc, #668]	; (80033c8 <HAL_HalfDuplex_Init+0x2f8>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d028      	beq.n	8003182 <HAL_HalfDuplex_Init+0xb2>
  huart->RxISR = NULL;
 8003130:	2300      	movs	r3, #0
    return HAL_ERROR;
 8003132:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 8003134:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8003136:	6663      	str	r3, [r4, #100]	; 0x64
}
 8003138:	bc04      	pop	{r2}
 800313a:	4690      	mov	r8, r2
 800313c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    huart->Lock = HAL_UNLOCKED;
 800313e:	2270      	movs	r2, #112	; 0x70
 8003140:	5483      	strb	r3, [r0, r2]
    HAL_UART_MspInit(huart);
 8003142:	f7fd fe6d 	bl	8000e20 <HAL_UART_MspInit>
 8003146:	e7cc      	b.n	80030e2 <HAL_HalfDuplex_Init+0x12>
    return HAL_ERROR;
 8003148:	2001      	movs	r0, #1
 800314a:	e7f5      	b.n	8003138 <HAL_HalfDuplex_Init+0x68>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800314c:	6899      	ldr	r1, [r3, #8]
 800314e:	489d      	ldr	r0, [pc, #628]	; (80033c4 <HAL_HalfDuplex_Init+0x2f4>)
 8003150:	4001      	ands	r1, r0
 8003152:	430a      	orrs	r2, r1
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003154:	21c0      	movs	r1, #192	; 0xc0
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003156:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003158:	2280      	movs	r2, #128	; 0x80
 800315a:	489c      	ldr	r0, [pc, #624]	; (80033cc <HAL_HalfDuplex_Init+0x2fc>)
 800315c:	0109      	lsls	r1, r1, #4
 800315e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8003160:	00d2      	lsls	r2, r2, #3
 8003162:	400b      	ands	r3, r1
 8003164:	4293      	cmp	r3, r2
 8003166:	d100      	bne.n	800316a <HAL_HalfDuplex_Init+0x9a>
 8003168:	e0d3      	b.n	8003312 <HAL_HalfDuplex_Init+0x242>
 800316a:	d800      	bhi.n	800316e <HAL_HalfDuplex_Init+0x9e>
 800316c:	e0a2      	b.n	80032b4 <HAL_HalfDuplex_Init+0x1e4>
 800316e:	2280      	movs	r2, #128	; 0x80
 8003170:	0112      	lsls	r2, r2, #4
 8003172:	4293      	cmp	r3, r2
 8003174:	d100      	bne.n	8003178 <HAL_HalfDuplex_Init+0xa8>
 8003176:	e111      	b.n	800339c <HAL_HalfDuplex_Init+0x2cc>
 8003178:	428b      	cmp	r3, r1
 800317a:	d1d9      	bne.n	8003130 <HAL_HalfDuplex_Init+0x60>
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 800317c:	2080      	movs	r0, #128	; 0x80
 800317e:	0200      	lsls	r0, r0, #8
 8003180:	e09f      	b.n	80032c2 <HAL_HalfDuplex_Init+0x1f2>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003182:	4b92      	ldr	r3, [pc, #584]	; (80033cc <HAL_HalfDuplex_Init+0x2fc>)
 8003184:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003186:	230c      	movs	r3, #12
 8003188:	4013      	ands	r3, r2
 800318a:	4a91      	ldr	r2, [pc, #580]	; (80033d0 <HAL_HalfDuplex_Init+0x300>)
 800318c:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800318e:	2280      	movs	r2, #128	; 0x80
 8003190:	0212      	lsls	r2, r2, #8
 8003192:	4291      	cmp	r1, r2
 8003194:	d100      	bne.n	8003198 <HAL_HalfDuplex_Init+0xc8>
 8003196:	e0b5      	b.n	8003304 <HAL_HalfDuplex_Init+0x234>
    switch (clocksource)
 8003198:	2b08      	cmp	r3, #8
 800319a:	d8c9      	bhi.n	8003130 <HAL_HalfDuplex_Init+0x60>
 800319c:	4a8d      	ldr	r2, [pc, #564]	; (80033d4 <HAL_HalfDuplex_Init+0x304>)
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	58d3      	ldr	r3, [r2, r3]
 80031a2:	469f      	mov	pc, r3
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80031a4:	f7ff fbdc 	bl	8002960 <HAL_RCC_GetPCLK2Freq>
 80031a8:	6863      	ldr	r3, [r4, #4]
 80031aa:	085b      	lsrs	r3, r3, #1
 80031ac:	1818      	adds	r0, r3, r0
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80031ae:	6861      	ldr	r1, [r4, #4]
 80031b0:	f7fc ffaa 	bl	8000108 <__udivsi3>
 80031b4:	0400      	lsls	r0, r0, #16
 80031b6:	0c00      	lsrs	r0, r0, #16
 80031b8:	0003      	movs	r3, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031ba:	4a87      	ldr	r2, [pc, #540]	; (80033d8 <HAL_HalfDuplex_Init+0x308>)
 80031bc:	3b10      	subs	r3, #16
 80031be:	4293      	cmp	r3, r2
 80031c0:	d8b6      	bhi.n	8003130 <HAL_HalfDuplex_Init+0x60>
      huart->Instance->BRR = usartdiv;
 80031c2:	6823      	ldr	r3, [r4, #0]
 80031c4:	60d8      	str	r0, [r3, #12]
  huart->RxISR = NULL;
 80031c6:	2300      	movs	r3, #0
 80031c8:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 80031ca:	6663      	str	r3, [r4, #100]	; 0x64
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80031cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d15e      	bne.n	8003290 <HAL_HalfDuplex_Init+0x1c0>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031d2:	6823      	ldr	r3, [r4, #0]
 80031d4:	4981      	ldr	r1, [pc, #516]	; (80033dc <HAL_HalfDuplex_Init+0x30c>)
 80031d6:	685a      	ldr	r2, [r3, #4]
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80031d8:	2508      	movs	r5, #8
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031da:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80031dc:	2122      	movs	r1, #34	; 0x22
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80031e0:	689a      	ldr	r2, [r3, #8]
 80031e2:	438a      	bics	r2, r1
 80031e4:	609a      	str	r2, [r3, #8]
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80031e6:	689a      	ldr	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80031e8:	3921      	subs	r1, #33	; 0x21
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80031ea:	432a      	orrs	r2, r5
 80031ec:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	430a      	orrs	r2, r1
 80031f2:	601a      	str	r2, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031f4:	2300      	movs	r3, #0
 80031f6:	67e3      	str	r3, [r4, #124]	; 0x7c
  tickstart = HAL_GetTick();
 80031f8:	f7fd ff42 	bl	8001080 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80031fc:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 80031fe:	0006      	movs	r6, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	4215      	tst	r5, r2
 8003204:	d127      	bne.n	8003256 <HAL_HalfDuplex_Init+0x186>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	0752      	lsls	r2, r2, #29
 800320a:	d445      	bmi.n	8003298 <HAL_HalfDuplex_Init+0x1c8>
  huart->gState = HAL_UART_STATE_READY;
 800320c:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 800320e:	2200      	movs	r2, #0
  huart->gState = HAL_UART_STATE_READY;
 8003210:	6763      	str	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003212:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8003214:	3350      	adds	r3, #80	; 0x50
 8003216:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 8003218:	2000      	movs	r0, #0
 800321a:	e78d      	b.n	8003138 <HAL_HalfDuplex_Init+0x68>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800321c:	4b6b      	ldr	r3, [pc, #428]	; (80033cc <HAL_HalfDuplex_Init+0x2fc>)
 800321e:	6861      	ldr	r1, [r4, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	0848      	lsrs	r0, r1, #1
 8003224:	06db      	lsls	r3, r3, #27
 8003226:	d577      	bpl.n	8003318 <HAL_HalfDuplex_Init+0x248>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8003228:	4b6d      	ldr	r3, [pc, #436]	; (80033e0 <HAL_HalfDuplex_Init+0x310>)
 800322a:	469c      	mov	ip, r3
 800322c:	4460      	add	r0, ip
 800322e:	e7bf      	b.n	80031b0 <HAL_HalfDuplex_Init+0xe0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003230:	6863      	ldr	r3, [r4, #4]
 8003232:	0858      	lsrs	r0, r3, #1
 8003234:	2380      	movs	r3, #128	; 0x80
 8003236:	021b      	lsls	r3, r3, #8
 8003238:	469c      	mov	ip, r3
 800323a:	4460      	add	r0, ip
 800323c:	e7b7      	b.n	80031ae <HAL_HalfDuplex_Init+0xde>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800323e:	f7ff fb2b 	bl	8002898 <HAL_RCC_GetSysClockFreq>
 8003242:	6863      	ldr	r3, [r4, #4]
 8003244:	085b      	lsrs	r3, r3, #1
 8003246:	1818      	adds	r0, r3, r0
 8003248:	e7b1      	b.n	80031ae <HAL_HalfDuplex_Init+0xde>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800324a:	f7ff fb79 	bl	8002940 <HAL_RCC_GetPCLK1Freq>
 800324e:	6863      	ldr	r3, [r4, #4]
 8003250:	085b      	lsrs	r3, r3, #1
 8003252:	1818      	adds	r0, r3, r0
 8003254:	e7ab      	b.n	80031ae <HAL_HalfDuplex_Init+0xde>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003256:	4a63      	ldr	r2, [pc, #396]	; (80033e4 <HAL_HalfDuplex_Init+0x314>)
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003258:	2780      	movs	r7, #128	; 0x80
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800325a:	4690      	mov	r8, r2
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800325c:	03bf      	lsls	r7, r7, #14
 800325e:	69dd      	ldr	r5, [r3, #28]
 8003260:	403d      	ands	r5, r7
 8003262:	d1d0      	bne.n	8003206 <HAL_HalfDuplex_Init+0x136>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003264:	f7fd ff0c 	bl	8001080 <HAL_GetTick>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003268:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800326a:	1b80      	subs	r0, r0, r6
 800326c:	4540      	cmp	r0, r8
 800326e:	d9f6      	bls.n	800325e <HAL_HalfDuplex_Init+0x18e>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	495d      	ldr	r1, [pc, #372]	; (80033e8 <HAL_HalfDuplex_Init+0x318>)
      return HAL_TIMEOUT;
 8003274:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003276:	400a      	ands	r2, r1
 8003278:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800327a:	689a      	ldr	r2, [r3, #8]
 800327c:	31a3      	adds	r1, #163	; 0xa3
 800327e:	31ff      	adds	r1, #255	; 0xff
 8003280:	438a      	bics	r2, r1
 8003282:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8003284:	2320      	movs	r3, #32
 8003286:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003288:	67a3      	str	r3, [r4, #120]	; 0x78
        __HAL_UNLOCK(huart);
 800328a:	3350      	adds	r3, #80	; 0x50
 800328c:	54e5      	strb	r5, [r4, r3]
 800328e:	e753      	b.n	8003138 <HAL_HalfDuplex_Init+0x68>
    UART_AdvFeatureConfig(huart);
 8003290:	0020      	movs	r0, r4
 8003292:	f7ff fd1d 	bl	8002cd0 <UART_AdvFeatureConfig>
 8003296:	e79c      	b.n	80031d2 <HAL_HalfDuplex_Init+0x102>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003298:	4a52      	ldr	r2, [pc, #328]	; (80033e4 <HAL_HalfDuplex_Init+0x314>)
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800329a:	2780      	movs	r7, #128	; 0x80
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800329c:	4690      	mov	r8, r2
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800329e:	03ff      	lsls	r7, r7, #15
 80032a0:	69dd      	ldr	r5, [r3, #28]
 80032a2:	403d      	ands	r5, r7
 80032a4:	d1b2      	bne.n	800320c <HAL_HalfDuplex_Init+0x13c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032a6:	f7fd feeb 	bl	8001080 <HAL_GetTick>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80032aa:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032ac:	1b80      	subs	r0, r0, r6
 80032ae:	4540      	cmp	r0, r8
 80032b0:	d9f6      	bls.n	80032a0 <HAL_HalfDuplex_Init+0x1d0>
 80032b2:	e7dd      	b.n	8003270 <HAL_HalfDuplex_Init+0x1a0>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d000      	beq.n	80032ba <HAL_HalfDuplex_Init+0x1ea>
 80032b8:	e73a      	b.n	8003130 <HAL_HalfDuplex_Init+0x60>
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 80032ba:	f7ff fb41 	bl	8002940 <HAL_RCC_GetPCLK1Freq>
    if (lpuart_ker_ck_pres != 0U)
 80032be:	2800      	cmp	r0, #0
 80032c0:	d075      	beq.n	80033ae <HAL_HalfDuplex_Init+0x2de>
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80032c2:	6863      	ldr	r3, [r4, #4]
 80032c4:	005a      	lsls	r2, r3, #1
 80032c6:	18d2      	adds	r2, r2, r3
 80032c8:	4282      	cmp	r2, r0
 80032ca:	d900      	bls.n	80032ce <HAL_HalfDuplex_Init+0x1fe>
 80032cc:	e730      	b.n	8003130 <HAL_HalfDuplex_Init+0x60>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80032ce:	031a      	lsls	r2, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80032d0:	4290      	cmp	r0, r2
 80032d2:	d900      	bls.n	80032d6 <HAL_HalfDuplex_Init+0x206>
 80032d4:	e72c      	b.n	8003130 <HAL_HalfDuplex_Init+0x60>
        usartdiv = (uint32_t)(UART_DIV_LPUART(lpuart_ker_ck_pres, huart->Init.BaudRate));
 80032d6:	2700      	movs	r7, #0
 80032d8:	0e02      	lsrs	r2, r0, #24
 80032da:	0201      	lsls	r1, r0, #8
 80032dc:	085e      	lsrs	r6, r3, #1
 80032de:	1989      	adds	r1, r1, r6
 80032e0:	417a      	adcs	r2, r7
 80032e2:	0008      	movs	r0, r1
 80032e4:	0011      	movs	r1, r2
 80032e6:	001a      	movs	r2, r3
 80032e8:	2300      	movs	r3, #0
 80032ea:	f7fc ff99 	bl	8000220 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80032ee:	4b3f      	ldr	r3, [pc, #252]	; (80033ec <HAL_HalfDuplex_Init+0x31c>)
 80032f0:	18c2      	adds	r2, r0, r3
 80032f2:	4b3f      	ldr	r3, [pc, #252]	; (80033f0 <HAL_HalfDuplex_Init+0x320>)
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d900      	bls.n	80032fa <HAL_HalfDuplex_Init+0x22a>
 80032f8:	e71a      	b.n	8003130 <HAL_HalfDuplex_Init+0x60>
          huart->Instance->BRR = usartdiv;
 80032fa:	6823      	ldr	r3, [r4, #0]
 80032fc:	60d8      	str	r0, [r3, #12]
  huart->RxISR = NULL;
 80032fe:	6627      	str	r7, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8003300:	6667      	str	r7, [r4, #100]	; 0x64
 8003302:	e763      	b.n	80031cc <HAL_HalfDuplex_Init+0xfc>
    switch (clocksource)
 8003304:	2b08      	cmp	r3, #8
 8003306:	d900      	bls.n	800330a <HAL_HalfDuplex_Init+0x23a>
 8003308:	e712      	b.n	8003130 <HAL_HalfDuplex_Init+0x60>
 800330a:	4a3a      	ldr	r2, [pc, #232]	; (80033f4 <HAL_HalfDuplex_Init+0x324>)
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	58d3      	ldr	r3, [r2, r3]
 8003310:	469f      	mov	pc, r3
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8003312:	f7ff fac1 	bl	8002898 <HAL_RCC_GetSysClockFreq>
 8003316:	e7d2      	b.n	80032be <HAL_HalfDuplex_Init+0x1ee>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003318:	4b37      	ldr	r3, [pc, #220]	; (80033f8 <HAL_HalfDuplex_Init+0x328>)
 800331a:	469c      	mov	ip, r3
 800331c:	4460      	add	r0, ip
 800331e:	e747      	b.n	80031b0 <HAL_HalfDuplex_Init+0xe0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003320:	f7ff fb1e 	bl	8002960 <HAL_RCC_GetPCLK2Freq>
 8003324:	6863      	ldr	r3, [r4, #4]
 8003326:	0040      	lsls	r0, r0, #1
 8003328:	085b      	lsrs	r3, r3, #1
 800332a:	18c0      	adds	r0, r0, r3
 800332c:	6861      	ldr	r1, [r4, #4]
 800332e:	f7fc feeb 	bl	8000108 <__udivsi3>
 8003332:	0400      	lsls	r0, r0, #16
 8003334:	0c00      	lsrs	r0, r0, #16
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003336:	0003      	movs	r3, r0
 8003338:	4a27      	ldr	r2, [pc, #156]	; (80033d8 <HAL_HalfDuplex_Init+0x308>)
 800333a:	3b10      	subs	r3, #16
 800333c:	4293      	cmp	r3, r2
 800333e:	d900      	bls.n	8003342 <HAL_HalfDuplex_Init+0x272>
 8003340:	e6f6      	b.n	8003130 <HAL_HalfDuplex_Init+0x60>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003342:	230f      	movs	r3, #15
 8003344:	0002      	movs	r2, r0
 8003346:	439a      	bics	r2, r3
 8003348:	0013      	movs	r3, r2
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800334a:	0700      	lsls	r0, r0, #28
 800334c:	0f40      	lsrs	r0, r0, #29
      huart->Instance->BRR = brrtemp;
 800334e:	4318      	orrs	r0, r3
  huart->RxISR = NULL;
 8003350:	2300      	movs	r3, #0
      huart->Instance->BRR = brrtemp;
 8003352:	6822      	ldr	r2, [r4, #0]
 8003354:	60d0      	str	r0, [r2, #12]
  huart->RxISR = NULL;
 8003356:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8003358:	6663      	str	r3, [r4, #100]	; 0x64
 800335a:	e737      	b.n	80031cc <HAL_HalfDuplex_Init+0xfc>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800335c:	6863      	ldr	r3, [r4, #4]
 800335e:	6861      	ldr	r1, [r4, #4]
 8003360:	0858      	lsrs	r0, r3, #1
 8003362:	2380      	movs	r3, #128	; 0x80
 8003364:	025b      	lsls	r3, r3, #9
 8003366:	469c      	mov	ip, r3
 8003368:	4460      	add	r0, ip
 800336a:	f7fc fecd 	bl	8000108 <__udivsi3>
 800336e:	0400      	lsls	r0, r0, #16
 8003370:	0c00      	lsrs	r0, r0, #16
 8003372:	e7e0      	b.n	8003336 <HAL_HalfDuplex_Init+0x266>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003374:	f7ff fa90 	bl	8002898 <HAL_RCC_GetSysClockFreq>
 8003378:	e7d4      	b.n	8003324 <HAL_HalfDuplex_Init+0x254>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800337a:	4b14      	ldr	r3, [pc, #80]	; (80033cc <HAL_HalfDuplex_Init+0x2fc>)
 800337c:	6861      	ldr	r1, [r4, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	0848      	lsrs	r0, r1, #1
 8003382:	06db      	lsls	r3, r3, #27
 8003384:	d516      	bpl.n	80033b4 <HAL_HalfDuplex_Init+0x2e4>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8003386:	4b1d      	ldr	r3, [pc, #116]	; (80033fc <HAL_HalfDuplex_Init+0x32c>)
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003388:	469c      	mov	ip, r3
 800338a:	4460      	add	r0, ip
 800338c:	f7fc febc 	bl	8000108 <__udivsi3>
 8003390:	0400      	lsls	r0, r0, #16
 8003392:	0c00      	lsrs	r0, r0, #16
 8003394:	e7cf      	b.n	8003336 <HAL_HalfDuplex_Init+0x266>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003396:	f7ff fad3 	bl	8002940 <HAL_RCC_GetPCLK1Freq>
 800339a:	e7c3      	b.n	8003324 <HAL_HalfDuplex_Init+0x254>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800339c:	6800      	ldr	r0, [r0, #0]
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 800339e:	4b18      	ldr	r3, [pc, #96]	; (8003400 <HAL_HalfDuplex_Init+0x330>)
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80033a0:	06c0      	lsls	r0, r0, #27
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 80033a2:	17c0      	asrs	r0, r0, #31
 80033a4:	4018      	ands	r0, r3
 80033a6:	4b14      	ldr	r3, [pc, #80]	; (80033f8 <HAL_HalfDuplex_Init+0x328>)
 80033a8:	469c      	mov	ip, r3
 80033aa:	4460      	add	r0, ip
 80033ac:	e789      	b.n	80032c2 <HAL_HalfDuplex_Init+0x1f2>
  huart->RxISR = NULL;
 80033ae:	6620      	str	r0, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 80033b0:	6660      	str	r0, [r4, #100]	; 0x64
 80033b2:	e70b      	b.n	80031cc <HAL_HalfDuplex_Init+0xfc>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80033b4:	4b13      	ldr	r3, [pc, #76]	; (8003404 <HAL_HalfDuplex_Init+0x334>)
 80033b6:	e7e7      	b.n	8003388 <HAL_HalfDuplex_Init+0x2b8>
 80033b8:	efff69f3 	.word	0xefff69f3
 80033bc:	ffffcfff 	.word	0xffffcfff
 80033c0:	40004800 	.word	0x40004800
 80033c4:	fffff4ff 	.word	0xfffff4ff
 80033c8:	40004400 	.word	0x40004400
 80033cc:	40021000 	.word	0x40021000
 80033d0:	0800352c 	.word	0x0800352c
 80033d4:	080034e4 	.word	0x080034e4
 80033d8:	0000ffef 	.word	0x0000ffef
 80033dc:	ffffb7ff 	.word	0xffffb7ff
 80033e0:	003d0900 	.word	0x003d0900
 80033e4:	01ffffff 	.word	0x01ffffff
 80033e8:	fffffe5f 	.word	0xfffffe5f
 80033ec:	fffffd00 	.word	0xfffffd00
 80033f0:	000ffcff 	.word	0x000ffcff
 80033f4:	08003508 	.word	0x08003508
 80033f8:	00f42400 	.word	0x00f42400
 80033fc:	007a1200 	.word	0x007a1200
 8003400:	ff48e500 	.word	0xff48e500
 8003404:	01e84800 	.word	0x01e84800

08003408 <__libc_init_array>:
 8003408:	b570      	push	{r4, r5, r6, lr}
 800340a:	2600      	movs	r6, #0
 800340c:	4d0c      	ldr	r5, [pc, #48]	; (8003440 <__libc_init_array+0x38>)
 800340e:	4c0d      	ldr	r4, [pc, #52]	; (8003444 <__libc_init_array+0x3c>)
 8003410:	1b64      	subs	r4, r4, r5
 8003412:	10a4      	asrs	r4, r4, #2
 8003414:	42a6      	cmp	r6, r4
 8003416:	d109      	bne.n	800342c <__libc_init_array+0x24>
 8003418:	2600      	movs	r6, #0
 800341a:	f000 f821 	bl	8003460 <_init>
 800341e:	4d0a      	ldr	r5, [pc, #40]	; (8003448 <__libc_init_array+0x40>)
 8003420:	4c0a      	ldr	r4, [pc, #40]	; (800344c <__libc_init_array+0x44>)
 8003422:	1b64      	subs	r4, r4, r5
 8003424:	10a4      	asrs	r4, r4, #2
 8003426:	42a6      	cmp	r6, r4
 8003428:	d105      	bne.n	8003436 <__libc_init_array+0x2e>
 800342a:	bd70      	pop	{r4, r5, r6, pc}
 800342c:	00b3      	lsls	r3, r6, #2
 800342e:	58eb      	ldr	r3, [r5, r3]
 8003430:	4798      	blx	r3
 8003432:	3601      	adds	r6, #1
 8003434:	e7ee      	b.n	8003414 <__libc_init_array+0xc>
 8003436:	00b3      	lsls	r3, r6, #2
 8003438:	58eb      	ldr	r3, [r5, r3]
 800343a:	4798      	blx	r3
 800343c:	3601      	adds	r6, #1
 800343e:	e7f2      	b.n	8003426 <__libc_init_array+0x1e>
 8003440:	08003544 	.word	0x08003544
 8003444:	08003544 	.word	0x08003544
 8003448:	08003544 	.word	0x08003544
 800344c:	08003548 	.word	0x08003548

08003450 <memset>:
 8003450:	0003      	movs	r3, r0
 8003452:	1812      	adds	r2, r2, r0
 8003454:	4293      	cmp	r3, r2
 8003456:	d100      	bne.n	800345a <memset+0xa>
 8003458:	4770      	bx	lr
 800345a:	7019      	strb	r1, [r3, #0]
 800345c:	3301      	adds	r3, #1
 800345e:	e7f9      	b.n	8003454 <memset+0x4>

08003460 <_init>:
 8003460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003462:	46c0      	nop			; (mov r8, r8)
 8003464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003466:	bc08      	pop	{r3}
 8003468:	469e      	mov	lr, r3
 800346a:	4770      	bx	lr

0800346c <_fini>:
 800346c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800346e:	46c0      	nop			; (mov r8, r8)
 8003470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003472:	bc08      	pop	{r3}
 8003474:	469e      	mov	lr, r3
 8003476:	4770      	bx	lr
