
BFTAG01_STM32L031F4_PVD_SENSOR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003344  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08003404  08003404  00013404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080034e0  080034e0  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080034e0  080034e0  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080034e0  080034e0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080034e0  080034e0  000134e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080034e4  080034e4  000134e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080034e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000104  20000010  080034f8  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000114  080034f8  00020114  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010bb8  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002bc6  00000000  00000000  00030bf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00006870  00000000  00000000  000337b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000009f0  00000000  00000000  0003a028  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000bb0  00000000  00000000  0003aa18  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00011e49  00000000  00000000  0003b5c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000be47  00000000  00000000  0004d411  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00064c0e  00000000  00000000  00059258  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000bde66  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001c58  00000000  00000000  000bdee4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080033ec 	.word	0x080033ec

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	080033ec 	.word	0x080033ec

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_fadd>:
 8000220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000222:	4647      	mov	r7, r8
 8000224:	46ce      	mov	lr, r9
 8000226:	0243      	lsls	r3, r0, #9
 8000228:	0a5b      	lsrs	r3, r3, #9
 800022a:	0044      	lsls	r4, r0, #1
 800022c:	0fc2      	lsrs	r2, r0, #31
 800022e:	469c      	mov	ip, r3
 8000230:	0048      	lsls	r0, r1, #1
 8000232:	00dd      	lsls	r5, r3, #3
 8000234:	024b      	lsls	r3, r1, #9
 8000236:	0e24      	lsrs	r4, r4, #24
 8000238:	0a5b      	lsrs	r3, r3, #9
 800023a:	0e00      	lsrs	r0, r0, #24
 800023c:	b580      	push	{r7, lr}
 800023e:	4698      	mov	r8, r3
 8000240:	0026      	movs	r6, r4
 8000242:	4691      	mov	r9, r2
 8000244:	0fc9      	lsrs	r1, r1, #31
 8000246:	00db      	lsls	r3, r3, #3
 8000248:	1a27      	subs	r7, r4, r0
 800024a:	428a      	cmp	r2, r1
 800024c:	d029      	beq.n	80002a2 <__aeabi_fadd+0x82>
 800024e:	2f00      	cmp	r7, #0
 8000250:	dd15      	ble.n	800027e <__aeabi_fadd+0x5e>
 8000252:	2800      	cmp	r0, #0
 8000254:	d14a      	bne.n	80002ec <__aeabi_fadd+0xcc>
 8000256:	2b00      	cmp	r3, #0
 8000258:	d000      	beq.n	800025c <__aeabi_fadd+0x3c>
 800025a:	e095      	b.n	8000388 <__aeabi_fadd+0x168>
 800025c:	08ed      	lsrs	r5, r5, #3
 800025e:	2cff      	cmp	r4, #255	; 0xff
 8000260:	d100      	bne.n	8000264 <__aeabi_fadd+0x44>
 8000262:	e088      	b.n	8000376 <__aeabi_fadd+0x156>
 8000264:	026b      	lsls	r3, r5, #9
 8000266:	0a5b      	lsrs	r3, r3, #9
 8000268:	b2e6      	uxtb	r6, r4
 800026a:	025b      	lsls	r3, r3, #9
 800026c:	05f6      	lsls	r6, r6, #23
 800026e:	0a58      	lsrs	r0, r3, #9
 8000270:	4330      	orrs	r0, r6
 8000272:	07d2      	lsls	r2, r2, #31
 8000274:	4310      	orrs	r0, r2
 8000276:	bc0c      	pop	{r2, r3}
 8000278:	4690      	mov	r8, r2
 800027a:	4699      	mov	r9, r3
 800027c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800027e:	2f00      	cmp	r7, #0
 8000280:	d000      	beq.n	8000284 <__aeabi_fadd+0x64>
 8000282:	e087      	b.n	8000394 <__aeabi_fadd+0x174>
 8000284:	1c60      	adds	r0, r4, #1
 8000286:	b2c0      	uxtb	r0, r0
 8000288:	2801      	cmp	r0, #1
 800028a:	dc00      	bgt.n	800028e <__aeabi_fadd+0x6e>
 800028c:	e0b6      	b.n	80003fc <__aeabi_fadd+0x1dc>
 800028e:	1aee      	subs	r6, r5, r3
 8000290:	0172      	lsls	r2, r6, #5
 8000292:	d500      	bpl.n	8000296 <__aeabi_fadd+0x76>
 8000294:	e0c5      	b.n	8000422 <__aeabi_fadd+0x202>
 8000296:	2e00      	cmp	r6, #0
 8000298:	d13d      	bne.n	8000316 <__aeabi_fadd+0xf6>
 800029a:	2200      	movs	r2, #0
 800029c:	2600      	movs	r6, #0
 800029e:	2300      	movs	r3, #0
 80002a0:	e7e3      	b.n	800026a <__aeabi_fadd+0x4a>
 80002a2:	2f00      	cmp	r7, #0
 80002a4:	dc00      	bgt.n	80002a8 <__aeabi_fadd+0x88>
 80002a6:	e096      	b.n	80003d6 <__aeabi_fadd+0x1b6>
 80002a8:	2800      	cmp	r0, #0
 80002aa:	d05d      	beq.n	8000368 <__aeabi_fadd+0x148>
 80002ac:	2cff      	cmp	r4, #255	; 0xff
 80002ae:	d060      	beq.n	8000372 <__aeabi_fadd+0x152>
 80002b0:	2280      	movs	r2, #128	; 0x80
 80002b2:	04d2      	lsls	r2, r2, #19
 80002b4:	4313      	orrs	r3, r2
 80002b6:	2f1b      	cmp	r7, #27
 80002b8:	dd00      	ble.n	80002bc <__aeabi_fadd+0x9c>
 80002ba:	e0ec      	b.n	8000496 <__aeabi_fadd+0x276>
 80002bc:	2220      	movs	r2, #32
 80002be:	1bd2      	subs	r2, r2, r7
 80002c0:	0018      	movs	r0, r3
 80002c2:	4093      	lsls	r3, r2
 80002c4:	40f8      	lsrs	r0, r7
 80002c6:	1e5a      	subs	r2, r3, #1
 80002c8:	4193      	sbcs	r3, r2
 80002ca:	4303      	orrs	r3, r0
 80002cc:	18ed      	adds	r5, r5, r3
 80002ce:	016b      	lsls	r3, r5, #5
 80002d0:	d57b      	bpl.n	80003ca <__aeabi_fadd+0x1aa>
 80002d2:	3401      	adds	r4, #1
 80002d4:	2cff      	cmp	r4, #255	; 0xff
 80002d6:	d100      	bne.n	80002da <__aeabi_fadd+0xba>
 80002d8:	e0b7      	b.n	800044a <__aeabi_fadd+0x22a>
 80002da:	2201      	movs	r2, #1
 80002dc:	2607      	movs	r6, #7
 80002de:	402a      	ands	r2, r5
 80002e0:	086b      	lsrs	r3, r5, #1
 80002e2:	4d9a      	ldr	r5, [pc, #616]	; (800054c <__aeabi_fadd+0x32c>)
 80002e4:	401d      	ands	r5, r3
 80002e6:	4315      	orrs	r5, r2
 80002e8:	402e      	ands	r6, r5
 80002ea:	e029      	b.n	8000340 <__aeabi_fadd+0x120>
 80002ec:	2cff      	cmp	r4, #255	; 0xff
 80002ee:	d0b5      	beq.n	800025c <__aeabi_fadd+0x3c>
 80002f0:	2280      	movs	r2, #128	; 0x80
 80002f2:	04d2      	lsls	r2, r2, #19
 80002f4:	4313      	orrs	r3, r2
 80002f6:	2f1b      	cmp	r7, #27
 80002f8:	dd00      	ble.n	80002fc <__aeabi_fadd+0xdc>
 80002fa:	e0b2      	b.n	8000462 <__aeabi_fadd+0x242>
 80002fc:	2220      	movs	r2, #32
 80002fe:	1bd2      	subs	r2, r2, r7
 8000300:	0019      	movs	r1, r3
 8000302:	4093      	lsls	r3, r2
 8000304:	40f9      	lsrs	r1, r7
 8000306:	1e5a      	subs	r2, r3, #1
 8000308:	4193      	sbcs	r3, r2
 800030a:	430b      	orrs	r3, r1
 800030c:	1aed      	subs	r5, r5, r3
 800030e:	016b      	lsls	r3, r5, #5
 8000310:	d55b      	bpl.n	80003ca <__aeabi_fadd+0x1aa>
 8000312:	01ad      	lsls	r5, r5, #6
 8000314:	09ae      	lsrs	r6, r5, #6
 8000316:	0030      	movs	r0, r6
 8000318:	f000 fbea 	bl	8000af0 <__clzsi2>
 800031c:	3805      	subs	r0, #5
 800031e:	4086      	lsls	r6, r0
 8000320:	4284      	cmp	r4, r0
 8000322:	dc65      	bgt.n	80003f0 <__aeabi_fadd+0x1d0>
 8000324:	1b04      	subs	r4, r0, r4
 8000326:	0033      	movs	r3, r6
 8000328:	2020      	movs	r0, #32
 800032a:	3401      	adds	r4, #1
 800032c:	40e3      	lsrs	r3, r4
 800032e:	1b04      	subs	r4, r0, r4
 8000330:	40a6      	lsls	r6, r4
 8000332:	1e75      	subs	r5, r6, #1
 8000334:	41ae      	sbcs	r6, r5
 8000336:	4333      	orrs	r3, r6
 8000338:	2607      	movs	r6, #7
 800033a:	001d      	movs	r5, r3
 800033c:	2400      	movs	r4, #0
 800033e:	401e      	ands	r6, r3
 8000340:	2201      	movs	r2, #1
 8000342:	464b      	mov	r3, r9
 8000344:	401a      	ands	r2, r3
 8000346:	2e00      	cmp	r6, #0
 8000348:	d004      	beq.n	8000354 <__aeabi_fadd+0x134>
 800034a:	230f      	movs	r3, #15
 800034c:	402b      	ands	r3, r5
 800034e:	2b04      	cmp	r3, #4
 8000350:	d000      	beq.n	8000354 <__aeabi_fadd+0x134>
 8000352:	3504      	adds	r5, #4
 8000354:	016b      	lsls	r3, r5, #5
 8000356:	d400      	bmi.n	800035a <__aeabi_fadd+0x13a>
 8000358:	e780      	b.n	800025c <__aeabi_fadd+0x3c>
 800035a:	3401      	adds	r4, #1
 800035c:	b2e6      	uxtb	r6, r4
 800035e:	2cff      	cmp	r4, #255	; 0xff
 8000360:	d12f      	bne.n	80003c2 <__aeabi_fadd+0x1a2>
 8000362:	26ff      	movs	r6, #255	; 0xff
 8000364:	2300      	movs	r3, #0
 8000366:	e780      	b.n	800026a <__aeabi_fadd+0x4a>
 8000368:	2b00      	cmp	r3, #0
 800036a:	d152      	bne.n	8000412 <__aeabi_fadd+0x1f2>
 800036c:	2cff      	cmp	r4, #255	; 0xff
 800036e:	d000      	beq.n	8000372 <__aeabi_fadd+0x152>
 8000370:	e774      	b.n	800025c <__aeabi_fadd+0x3c>
 8000372:	000a      	movs	r2, r1
 8000374:	08ed      	lsrs	r5, r5, #3
 8000376:	2d00      	cmp	r5, #0
 8000378:	d0f3      	beq.n	8000362 <__aeabi_fadd+0x142>
 800037a:	2380      	movs	r3, #128	; 0x80
 800037c:	03db      	lsls	r3, r3, #15
 800037e:	432b      	orrs	r3, r5
 8000380:	025b      	lsls	r3, r3, #9
 8000382:	0a5b      	lsrs	r3, r3, #9
 8000384:	26ff      	movs	r6, #255	; 0xff
 8000386:	e770      	b.n	800026a <__aeabi_fadd+0x4a>
 8000388:	3f01      	subs	r7, #1
 800038a:	2f00      	cmp	r7, #0
 800038c:	d0be      	beq.n	800030c <__aeabi_fadd+0xec>
 800038e:	2cff      	cmp	r4, #255	; 0xff
 8000390:	d1b1      	bne.n	80002f6 <__aeabi_fadd+0xd6>
 8000392:	e763      	b.n	800025c <__aeabi_fadd+0x3c>
 8000394:	2c00      	cmp	r4, #0
 8000396:	d047      	beq.n	8000428 <__aeabi_fadd+0x208>
 8000398:	28ff      	cmp	r0, #255	; 0xff
 800039a:	d069      	beq.n	8000470 <__aeabi_fadd+0x250>
 800039c:	2480      	movs	r4, #128	; 0x80
 800039e:	04e4      	lsls	r4, r4, #19
 80003a0:	427a      	negs	r2, r7
 80003a2:	4325      	orrs	r5, r4
 80003a4:	2a1b      	cmp	r2, #27
 80003a6:	dd00      	ble.n	80003aa <__aeabi_fadd+0x18a>
 80003a8:	e0c5      	b.n	8000536 <__aeabi_fadd+0x316>
 80003aa:	002c      	movs	r4, r5
 80003ac:	2620      	movs	r6, #32
 80003ae:	40d4      	lsrs	r4, r2
 80003b0:	1ab2      	subs	r2, r6, r2
 80003b2:	4095      	lsls	r5, r2
 80003b4:	1e6a      	subs	r2, r5, #1
 80003b6:	4195      	sbcs	r5, r2
 80003b8:	4325      	orrs	r5, r4
 80003ba:	1b5d      	subs	r5, r3, r5
 80003bc:	0004      	movs	r4, r0
 80003be:	4689      	mov	r9, r1
 80003c0:	e7a5      	b.n	800030e <__aeabi_fadd+0xee>
 80003c2:	01ab      	lsls	r3, r5, #6
 80003c4:	0a5b      	lsrs	r3, r3, #9
 80003c6:	e750      	b.n	800026a <__aeabi_fadd+0x4a>
 80003c8:	2400      	movs	r4, #0
 80003ca:	2201      	movs	r2, #1
 80003cc:	464b      	mov	r3, r9
 80003ce:	401a      	ands	r2, r3
 80003d0:	076b      	lsls	r3, r5, #29
 80003d2:	d1ba      	bne.n	800034a <__aeabi_fadd+0x12a>
 80003d4:	e742      	b.n	800025c <__aeabi_fadd+0x3c>
 80003d6:	2f00      	cmp	r7, #0
 80003d8:	d13b      	bne.n	8000452 <__aeabi_fadd+0x232>
 80003da:	3401      	adds	r4, #1
 80003dc:	b2e0      	uxtb	r0, r4
 80003de:	2801      	cmp	r0, #1
 80003e0:	dd4a      	ble.n	8000478 <__aeabi_fadd+0x258>
 80003e2:	2cff      	cmp	r4, #255	; 0xff
 80003e4:	d0bd      	beq.n	8000362 <__aeabi_fadd+0x142>
 80003e6:	2607      	movs	r6, #7
 80003e8:	18ed      	adds	r5, r5, r3
 80003ea:	086d      	lsrs	r5, r5, #1
 80003ec:	402e      	ands	r6, r5
 80003ee:	e7a7      	b.n	8000340 <__aeabi_fadd+0x120>
 80003f0:	2307      	movs	r3, #7
 80003f2:	4d57      	ldr	r5, [pc, #348]	; (8000550 <__aeabi_fadd+0x330>)
 80003f4:	1a24      	subs	r4, r4, r0
 80003f6:	4035      	ands	r5, r6
 80003f8:	401e      	ands	r6, r3
 80003fa:	e7a1      	b.n	8000340 <__aeabi_fadd+0x120>
 80003fc:	2c00      	cmp	r4, #0
 80003fe:	d11b      	bne.n	8000438 <__aeabi_fadd+0x218>
 8000400:	2d00      	cmp	r5, #0
 8000402:	d16e      	bne.n	80004e2 <__aeabi_fadd+0x2c2>
 8000404:	2b00      	cmp	r3, #0
 8000406:	d100      	bne.n	800040a <__aeabi_fadd+0x1ea>
 8000408:	e09a      	b.n	8000540 <__aeabi_fadd+0x320>
 800040a:	000a      	movs	r2, r1
 800040c:	001d      	movs	r5, r3
 800040e:	003c      	movs	r4, r7
 8000410:	e724      	b.n	800025c <__aeabi_fadd+0x3c>
 8000412:	3f01      	subs	r7, #1
 8000414:	2f00      	cmp	r7, #0
 8000416:	d100      	bne.n	800041a <__aeabi_fadd+0x1fa>
 8000418:	e758      	b.n	80002cc <__aeabi_fadd+0xac>
 800041a:	2cff      	cmp	r4, #255	; 0xff
 800041c:	d000      	beq.n	8000420 <__aeabi_fadd+0x200>
 800041e:	e74a      	b.n	80002b6 <__aeabi_fadd+0x96>
 8000420:	e7a7      	b.n	8000372 <__aeabi_fadd+0x152>
 8000422:	1b5e      	subs	r6, r3, r5
 8000424:	4689      	mov	r9, r1
 8000426:	e776      	b.n	8000316 <__aeabi_fadd+0xf6>
 8000428:	2d00      	cmp	r5, #0
 800042a:	d11c      	bne.n	8000466 <__aeabi_fadd+0x246>
 800042c:	000a      	movs	r2, r1
 800042e:	28ff      	cmp	r0, #255	; 0xff
 8000430:	d01f      	beq.n	8000472 <__aeabi_fadd+0x252>
 8000432:	0004      	movs	r4, r0
 8000434:	001d      	movs	r5, r3
 8000436:	e711      	b.n	800025c <__aeabi_fadd+0x3c>
 8000438:	2d00      	cmp	r5, #0
 800043a:	d15d      	bne.n	80004f8 <__aeabi_fadd+0x2d8>
 800043c:	2b00      	cmp	r3, #0
 800043e:	d117      	bne.n	8000470 <__aeabi_fadd+0x250>
 8000440:	2380      	movs	r3, #128	; 0x80
 8000442:	2200      	movs	r2, #0
 8000444:	03db      	lsls	r3, r3, #15
 8000446:	26ff      	movs	r6, #255	; 0xff
 8000448:	e70f      	b.n	800026a <__aeabi_fadd+0x4a>
 800044a:	000a      	movs	r2, r1
 800044c:	26ff      	movs	r6, #255	; 0xff
 800044e:	2300      	movs	r3, #0
 8000450:	e70b      	b.n	800026a <__aeabi_fadd+0x4a>
 8000452:	2c00      	cmp	r4, #0
 8000454:	d121      	bne.n	800049a <__aeabi_fadd+0x27a>
 8000456:	2d00      	cmp	r5, #0
 8000458:	d166      	bne.n	8000528 <__aeabi_fadd+0x308>
 800045a:	28ff      	cmp	r0, #255	; 0xff
 800045c:	d1e9      	bne.n	8000432 <__aeabi_fadd+0x212>
 800045e:	001d      	movs	r5, r3
 8000460:	e787      	b.n	8000372 <__aeabi_fadd+0x152>
 8000462:	2301      	movs	r3, #1
 8000464:	e752      	b.n	800030c <__aeabi_fadd+0xec>
 8000466:	1c7a      	adds	r2, r7, #1
 8000468:	d0a7      	beq.n	80003ba <__aeabi_fadd+0x19a>
 800046a:	43fa      	mvns	r2, r7
 800046c:	28ff      	cmp	r0, #255	; 0xff
 800046e:	d199      	bne.n	80003a4 <__aeabi_fadd+0x184>
 8000470:	000a      	movs	r2, r1
 8000472:	001d      	movs	r5, r3
 8000474:	24ff      	movs	r4, #255	; 0xff
 8000476:	e6f1      	b.n	800025c <__aeabi_fadd+0x3c>
 8000478:	2e00      	cmp	r6, #0
 800047a:	d121      	bne.n	80004c0 <__aeabi_fadd+0x2a0>
 800047c:	2d00      	cmp	r5, #0
 800047e:	d04f      	beq.n	8000520 <__aeabi_fadd+0x300>
 8000480:	2b00      	cmp	r3, #0
 8000482:	d04c      	beq.n	800051e <__aeabi_fadd+0x2fe>
 8000484:	18ed      	adds	r5, r5, r3
 8000486:	016b      	lsls	r3, r5, #5
 8000488:	d59e      	bpl.n	80003c8 <__aeabi_fadd+0x1a8>
 800048a:	4b31      	ldr	r3, [pc, #196]	; (8000550 <__aeabi_fadd+0x330>)
 800048c:	3607      	adds	r6, #7
 800048e:	402e      	ands	r6, r5
 8000490:	2401      	movs	r4, #1
 8000492:	401d      	ands	r5, r3
 8000494:	e754      	b.n	8000340 <__aeabi_fadd+0x120>
 8000496:	2301      	movs	r3, #1
 8000498:	e718      	b.n	80002cc <__aeabi_fadd+0xac>
 800049a:	28ff      	cmp	r0, #255	; 0xff
 800049c:	d0df      	beq.n	800045e <__aeabi_fadd+0x23e>
 800049e:	2480      	movs	r4, #128	; 0x80
 80004a0:	04e4      	lsls	r4, r4, #19
 80004a2:	427f      	negs	r7, r7
 80004a4:	4325      	orrs	r5, r4
 80004a6:	2f1b      	cmp	r7, #27
 80004a8:	dc4d      	bgt.n	8000546 <__aeabi_fadd+0x326>
 80004aa:	2620      	movs	r6, #32
 80004ac:	1bf6      	subs	r6, r6, r7
 80004ae:	002c      	movs	r4, r5
 80004b0:	40b5      	lsls	r5, r6
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	1e6a      	subs	r2, r5, #1
 80004b6:	4195      	sbcs	r5, r2
 80004b8:	4325      	orrs	r5, r4
 80004ba:	18ed      	adds	r5, r5, r3
 80004bc:	0004      	movs	r4, r0
 80004be:	e706      	b.n	80002ce <__aeabi_fadd+0xae>
 80004c0:	2d00      	cmp	r5, #0
 80004c2:	d0cc      	beq.n	800045e <__aeabi_fadd+0x23e>
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d100      	bne.n	80004ca <__aeabi_fadd+0x2aa>
 80004c8:	e753      	b.n	8000372 <__aeabi_fadd+0x152>
 80004ca:	2180      	movs	r1, #128	; 0x80
 80004cc:	4660      	mov	r0, ip
 80004ce:	03c9      	lsls	r1, r1, #15
 80004d0:	4208      	tst	r0, r1
 80004d2:	d003      	beq.n	80004dc <__aeabi_fadd+0x2bc>
 80004d4:	4640      	mov	r0, r8
 80004d6:	4208      	tst	r0, r1
 80004d8:	d100      	bne.n	80004dc <__aeabi_fadd+0x2bc>
 80004da:	001d      	movs	r5, r3
 80004dc:	2101      	movs	r1, #1
 80004de:	4011      	ands	r1, r2
 80004e0:	e747      	b.n	8000372 <__aeabi_fadd+0x152>
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d100      	bne.n	80004e8 <__aeabi_fadd+0x2c8>
 80004e6:	e6b9      	b.n	800025c <__aeabi_fadd+0x3c>
 80004e8:	1aea      	subs	r2, r5, r3
 80004ea:	0150      	lsls	r0, r2, #5
 80004ec:	d525      	bpl.n	800053a <__aeabi_fadd+0x31a>
 80004ee:	2607      	movs	r6, #7
 80004f0:	1b5d      	subs	r5, r3, r5
 80004f2:	402e      	ands	r6, r5
 80004f4:	4689      	mov	r9, r1
 80004f6:	e723      	b.n	8000340 <__aeabi_fadd+0x120>
 80004f8:	24ff      	movs	r4, #255	; 0xff
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d100      	bne.n	8000500 <__aeabi_fadd+0x2e0>
 80004fe:	e6ad      	b.n	800025c <__aeabi_fadd+0x3c>
 8000500:	2280      	movs	r2, #128	; 0x80
 8000502:	4660      	mov	r0, ip
 8000504:	03d2      	lsls	r2, r2, #15
 8000506:	4210      	tst	r0, r2
 8000508:	d004      	beq.n	8000514 <__aeabi_fadd+0x2f4>
 800050a:	4640      	mov	r0, r8
 800050c:	4210      	tst	r0, r2
 800050e:	d101      	bne.n	8000514 <__aeabi_fadd+0x2f4>
 8000510:	001d      	movs	r5, r3
 8000512:	4689      	mov	r9, r1
 8000514:	2201      	movs	r2, #1
 8000516:	464b      	mov	r3, r9
 8000518:	24ff      	movs	r4, #255	; 0xff
 800051a:	401a      	ands	r2, r3
 800051c:	e69e      	b.n	800025c <__aeabi_fadd+0x3c>
 800051e:	002b      	movs	r3, r5
 8000520:	08dd      	lsrs	r5, r3, #3
 8000522:	000a      	movs	r2, r1
 8000524:	2400      	movs	r4, #0
 8000526:	e69d      	b.n	8000264 <__aeabi_fadd+0x44>
 8000528:	1c7a      	adds	r2, r7, #1
 800052a:	d0c6      	beq.n	80004ba <__aeabi_fadd+0x29a>
 800052c:	43ff      	mvns	r7, r7
 800052e:	28ff      	cmp	r0, #255	; 0xff
 8000530:	d1b9      	bne.n	80004a6 <__aeabi_fadd+0x286>
 8000532:	001d      	movs	r5, r3
 8000534:	e71d      	b.n	8000372 <__aeabi_fadd+0x152>
 8000536:	2501      	movs	r5, #1
 8000538:	e73f      	b.n	80003ba <__aeabi_fadd+0x19a>
 800053a:	1e15      	subs	r5, r2, #0
 800053c:	d000      	beq.n	8000540 <__aeabi_fadd+0x320>
 800053e:	e744      	b.n	80003ca <__aeabi_fadd+0x1aa>
 8000540:	2200      	movs	r2, #0
 8000542:	2300      	movs	r3, #0
 8000544:	e691      	b.n	800026a <__aeabi_fadd+0x4a>
 8000546:	2501      	movs	r5, #1
 8000548:	e7b7      	b.n	80004ba <__aeabi_fadd+0x29a>
 800054a:	46c0      	nop			; (mov r8, r8)
 800054c:	7dffffff 	.word	0x7dffffff
 8000550:	fbffffff 	.word	0xfbffffff

08000554 <__aeabi_fdiv>:
 8000554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000556:	4657      	mov	r7, sl
 8000558:	464e      	mov	r6, r9
 800055a:	4645      	mov	r5, r8
 800055c:	46de      	mov	lr, fp
 800055e:	0244      	lsls	r4, r0, #9
 8000560:	b5e0      	push	{r5, r6, r7, lr}
 8000562:	0046      	lsls	r6, r0, #1
 8000564:	4688      	mov	r8, r1
 8000566:	0a64      	lsrs	r4, r4, #9
 8000568:	0e36      	lsrs	r6, r6, #24
 800056a:	0fc7      	lsrs	r7, r0, #31
 800056c:	2e00      	cmp	r6, #0
 800056e:	d063      	beq.n	8000638 <__aeabi_fdiv+0xe4>
 8000570:	2eff      	cmp	r6, #255	; 0xff
 8000572:	d024      	beq.n	80005be <__aeabi_fdiv+0x6a>
 8000574:	2380      	movs	r3, #128	; 0x80
 8000576:	00e4      	lsls	r4, r4, #3
 8000578:	04db      	lsls	r3, r3, #19
 800057a:	431c      	orrs	r4, r3
 800057c:	2300      	movs	r3, #0
 800057e:	4699      	mov	r9, r3
 8000580:	469b      	mov	fp, r3
 8000582:	3e7f      	subs	r6, #127	; 0x7f
 8000584:	4643      	mov	r3, r8
 8000586:	4642      	mov	r2, r8
 8000588:	025d      	lsls	r5, r3, #9
 800058a:	0fd2      	lsrs	r2, r2, #31
 800058c:	005b      	lsls	r3, r3, #1
 800058e:	0a6d      	lsrs	r5, r5, #9
 8000590:	0e1b      	lsrs	r3, r3, #24
 8000592:	4690      	mov	r8, r2
 8000594:	4692      	mov	sl, r2
 8000596:	d065      	beq.n	8000664 <__aeabi_fdiv+0x110>
 8000598:	2bff      	cmp	r3, #255	; 0xff
 800059a:	d055      	beq.n	8000648 <__aeabi_fdiv+0xf4>
 800059c:	2280      	movs	r2, #128	; 0x80
 800059e:	2100      	movs	r1, #0
 80005a0:	00ed      	lsls	r5, r5, #3
 80005a2:	04d2      	lsls	r2, r2, #19
 80005a4:	3b7f      	subs	r3, #127	; 0x7f
 80005a6:	4315      	orrs	r5, r2
 80005a8:	1af6      	subs	r6, r6, r3
 80005aa:	4643      	mov	r3, r8
 80005ac:	464a      	mov	r2, r9
 80005ae:	407b      	eors	r3, r7
 80005b0:	2a0f      	cmp	r2, #15
 80005b2:	d900      	bls.n	80005b6 <__aeabi_fdiv+0x62>
 80005b4:	e08d      	b.n	80006d2 <__aeabi_fdiv+0x17e>
 80005b6:	486d      	ldr	r0, [pc, #436]	; (800076c <__aeabi_fdiv+0x218>)
 80005b8:	0092      	lsls	r2, r2, #2
 80005ba:	5882      	ldr	r2, [r0, r2]
 80005bc:	4697      	mov	pc, r2
 80005be:	2c00      	cmp	r4, #0
 80005c0:	d154      	bne.n	800066c <__aeabi_fdiv+0x118>
 80005c2:	2308      	movs	r3, #8
 80005c4:	4699      	mov	r9, r3
 80005c6:	3b06      	subs	r3, #6
 80005c8:	26ff      	movs	r6, #255	; 0xff
 80005ca:	469b      	mov	fp, r3
 80005cc:	e7da      	b.n	8000584 <__aeabi_fdiv+0x30>
 80005ce:	2500      	movs	r5, #0
 80005d0:	4653      	mov	r3, sl
 80005d2:	2902      	cmp	r1, #2
 80005d4:	d01b      	beq.n	800060e <__aeabi_fdiv+0xba>
 80005d6:	2903      	cmp	r1, #3
 80005d8:	d100      	bne.n	80005dc <__aeabi_fdiv+0x88>
 80005da:	e0bf      	b.n	800075c <__aeabi_fdiv+0x208>
 80005dc:	2901      	cmp	r1, #1
 80005de:	d028      	beq.n	8000632 <__aeabi_fdiv+0xde>
 80005e0:	0030      	movs	r0, r6
 80005e2:	307f      	adds	r0, #127	; 0x7f
 80005e4:	2800      	cmp	r0, #0
 80005e6:	dd20      	ble.n	800062a <__aeabi_fdiv+0xd6>
 80005e8:	076a      	lsls	r2, r5, #29
 80005ea:	d004      	beq.n	80005f6 <__aeabi_fdiv+0xa2>
 80005ec:	220f      	movs	r2, #15
 80005ee:	402a      	ands	r2, r5
 80005f0:	2a04      	cmp	r2, #4
 80005f2:	d000      	beq.n	80005f6 <__aeabi_fdiv+0xa2>
 80005f4:	3504      	adds	r5, #4
 80005f6:	012a      	lsls	r2, r5, #4
 80005f8:	d503      	bpl.n	8000602 <__aeabi_fdiv+0xae>
 80005fa:	0030      	movs	r0, r6
 80005fc:	4a5c      	ldr	r2, [pc, #368]	; (8000770 <__aeabi_fdiv+0x21c>)
 80005fe:	3080      	adds	r0, #128	; 0x80
 8000600:	4015      	ands	r5, r2
 8000602:	28fe      	cmp	r0, #254	; 0xfe
 8000604:	dc03      	bgt.n	800060e <__aeabi_fdiv+0xba>
 8000606:	01ac      	lsls	r4, r5, #6
 8000608:	0a64      	lsrs	r4, r4, #9
 800060a:	b2c2      	uxtb	r2, r0
 800060c:	e001      	b.n	8000612 <__aeabi_fdiv+0xbe>
 800060e:	22ff      	movs	r2, #255	; 0xff
 8000610:	2400      	movs	r4, #0
 8000612:	0264      	lsls	r4, r4, #9
 8000614:	05d2      	lsls	r2, r2, #23
 8000616:	0a60      	lsrs	r0, r4, #9
 8000618:	07db      	lsls	r3, r3, #31
 800061a:	4310      	orrs	r0, r2
 800061c:	4318      	orrs	r0, r3
 800061e:	bc3c      	pop	{r2, r3, r4, r5}
 8000620:	4690      	mov	r8, r2
 8000622:	4699      	mov	r9, r3
 8000624:	46a2      	mov	sl, r4
 8000626:	46ab      	mov	fp, r5
 8000628:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800062a:	2201      	movs	r2, #1
 800062c:	1a10      	subs	r0, r2, r0
 800062e:	281b      	cmp	r0, #27
 8000630:	dd7c      	ble.n	800072c <__aeabi_fdiv+0x1d8>
 8000632:	2200      	movs	r2, #0
 8000634:	2400      	movs	r4, #0
 8000636:	e7ec      	b.n	8000612 <__aeabi_fdiv+0xbe>
 8000638:	2c00      	cmp	r4, #0
 800063a:	d11d      	bne.n	8000678 <__aeabi_fdiv+0x124>
 800063c:	2304      	movs	r3, #4
 800063e:	4699      	mov	r9, r3
 8000640:	3b03      	subs	r3, #3
 8000642:	2600      	movs	r6, #0
 8000644:	469b      	mov	fp, r3
 8000646:	e79d      	b.n	8000584 <__aeabi_fdiv+0x30>
 8000648:	3eff      	subs	r6, #255	; 0xff
 800064a:	2d00      	cmp	r5, #0
 800064c:	d120      	bne.n	8000690 <__aeabi_fdiv+0x13c>
 800064e:	2102      	movs	r1, #2
 8000650:	4643      	mov	r3, r8
 8000652:	464a      	mov	r2, r9
 8000654:	407b      	eors	r3, r7
 8000656:	430a      	orrs	r2, r1
 8000658:	2a0f      	cmp	r2, #15
 800065a:	d8d8      	bhi.n	800060e <__aeabi_fdiv+0xba>
 800065c:	4845      	ldr	r0, [pc, #276]	; (8000774 <__aeabi_fdiv+0x220>)
 800065e:	0092      	lsls	r2, r2, #2
 8000660:	5882      	ldr	r2, [r0, r2]
 8000662:	4697      	mov	pc, r2
 8000664:	2d00      	cmp	r5, #0
 8000666:	d119      	bne.n	800069c <__aeabi_fdiv+0x148>
 8000668:	2101      	movs	r1, #1
 800066a:	e7f1      	b.n	8000650 <__aeabi_fdiv+0xfc>
 800066c:	230c      	movs	r3, #12
 800066e:	4699      	mov	r9, r3
 8000670:	3b09      	subs	r3, #9
 8000672:	26ff      	movs	r6, #255	; 0xff
 8000674:	469b      	mov	fp, r3
 8000676:	e785      	b.n	8000584 <__aeabi_fdiv+0x30>
 8000678:	0020      	movs	r0, r4
 800067a:	f000 fa39 	bl	8000af0 <__clzsi2>
 800067e:	2676      	movs	r6, #118	; 0x76
 8000680:	1f43      	subs	r3, r0, #5
 8000682:	409c      	lsls	r4, r3
 8000684:	2300      	movs	r3, #0
 8000686:	4276      	negs	r6, r6
 8000688:	1a36      	subs	r6, r6, r0
 800068a:	4699      	mov	r9, r3
 800068c:	469b      	mov	fp, r3
 800068e:	e779      	b.n	8000584 <__aeabi_fdiv+0x30>
 8000690:	464a      	mov	r2, r9
 8000692:	2303      	movs	r3, #3
 8000694:	431a      	orrs	r2, r3
 8000696:	4691      	mov	r9, r2
 8000698:	2103      	movs	r1, #3
 800069a:	e786      	b.n	80005aa <__aeabi_fdiv+0x56>
 800069c:	0028      	movs	r0, r5
 800069e:	f000 fa27 	bl	8000af0 <__clzsi2>
 80006a2:	1f43      	subs	r3, r0, #5
 80006a4:	1836      	adds	r6, r6, r0
 80006a6:	409d      	lsls	r5, r3
 80006a8:	3676      	adds	r6, #118	; 0x76
 80006aa:	2100      	movs	r1, #0
 80006ac:	e77d      	b.n	80005aa <__aeabi_fdiv+0x56>
 80006ae:	2480      	movs	r4, #128	; 0x80
 80006b0:	2300      	movs	r3, #0
 80006b2:	03e4      	lsls	r4, r4, #15
 80006b4:	22ff      	movs	r2, #255	; 0xff
 80006b6:	e7ac      	b.n	8000612 <__aeabi_fdiv+0xbe>
 80006b8:	2500      	movs	r5, #0
 80006ba:	2380      	movs	r3, #128	; 0x80
 80006bc:	03db      	lsls	r3, r3, #15
 80006be:	421c      	tst	r4, r3
 80006c0:	d028      	beq.n	8000714 <__aeabi_fdiv+0x1c0>
 80006c2:	421d      	tst	r5, r3
 80006c4:	d126      	bne.n	8000714 <__aeabi_fdiv+0x1c0>
 80006c6:	432b      	orrs	r3, r5
 80006c8:	025c      	lsls	r4, r3, #9
 80006ca:	0a64      	lsrs	r4, r4, #9
 80006cc:	4643      	mov	r3, r8
 80006ce:	22ff      	movs	r2, #255	; 0xff
 80006d0:	e79f      	b.n	8000612 <__aeabi_fdiv+0xbe>
 80006d2:	0162      	lsls	r2, r4, #5
 80006d4:	016c      	lsls	r4, r5, #5
 80006d6:	42a2      	cmp	r2, r4
 80006d8:	d224      	bcs.n	8000724 <__aeabi_fdiv+0x1d0>
 80006da:	211b      	movs	r1, #27
 80006dc:	2500      	movs	r5, #0
 80006de:	3e01      	subs	r6, #1
 80006e0:	2701      	movs	r7, #1
 80006e2:	0010      	movs	r0, r2
 80006e4:	006d      	lsls	r5, r5, #1
 80006e6:	0052      	lsls	r2, r2, #1
 80006e8:	2800      	cmp	r0, #0
 80006ea:	db01      	blt.n	80006f0 <__aeabi_fdiv+0x19c>
 80006ec:	4294      	cmp	r4, r2
 80006ee:	d801      	bhi.n	80006f4 <__aeabi_fdiv+0x1a0>
 80006f0:	1b12      	subs	r2, r2, r4
 80006f2:	433d      	orrs	r5, r7
 80006f4:	3901      	subs	r1, #1
 80006f6:	2900      	cmp	r1, #0
 80006f8:	d1f3      	bne.n	80006e2 <__aeabi_fdiv+0x18e>
 80006fa:	0014      	movs	r4, r2
 80006fc:	1e62      	subs	r2, r4, #1
 80006fe:	4194      	sbcs	r4, r2
 8000700:	4325      	orrs	r5, r4
 8000702:	e76d      	b.n	80005e0 <__aeabi_fdiv+0x8c>
 8000704:	46ba      	mov	sl, r7
 8000706:	4659      	mov	r1, fp
 8000708:	0025      	movs	r5, r4
 800070a:	4653      	mov	r3, sl
 800070c:	2902      	cmp	r1, #2
 800070e:	d000      	beq.n	8000712 <__aeabi_fdiv+0x1be>
 8000710:	e761      	b.n	80005d6 <__aeabi_fdiv+0x82>
 8000712:	e77c      	b.n	800060e <__aeabi_fdiv+0xba>
 8000714:	2380      	movs	r3, #128	; 0x80
 8000716:	03db      	lsls	r3, r3, #15
 8000718:	431c      	orrs	r4, r3
 800071a:	0264      	lsls	r4, r4, #9
 800071c:	0a64      	lsrs	r4, r4, #9
 800071e:	003b      	movs	r3, r7
 8000720:	22ff      	movs	r2, #255	; 0xff
 8000722:	e776      	b.n	8000612 <__aeabi_fdiv+0xbe>
 8000724:	1b12      	subs	r2, r2, r4
 8000726:	211a      	movs	r1, #26
 8000728:	2501      	movs	r5, #1
 800072a:	e7d9      	b.n	80006e0 <__aeabi_fdiv+0x18c>
 800072c:	369e      	adds	r6, #158	; 0x9e
 800072e:	002a      	movs	r2, r5
 8000730:	40b5      	lsls	r5, r6
 8000732:	002c      	movs	r4, r5
 8000734:	40c2      	lsrs	r2, r0
 8000736:	1e65      	subs	r5, r4, #1
 8000738:	41ac      	sbcs	r4, r5
 800073a:	4314      	orrs	r4, r2
 800073c:	0762      	lsls	r2, r4, #29
 800073e:	d004      	beq.n	800074a <__aeabi_fdiv+0x1f6>
 8000740:	220f      	movs	r2, #15
 8000742:	4022      	ands	r2, r4
 8000744:	2a04      	cmp	r2, #4
 8000746:	d000      	beq.n	800074a <__aeabi_fdiv+0x1f6>
 8000748:	3404      	adds	r4, #4
 800074a:	0162      	lsls	r2, r4, #5
 800074c:	d403      	bmi.n	8000756 <__aeabi_fdiv+0x202>
 800074e:	01a4      	lsls	r4, r4, #6
 8000750:	0a64      	lsrs	r4, r4, #9
 8000752:	2200      	movs	r2, #0
 8000754:	e75d      	b.n	8000612 <__aeabi_fdiv+0xbe>
 8000756:	2201      	movs	r2, #1
 8000758:	2400      	movs	r4, #0
 800075a:	e75a      	b.n	8000612 <__aeabi_fdiv+0xbe>
 800075c:	2480      	movs	r4, #128	; 0x80
 800075e:	03e4      	lsls	r4, r4, #15
 8000760:	432c      	orrs	r4, r5
 8000762:	0264      	lsls	r4, r4, #9
 8000764:	0a64      	lsrs	r4, r4, #9
 8000766:	22ff      	movs	r2, #255	; 0xff
 8000768:	e753      	b.n	8000612 <__aeabi_fdiv+0xbe>
 800076a:	46c0      	nop			; (mov r8, r8)
 800076c:	08003404 	.word	0x08003404
 8000770:	f7ffffff 	.word	0xf7ffffff
 8000774:	08003444 	.word	0x08003444

08000778 <__aeabi_fmul>:
 8000778:	b5f0      	push	{r4, r5, r6, r7, lr}
 800077a:	464e      	mov	r6, r9
 800077c:	4657      	mov	r7, sl
 800077e:	4645      	mov	r5, r8
 8000780:	46de      	mov	lr, fp
 8000782:	b5e0      	push	{r5, r6, r7, lr}
 8000784:	0243      	lsls	r3, r0, #9
 8000786:	0a5b      	lsrs	r3, r3, #9
 8000788:	0045      	lsls	r5, r0, #1
 800078a:	b083      	sub	sp, #12
 800078c:	1c0f      	adds	r7, r1, #0
 800078e:	4699      	mov	r9, r3
 8000790:	0e2d      	lsrs	r5, r5, #24
 8000792:	0fc6      	lsrs	r6, r0, #31
 8000794:	2d00      	cmp	r5, #0
 8000796:	d057      	beq.n	8000848 <__aeabi_fmul+0xd0>
 8000798:	2dff      	cmp	r5, #255	; 0xff
 800079a:	d024      	beq.n	80007e6 <__aeabi_fmul+0x6e>
 800079c:	2080      	movs	r0, #128	; 0x80
 800079e:	00db      	lsls	r3, r3, #3
 80007a0:	04c0      	lsls	r0, r0, #19
 80007a2:	4318      	orrs	r0, r3
 80007a4:	2300      	movs	r3, #0
 80007a6:	4681      	mov	r9, r0
 80007a8:	469a      	mov	sl, r3
 80007aa:	469b      	mov	fp, r3
 80007ac:	3d7f      	subs	r5, #127	; 0x7f
 80007ae:	027c      	lsls	r4, r7, #9
 80007b0:	007a      	lsls	r2, r7, #1
 80007b2:	0ffb      	lsrs	r3, r7, #31
 80007b4:	0a64      	lsrs	r4, r4, #9
 80007b6:	0e12      	lsrs	r2, r2, #24
 80007b8:	4698      	mov	r8, r3
 80007ba:	d023      	beq.n	8000804 <__aeabi_fmul+0x8c>
 80007bc:	2aff      	cmp	r2, #255	; 0xff
 80007be:	d04b      	beq.n	8000858 <__aeabi_fmul+0xe0>
 80007c0:	00e3      	lsls	r3, r4, #3
 80007c2:	2480      	movs	r4, #128	; 0x80
 80007c4:	2000      	movs	r0, #0
 80007c6:	04e4      	lsls	r4, r4, #19
 80007c8:	3a7f      	subs	r2, #127	; 0x7f
 80007ca:	431c      	orrs	r4, r3
 80007cc:	18ad      	adds	r5, r5, r2
 80007ce:	1c6b      	adds	r3, r5, #1
 80007d0:	4647      	mov	r7, r8
 80007d2:	9301      	str	r3, [sp, #4]
 80007d4:	4653      	mov	r3, sl
 80007d6:	4077      	eors	r7, r6
 80007d8:	003a      	movs	r2, r7
 80007da:	2b0f      	cmp	r3, #15
 80007dc:	d848      	bhi.n	8000870 <__aeabi_fmul+0xf8>
 80007de:	497d      	ldr	r1, [pc, #500]	; (80009d4 <__aeabi_fmul+0x25c>)
 80007e0:	009b      	lsls	r3, r3, #2
 80007e2:	58cb      	ldr	r3, [r1, r3]
 80007e4:	469f      	mov	pc, r3
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d000      	beq.n	80007ec <__aeabi_fmul+0x74>
 80007ea:	e085      	b.n	80008f8 <__aeabi_fmul+0x180>
 80007ec:	3308      	adds	r3, #8
 80007ee:	469a      	mov	sl, r3
 80007f0:	3b06      	subs	r3, #6
 80007f2:	469b      	mov	fp, r3
 80007f4:	027c      	lsls	r4, r7, #9
 80007f6:	007a      	lsls	r2, r7, #1
 80007f8:	0ffb      	lsrs	r3, r7, #31
 80007fa:	25ff      	movs	r5, #255	; 0xff
 80007fc:	0a64      	lsrs	r4, r4, #9
 80007fe:	0e12      	lsrs	r2, r2, #24
 8000800:	4698      	mov	r8, r3
 8000802:	d1db      	bne.n	80007bc <__aeabi_fmul+0x44>
 8000804:	2c00      	cmp	r4, #0
 8000806:	d000      	beq.n	800080a <__aeabi_fmul+0x92>
 8000808:	e090      	b.n	800092c <__aeabi_fmul+0x1b4>
 800080a:	4652      	mov	r2, sl
 800080c:	2301      	movs	r3, #1
 800080e:	431a      	orrs	r2, r3
 8000810:	4692      	mov	sl, r2
 8000812:	2001      	movs	r0, #1
 8000814:	e7db      	b.n	80007ce <__aeabi_fmul+0x56>
 8000816:	464c      	mov	r4, r9
 8000818:	4658      	mov	r0, fp
 800081a:	0017      	movs	r7, r2
 800081c:	2802      	cmp	r0, #2
 800081e:	d024      	beq.n	800086a <__aeabi_fmul+0xf2>
 8000820:	2803      	cmp	r0, #3
 8000822:	d100      	bne.n	8000826 <__aeabi_fmul+0xae>
 8000824:	e0cf      	b.n	80009c6 <__aeabi_fmul+0x24e>
 8000826:	2200      	movs	r2, #0
 8000828:	2300      	movs	r3, #0
 800082a:	2801      	cmp	r0, #1
 800082c:	d14d      	bne.n	80008ca <__aeabi_fmul+0x152>
 800082e:	0258      	lsls	r0, r3, #9
 8000830:	05d2      	lsls	r2, r2, #23
 8000832:	0a40      	lsrs	r0, r0, #9
 8000834:	07ff      	lsls	r7, r7, #31
 8000836:	4310      	orrs	r0, r2
 8000838:	4338      	orrs	r0, r7
 800083a:	b003      	add	sp, #12
 800083c:	bc3c      	pop	{r2, r3, r4, r5}
 800083e:	4690      	mov	r8, r2
 8000840:	4699      	mov	r9, r3
 8000842:	46a2      	mov	sl, r4
 8000844:	46ab      	mov	fp, r5
 8000846:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000848:	2b00      	cmp	r3, #0
 800084a:	d15b      	bne.n	8000904 <__aeabi_fmul+0x18c>
 800084c:	2304      	movs	r3, #4
 800084e:	469a      	mov	sl, r3
 8000850:	3b03      	subs	r3, #3
 8000852:	2500      	movs	r5, #0
 8000854:	469b      	mov	fp, r3
 8000856:	e7aa      	b.n	80007ae <__aeabi_fmul+0x36>
 8000858:	35ff      	adds	r5, #255	; 0xff
 800085a:	2c00      	cmp	r4, #0
 800085c:	d160      	bne.n	8000920 <__aeabi_fmul+0x1a8>
 800085e:	4652      	mov	r2, sl
 8000860:	2302      	movs	r3, #2
 8000862:	431a      	orrs	r2, r3
 8000864:	4692      	mov	sl, r2
 8000866:	2002      	movs	r0, #2
 8000868:	e7b1      	b.n	80007ce <__aeabi_fmul+0x56>
 800086a:	22ff      	movs	r2, #255	; 0xff
 800086c:	2300      	movs	r3, #0
 800086e:	e7de      	b.n	800082e <__aeabi_fmul+0xb6>
 8000870:	464b      	mov	r3, r9
 8000872:	0c1b      	lsrs	r3, r3, #16
 8000874:	469c      	mov	ip, r3
 8000876:	464b      	mov	r3, r9
 8000878:	0426      	lsls	r6, r4, #16
 800087a:	0c36      	lsrs	r6, r6, #16
 800087c:	0418      	lsls	r0, r3, #16
 800087e:	4661      	mov	r1, ip
 8000880:	0033      	movs	r3, r6
 8000882:	0c22      	lsrs	r2, r4, #16
 8000884:	4664      	mov	r4, ip
 8000886:	0c00      	lsrs	r0, r0, #16
 8000888:	4343      	muls	r3, r0
 800088a:	434e      	muls	r6, r1
 800088c:	4350      	muls	r0, r2
 800088e:	4354      	muls	r4, r2
 8000890:	1980      	adds	r0, r0, r6
 8000892:	0c1a      	lsrs	r2, r3, #16
 8000894:	1812      	adds	r2, r2, r0
 8000896:	4296      	cmp	r6, r2
 8000898:	d903      	bls.n	80008a2 <__aeabi_fmul+0x12a>
 800089a:	2180      	movs	r1, #128	; 0x80
 800089c:	0249      	lsls	r1, r1, #9
 800089e:	468c      	mov	ip, r1
 80008a0:	4464      	add	r4, ip
 80008a2:	041b      	lsls	r3, r3, #16
 80008a4:	0c1b      	lsrs	r3, r3, #16
 80008a6:	0410      	lsls	r0, r2, #16
 80008a8:	18c0      	adds	r0, r0, r3
 80008aa:	0183      	lsls	r3, r0, #6
 80008ac:	1e5e      	subs	r6, r3, #1
 80008ae:	41b3      	sbcs	r3, r6
 80008b0:	0e80      	lsrs	r0, r0, #26
 80008b2:	4318      	orrs	r0, r3
 80008b4:	0c13      	lsrs	r3, r2, #16
 80008b6:	191b      	adds	r3, r3, r4
 80008b8:	019b      	lsls	r3, r3, #6
 80008ba:	4303      	orrs	r3, r0
 80008bc:	001c      	movs	r4, r3
 80008be:	0123      	lsls	r3, r4, #4
 80008c0:	d579      	bpl.n	80009b6 <__aeabi_fmul+0x23e>
 80008c2:	2301      	movs	r3, #1
 80008c4:	0862      	lsrs	r2, r4, #1
 80008c6:	401c      	ands	r4, r3
 80008c8:	4314      	orrs	r4, r2
 80008ca:	9a01      	ldr	r2, [sp, #4]
 80008cc:	327f      	adds	r2, #127	; 0x7f
 80008ce:	2a00      	cmp	r2, #0
 80008d0:	dd4d      	ble.n	800096e <__aeabi_fmul+0x1f6>
 80008d2:	0763      	lsls	r3, r4, #29
 80008d4:	d004      	beq.n	80008e0 <__aeabi_fmul+0x168>
 80008d6:	230f      	movs	r3, #15
 80008d8:	4023      	ands	r3, r4
 80008da:	2b04      	cmp	r3, #4
 80008dc:	d000      	beq.n	80008e0 <__aeabi_fmul+0x168>
 80008de:	3404      	adds	r4, #4
 80008e0:	0123      	lsls	r3, r4, #4
 80008e2:	d503      	bpl.n	80008ec <__aeabi_fmul+0x174>
 80008e4:	4b3c      	ldr	r3, [pc, #240]	; (80009d8 <__aeabi_fmul+0x260>)
 80008e6:	9a01      	ldr	r2, [sp, #4]
 80008e8:	401c      	ands	r4, r3
 80008ea:	3280      	adds	r2, #128	; 0x80
 80008ec:	2afe      	cmp	r2, #254	; 0xfe
 80008ee:	dcbc      	bgt.n	800086a <__aeabi_fmul+0xf2>
 80008f0:	01a3      	lsls	r3, r4, #6
 80008f2:	0a5b      	lsrs	r3, r3, #9
 80008f4:	b2d2      	uxtb	r2, r2
 80008f6:	e79a      	b.n	800082e <__aeabi_fmul+0xb6>
 80008f8:	230c      	movs	r3, #12
 80008fa:	469a      	mov	sl, r3
 80008fc:	3b09      	subs	r3, #9
 80008fe:	25ff      	movs	r5, #255	; 0xff
 8000900:	469b      	mov	fp, r3
 8000902:	e754      	b.n	80007ae <__aeabi_fmul+0x36>
 8000904:	0018      	movs	r0, r3
 8000906:	f000 f8f3 	bl	8000af0 <__clzsi2>
 800090a:	464a      	mov	r2, r9
 800090c:	1f43      	subs	r3, r0, #5
 800090e:	2576      	movs	r5, #118	; 0x76
 8000910:	409a      	lsls	r2, r3
 8000912:	2300      	movs	r3, #0
 8000914:	426d      	negs	r5, r5
 8000916:	4691      	mov	r9, r2
 8000918:	1a2d      	subs	r5, r5, r0
 800091a:	469a      	mov	sl, r3
 800091c:	469b      	mov	fp, r3
 800091e:	e746      	b.n	80007ae <__aeabi_fmul+0x36>
 8000920:	4652      	mov	r2, sl
 8000922:	2303      	movs	r3, #3
 8000924:	431a      	orrs	r2, r3
 8000926:	4692      	mov	sl, r2
 8000928:	2003      	movs	r0, #3
 800092a:	e750      	b.n	80007ce <__aeabi_fmul+0x56>
 800092c:	0020      	movs	r0, r4
 800092e:	f000 f8df 	bl	8000af0 <__clzsi2>
 8000932:	1f43      	subs	r3, r0, #5
 8000934:	1a2d      	subs	r5, r5, r0
 8000936:	409c      	lsls	r4, r3
 8000938:	3d76      	subs	r5, #118	; 0x76
 800093a:	2000      	movs	r0, #0
 800093c:	e747      	b.n	80007ce <__aeabi_fmul+0x56>
 800093e:	2380      	movs	r3, #128	; 0x80
 8000940:	2700      	movs	r7, #0
 8000942:	03db      	lsls	r3, r3, #15
 8000944:	22ff      	movs	r2, #255	; 0xff
 8000946:	e772      	b.n	800082e <__aeabi_fmul+0xb6>
 8000948:	4642      	mov	r2, r8
 800094a:	e766      	b.n	800081a <__aeabi_fmul+0xa2>
 800094c:	464c      	mov	r4, r9
 800094e:	0032      	movs	r2, r6
 8000950:	4658      	mov	r0, fp
 8000952:	e762      	b.n	800081a <__aeabi_fmul+0xa2>
 8000954:	2380      	movs	r3, #128	; 0x80
 8000956:	464a      	mov	r2, r9
 8000958:	03db      	lsls	r3, r3, #15
 800095a:	421a      	tst	r2, r3
 800095c:	d022      	beq.n	80009a4 <__aeabi_fmul+0x22c>
 800095e:	421c      	tst	r4, r3
 8000960:	d120      	bne.n	80009a4 <__aeabi_fmul+0x22c>
 8000962:	4323      	orrs	r3, r4
 8000964:	025b      	lsls	r3, r3, #9
 8000966:	0a5b      	lsrs	r3, r3, #9
 8000968:	4647      	mov	r7, r8
 800096a:	22ff      	movs	r2, #255	; 0xff
 800096c:	e75f      	b.n	800082e <__aeabi_fmul+0xb6>
 800096e:	2301      	movs	r3, #1
 8000970:	1a9a      	subs	r2, r3, r2
 8000972:	2a1b      	cmp	r2, #27
 8000974:	dc21      	bgt.n	80009ba <__aeabi_fmul+0x242>
 8000976:	0023      	movs	r3, r4
 8000978:	9901      	ldr	r1, [sp, #4]
 800097a:	40d3      	lsrs	r3, r2
 800097c:	319e      	adds	r1, #158	; 0x9e
 800097e:	408c      	lsls	r4, r1
 8000980:	001a      	movs	r2, r3
 8000982:	0023      	movs	r3, r4
 8000984:	1e5c      	subs	r4, r3, #1
 8000986:	41a3      	sbcs	r3, r4
 8000988:	4313      	orrs	r3, r2
 800098a:	075a      	lsls	r2, r3, #29
 800098c:	d004      	beq.n	8000998 <__aeabi_fmul+0x220>
 800098e:	220f      	movs	r2, #15
 8000990:	401a      	ands	r2, r3
 8000992:	2a04      	cmp	r2, #4
 8000994:	d000      	beq.n	8000998 <__aeabi_fmul+0x220>
 8000996:	3304      	adds	r3, #4
 8000998:	015a      	lsls	r2, r3, #5
 800099a:	d411      	bmi.n	80009c0 <__aeabi_fmul+0x248>
 800099c:	019b      	lsls	r3, r3, #6
 800099e:	0a5b      	lsrs	r3, r3, #9
 80009a0:	2200      	movs	r2, #0
 80009a2:	e744      	b.n	800082e <__aeabi_fmul+0xb6>
 80009a4:	2380      	movs	r3, #128	; 0x80
 80009a6:	464a      	mov	r2, r9
 80009a8:	03db      	lsls	r3, r3, #15
 80009aa:	4313      	orrs	r3, r2
 80009ac:	025b      	lsls	r3, r3, #9
 80009ae:	0a5b      	lsrs	r3, r3, #9
 80009b0:	0037      	movs	r7, r6
 80009b2:	22ff      	movs	r2, #255	; 0xff
 80009b4:	e73b      	b.n	800082e <__aeabi_fmul+0xb6>
 80009b6:	9501      	str	r5, [sp, #4]
 80009b8:	e787      	b.n	80008ca <__aeabi_fmul+0x152>
 80009ba:	2200      	movs	r2, #0
 80009bc:	2300      	movs	r3, #0
 80009be:	e736      	b.n	800082e <__aeabi_fmul+0xb6>
 80009c0:	2201      	movs	r2, #1
 80009c2:	2300      	movs	r3, #0
 80009c4:	e733      	b.n	800082e <__aeabi_fmul+0xb6>
 80009c6:	2380      	movs	r3, #128	; 0x80
 80009c8:	03db      	lsls	r3, r3, #15
 80009ca:	4323      	orrs	r3, r4
 80009cc:	025b      	lsls	r3, r3, #9
 80009ce:	0a5b      	lsrs	r3, r3, #9
 80009d0:	22ff      	movs	r2, #255	; 0xff
 80009d2:	e72c      	b.n	800082e <__aeabi_fmul+0xb6>
 80009d4:	08003484 	.word	0x08003484
 80009d8:	f7ffffff 	.word	0xf7ffffff

080009dc <__aeabi_i2f>:
 80009dc:	b570      	push	{r4, r5, r6, lr}
 80009de:	2800      	cmp	r0, #0
 80009e0:	d03d      	beq.n	8000a5e <__aeabi_i2f+0x82>
 80009e2:	17c3      	asrs	r3, r0, #31
 80009e4:	18c5      	adds	r5, r0, r3
 80009e6:	405d      	eors	r5, r3
 80009e8:	0fc4      	lsrs	r4, r0, #31
 80009ea:	0028      	movs	r0, r5
 80009ec:	f000 f880 	bl	8000af0 <__clzsi2>
 80009f0:	229e      	movs	r2, #158	; 0x9e
 80009f2:	1a12      	subs	r2, r2, r0
 80009f4:	2a96      	cmp	r2, #150	; 0x96
 80009f6:	dc07      	bgt.n	8000a08 <__aeabi_i2f+0x2c>
 80009f8:	b2d2      	uxtb	r2, r2
 80009fa:	2808      	cmp	r0, #8
 80009fc:	dd33      	ble.n	8000a66 <__aeabi_i2f+0x8a>
 80009fe:	3808      	subs	r0, #8
 8000a00:	4085      	lsls	r5, r0
 8000a02:	0268      	lsls	r0, r5, #9
 8000a04:	0a40      	lsrs	r0, r0, #9
 8000a06:	e023      	b.n	8000a50 <__aeabi_i2f+0x74>
 8000a08:	2a99      	cmp	r2, #153	; 0x99
 8000a0a:	dd0b      	ble.n	8000a24 <__aeabi_i2f+0x48>
 8000a0c:	2305      	movs	r3, #5
 8000a0e:	0029      	movs	r1, r5
 8000a10:	1a1b      	subs	r3, r3, r0
 8000a12:	40d9      	lsrs	r1, r3
 8000a14:	0003      	movs	r3, r0
 8000a16:	331b      	adds	r3, #27
 8000a18:	409d      	lsls	r5, r3
 8000a1a:	002b      	movs	r3, r5
 8000a1c:	1e5d      	subs	r5, r3, #1
 8000a1e:	41ab      	sbcs	r3, r5
 8000a20:	4319      	orrs	r1, r3
 8000a22:	000d      	movs	r5, r1
 8000a24:	2805      	cmp	r0, #5
 8000a26:	dd01      	ble.n	8000a2c <__aeabi_i2f+0x50>
 8000a28:	1f43      	subs	r3, r0, #5
 8000a2a:	409d      	lsls	r5, r3
 8000a2c:	002b      	movs	r3, r5
 8000a2e:	490f      	ldr	r1, [pc, #60]	; (8000a6c <__aeabi_i2f+0x90>)
 8000a30:	400b      	ands	r3, r1
 8000a32:	076e      	lsls	r6, r5, #29
 8000a34:	d009      	beq.n	8000a4a <__aeabi_i2f+0x6e>
 8000a36:	260f      	movs	r6, #15
 8000a38:	4035      	ands	r5, r6
 8000a3a:	2d04      	cmp	r5, #4
 8000a3c:	d005      	beq.n	8000a4a <__aeabi_i2f+0x6e>
 8000a3e:	3304      	adds	r3, #4
 8000a40:	015d      	lsls	r5, r3, #5
 8000a42:	d502      	bpl.n	8000a4a <__aeabi_i2f+0x6e>
 8000a44:	229f      	movs	r2, #159	; 0x9f
 8000a46:	400b      	ands	r3, r1
 8000a48:	1a12      	subs	r2, r2, r0
 8000a4a:	019b      	lsls	r3, r3, #6
 8000a4c:	0a58      	lsrs	r0, r3, #9
 8000a4e:	b2d2      	uxtb	r2, r2
 8000a50:	0240      	lsls	r0, r0, #9
 8000a52:	05d2      	lsls	r2, r2, #23
 8000a54:	0a40      	lsrs	r0, r0, #9
 8000a56:	07e4      	lsls	r4, r4, #31
 8000a58:	4310      	orrs	r0, r2
 8000a5a:	4320      	orrs	r0, r4
 8000a5c:	bd70      	pop	{r4, r5, r6, pc}
 8000a5e:	2400      	movs	r4, #0
 8000a60:	2200      	movs	r2, #0
 8000a62:	2000      	movs	r0, #0
 8000a64:	e7f4      	b.n	8000a50 <__aeabi_i2f+0x74>
 8000a66:	0268      	lsls	r0, r5, #9
 8000a68:	0a40      	lsrs	r0, r0, #9
 8000a6a:	e7f1      	b.n	8000a50 <__aeabi_i2f+0x74>
 8000a6c:	fbffffff 	.word	0xfbffffff

08000a70 <__aeabi_ui2f>:
 8000a70:	b570      	push	{r4, r5, r6, lr}
 8000a72:	1e04      	subs	r4, r0, #0
 8000a74:	d034      	beq.n	8000ae0 <__aeabi_ui2f+0x70>
 8000a76:	f000 f83b 	bl	8000af0 <__clzsi2>
 8000a7a:	229e      	movs	r2, #158	; 0x9e
 8000a7c:	1a12      	subs	r2, r2, r0
 8000a7e:	2a96      	cmp	r2, #150	; 0x96
 8000a80:	dc07      	bgt.n	8000a92 <__aeabi_ui2f+0x22>
 8000a82:	b2d2      	uxtb	r2, r2
 8000a84:	2808      	cmp	r0, #8
 8000a86:	dd2e      	ble.n	8000ae6 <__aeabi_ui2f+0x76>
 8000a88:	3808      	subs	r0, #8
 8000a8a:	4084      	lsls	r4, r0
 8000a8c:	0260      	lsls	r0, r4, #9
 8000a8e:	0a40      	lsrs	r0, r0, #9
 8000a90:	e021      	b.n	8000ad6 <__aeabi_ui2f+0x66>
 8000a92:	2a99      	cmp	r2, #153	; 0x99
 8000a94:	dd09      	ble.n	8000aaa <__aeabi_ui2f+0x3a>
 8000a96:	0003      	movs	r3, r0
 8000a98:	0021      	movs	r1, r4
 8000a9a:	331b      	adds	r3, #27
 8000a9c:	4099      	lsls	r1, r3
 8000a9e:	1e4b      	subs	r3, r1, #1
 8000aa0:	4199      	sbcs	r1, r3
 8000aa2:	2305      	movs	r3, #5
 8000aa4:	1a1b      	subs	r3, r3, r0
 8000aa6:	40dc      	lsrs	r4, r3
 8000aa8:	430c      	orrs	r4, r1
 8000aaa:	2805      	cmp	r0, #5
 8000aac:	dd01      	ble.n	8000ab2 <__aeabi_ui2f+0x42>
 8000aae:	1f43      	subs	r3, r0, #5
 8000ab0:	409c      	lsls	r4, r3
 8000ab2:	0023      	movs	r3, r4
 8000ab4:	490d      	ldr	r1, [pc, #52]	; (8000aec <__aeabi_ui2f+0x7c>)
 8000ab6:	400b      	ands	r3, r1
 8000ab8:	0765      	lsls	r5, r4, #29
 8000aba:	d009      	beq.n	8000ad0 <__aeabi_ui2f+0x60>
 8000abc:	250f      	movs	r5, #15
 8000abe:	402c      	ands	r4, r5
 8000ac0:	2c04      	cmp	r4, #4
 8000ac2:	d005      	beq.n	8000ad0 <__aeabi_ui2f+0x60>
 8000ac4:	3304      	adds	r3, #4
 8000ac6:	015c      	lsls	r4, r3, #5
 8000ac8:	d502      	bpl.n	8000ad0 <__aeabi_ui2f+0x60>
 8000aca:	229f      	movs	r2, #159	; 0x9f
 8000acc:	400b      	ands	r3, r1
 8000ace:	1a12      	subs	r2, r2, r0
 8000ad0:	019b      	lsls	r3, r3, #6
 8000ad2:	0a58      	lsrs	r0, r3, #9
 8000ad4:	b2d2      	uxtb	r2, r2
 8000ad6:	0240      	lsls	r0, r0, #9
 8000ad8:	05d2      	lsls	r2, r2, #23
 8000ada:	0a40      	lsrs	r0, r0, #9
 8000adc:	4310      	orrs	r0, r2
 8000ade:	bd70      	pop	{r4, r5, r6, pc}
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	2000      	movs	r0, #0
 8000ae4:	e7f7      	b.n	8000ad6 <__aeabi_ui2f+0x66>
 8000ae6:	0260      	lsls	r0, r4, #9
 8000ae8:	0a40      	lsrs	r0, r0, #9
 8000aea:	e7f4      	b.n	8000ad6 <__aeabi_ui2f+0x66>
 8000aec:	fbffffff 	.word	0xfbffffff

08000af0 <__clzsi2>:
 8000af0:	211c      	movs	r1, #28
 8000af2:	2301      	movs	r3, #1
 8000af4:	041b      	lsls	r3, r3, #16
 8000af6:	4298      	cmp	r0, r3
 8000af8:	d301      	bcc.n	8000afe <__clzsi2+0xe>
 8000afa:	0c00      	lsrs	r0, r0, #16
 8000afc:	3910      	subs	r1, #16
 8000afe:	0a1b      	lsrs	r3, r3, #8
 8000b00:	4298      	cmp	r0, r3
 8000b02:	d301      	bcc.n	8000b08 <__clzsi2+0x18>
 8000b04:	0a00      	lsrs	r0, r0, #8
 8000b06:	3908      	subs	r1, #8
 8000b08:	091b      	lsrs	r3, r3, #4
 8000b0a:	4298      	cmp	r0, r3
 8000b0c:	d301      	bcc.n	8000b12 <__clzsi2+0x22>
 8000b0e:	0900      	lsrs	r0, r0, #4
 8000b10:	3904      	subs	r1, #4
 8000b12:	a202      	add	r2, pc, #8	; (adr r2, 8000b1c <__clzsi2+0x2c>)
 8000b14:	5c10      	ldrb	r0, [r2, r0]
 8000b16:	1840      	adds	r0, r0, r1
 8000b18:	4770      	bx	lr
 8000b1a:	46c0      	nop			; (mov r8, r8)
 8000b1c:	02020304 	.word	0x02020304
 8000b20:	01010101 	.word	0x01010101
	...

08000b2c <My_Enter_Stop_Mode_WFI>:
		HAL_GPIO_WritePin(VHTS_GPIO_Port,      VHTS_Pin,      GPIO_PIN_RESET); // Turn OFF VHTS
		HAL_GPIO_DeInit(BLE_WFE_GPIO_Port,     BLE_WFE_Pin);
	}
}

static void My_Enter_Stop_Mode_WFI(void){
 8000b2c:	b510      	push	{r4, lr}
	HAL_NVIC_EnableIRQ(PVD_IRQn);
 8000b2e:	2001      	movs	r0, #1
 8000b30:	f000 ff6a 	bl	8001a08 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_ClearPendingIRQ(PVD_IRQn);
 8000b34:	2001      	movs	r0, #1
 8000b36:	f000 ffa3 	bl	8001a80 <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_ClearPendingIRQ(EXTI4_15_IRQn);
 8000b3a:	2007      	movs	r0, #7
 8000b3c:	f000 ffa0 	bl	8001a80 <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_ClearPendingIRQ(EXTI2_3_IRQn);
 8000b40:	2006      	movs	r0, #6
 8000b42:	f000 ff9d 	bl	8001a80 <HAL_NVIC_ClearPendingIRQ>
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_PVDO);								// CLear Flag
 8000b46:	2210      	movs	r2, #16
 8000b48:	4b06      	ldr	r3, [pc, #24]	; (8000b64 <My_Enter_Stop_Mode_WFI+0x38>)
 8000b4a:	6819      	ldr	r1, [r3, #0]
 8000b4c:	430a      	orrs	r2, r1
 8000b4e:	601a      	str	r2, [r3, #0]
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);									// CLear Flag
 8000b50:	2204      	movs	r2, #4
 8000b52:	6819      	ldr	r1, [r3, #0]
 8000b54:	430a      	orrs	r2, r1
	HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI); // Device in Stop Mode and WFI from PVD and LPTIM1
 8000b56:	2101      	movs	r1, #1
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);									// CLear Flag
 8000b58:	601a      	str	r2, [r3, #0]
	HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI); // Device in Stop Mode and WFI from PVD and LPTIM1
 8000b5a:	0008      	movs	r0, r1
 8000b5c:	f001 ffea 	bl	8002b34 <HAL_PWR_EnterSTOPMode>
}
 8000b60:	bd10      	pop	{r4, pc}
 8000b62:	46c0      	nop			; (mov r8, r8)
 8000b64:	40007000 	.word	0x40007000

08000b68 <My_BLE_WFE_conf>:
static void My_BLE_WFE_conf(uint32_t mode){
 8000b68:	b510      	push	{r4, lr}
 8000b6a:	b086      	sub	sp, #24
 8000b6c:	0004      	movs	r4, r0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b6e:	220c      	movs	r2, #12
 8000b70:	2100      	movs	r1, #0
 8000b72:	a803      	add	r0, sp, #12
 8000b74:	f002 fc32 	bl	80033dc <memset>
	HAL_GPIO_Init(BLE_WFE_GPIO_Port, &GPIO_InitStruct);
 8000b78:	20a0      	movs	r0, #160	; 0xa0
	GPIO_InitStruct.Pin = BLE_WFE_Pin;
 8000b7a:	2308      	movs	r3, #8
	HAL_GPIO_Init(BLE_WFE_GPIO_Port, &GPIO_InitStruct);
 8000b7c:	a901      	add	r1, sp, #4
 8000b7e:	05c0      	lsls	r0, r0, #23
	GPIO_InitStruct.Pin = BLE_WFE_Pin;
 8000b80:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct.Mode = mode;
 8000b82:	9402      	str	r4, [sp, #8]
	HAL_GPIO_Init(BLE_WFE_GPIO_Port, &GPIO_InitStruct);
 8000b84:	f001 f862 	bl	8001c4c <HAL_GPIO_Init>
}
 8000b88:	b006      	add	sp, #24
 8000b8a:	bd10      	pop	{r4, pc}

08000b8c <My_VBLUE_conf>:
static void My_VBLUE_conf(uint32_t mode){
 8000b8c:	b510      	push	{r4, lr}
 8000b8e:	0004      	movs	r4, r0
 8000b90:	b086      	sub	sp, #24
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b92:	220c      	movs	r2, #12
 8000b94:	2100      	movs	r1, #0
 8000b96:	a803      	add	r0, sp, #12
 8000b98:	f002 fc20 	bl	80033dc <memset>
	GPIO_InitStruct.Pin = VBLUE_Pin;
 8000b9c:	2302      	movs	r3, #2
	GPIO_InitStruct.Mode = mode;
 8000b9e:	9402      	str	r4, [sp, #8]
	HAL_GPIO_Init(VBLUE1_GPIO_Port, &GPIO_InitStruct);
 8000ba0:	24a0      	movs	r4, #160	; 0xa0
	HAL_GPIO_Init(VBLUE_GPIO_Port, &GPIO_InitStruct);
 8000ba2:	a901      	add	r1, sp, #4
 8000ba4:	4809      	ldr	r0, [pc, #36]	; (8000bcc <My_VBLUE_conf+0x40>)
	GPIO_InitStruct.Pin = VBLUE_Pin;
 8000ba6:	9301      	str	r3, [sp, #4]
	HAL_GPIO_Init(VBLUE_GPIO_Port, &GPIO_InitStruct);
 8000ba8:	f001 f850 	bl	8001c4c <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = VBLUE1_Pin;
 8000bac:	2380      	movs	r3, #128	; 0x80
	HAL_GPIO_Init(VBLUE1_GPIO_Port, &GPIO_InitStruct);
 8000bae:	05e4      	lsls	r4, r4, #23
 8000bb0:	a901      	add	r1, sp, #4
 8000bb2:	0020      	movs	r0, r4
	GPIO_InitStruct.Pin = VBLUE1_Pin;
 8000bb4:	9301      	str	r3, [sp, #4]
	HAL_GPIO_Init(VBLUE1_GPIO_Port, &GPIO_InitStruct);
 8000bb6:	f001 f849 	bl	8001c4c <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = VBLUE2_Pin;
 8000bba:	2340      	movs	r3, #64	; 0x40
	HAL_GPIO_Init(VBLUE2_GPIO_Port, &GPIO_InitStruct);
 8000bbc:	a901      	add	r1, sp, #4
 8000bbe:	0020      	movs	r0, r4
	GPIO_InitStruct.Pin = VBLUE2_Pin;
 8000bc0:	9301      	str	r3, [sp, #4]
	HAL_GPIO_Init(VBLUE2_GPIO_Port, &GPIO_InitStruct);
 8000bc2:	f001 f843 	bl	8001c4c <HAL_GPIO_Init>
}
 8000bc6:	b006      	add	sp, #24
 8000bc8:	bd10      	pop	{r4, pc}
 8000bca:	46c0      	nop			; (mov r8, r8)
 8000bcc:	50000400 	.word	0x50000400

08000bd0 <My_hts221_config>:
static void My_hts221_config(void){ // Reads the calibration value and Memorize in the MCU Flash Memory.
 8000bd0:	b570      	push	{r4, r5, r6, lr}
	if (*((uint32_t*)hts221_temp_adc_cal_value) == 0 && *((uint32_t*)hts221_temp_slope) == 0) {                          // 1) Check if the 1st Word of the EEPROM Memory is Empty
 8000bd2:	4c14      	ldr	r4, [pc, #80]	; (8000c24 <My_hts221_config+0x54>)
 8000bd4:	6823      	ldr	r3, [r4, #0]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d10e      	bne.n	8000bfa <My_hts221_config+0x2a>
 8000bdc:	4d12      	ldr	r5, [pc, #72]	; (8000c28 <My_hts221_config+0x58>)
 8000bde:	682b      	ldr	r3, [r5, #0]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d109      	bne.n	8000bfa <My_hts221_config+0x2a>
		HAL_FLASHEx_DATAEEPROM_Unlock();                                						                         // 2) UnLock the EEPROM
 8000be6:	f000 ffe5 	bl	8001bb4 <HAL_FLASHEx_DATAEEPROM_Unlock>
		hts221_read_temperature_cal_values(hts221_temp_adc_cal_value, hts221_temp_deg_cal_value, hts221_temp_slope);     // 3) Read Temperature Calibration Values
 8000bea:	4b10      	ldr	r3, [pc, #64]	; (8000c2c <My_hts221_config+0x5c>)
 8000bec:	682a      	ldr	r2, [r5, #0]
 8000bee:	6819      	ldr	r1, [r3, #0]
 8000bf0:	6820      	ldr	r0, [r4, #0]
 8000bf2:	f000 fbab 	bl	800134c <hts221_read_temperature_cal_values>
		HAL_FLASHEx_DATAEEPROM_Lock();                                							                         // 4) Lock the EEPROM
 8000bf6:	f000 fff5 	bl	8001be4 <HAL_FLASHEx_DATAEEPROM_Lock>
	if (*((uint32_t*)hts221_humidity_adc_cal_value) == 0 && *((uint32_t*)hts221_humidity_slope) == 0) {   	              // 1) Check if the 1st Word of the EEPROM Memory is Empty
 8000bfa:	4c0d      	ldr	r4, [pc, #52]	; (8000c30 <My_hts221_config+0x60>)
 8000bfc:	6823      	ldr	r3, [r4, #0]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d10e      	bne.n	8000c22 <My_hts221_config+0x52>
 8000c04:	4d0b      	ldr	r5, [pc, #44]	; (8000c34 <My_hts221_config+0x64>)
 8000c06:	682b      	ldr	r3, [r5, #0]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d109      	bne.n	8000c22 <My_hts221_config+0x52>
		HAL_FLASHEx_DATAEEPROM_Unlock();                                						                          // 2) UnLock the EEPROM
 8000c0e:	f000 ffd1 	bl	8001bb4 <HAL_FLASHEx_DATAEEPROM_Unlock>
		hts221_read_humidity_cal_values(hts221_humidity_adc_cal_value, hts221_humidity_cal_value, hts221_humidity_slope); // Read the Humidity Calibration Values
 8000c12:	4b09      	ldr	r3, [pc, #36]	; (8000c38 <My_hts221_config+0x68>)
 8000c14:	682a      	ldr	r2, [r5, #0]
 8000c16:	6819      	ldr	r1, [r3, #0]
 8000c18:	6820      	ldr	r0, [r4, #0]
 8000c1a:	f000 fc31 	bl	8001480 <hts221_read_humidity_cal_values>
		HAL_FLASHEx_DATAEEPROM_Lock();                                							                          // 5) Lock the EEPROM
 8000c1e:	f000 ffe1 	bl	8001be4 <HAL_FLASHEx_DATAEEPROM_Lock>
}
 8000c22:	bd70      	pop	{r4, r5, r6, pc}
 8000c24:	20000060 	.word	0x20000060
 8000c28:	2000005c 	.word	0x2000005c
 8000c2c:	2000006c 	.word	0x2000006c
 8000c30:	20000068 	.word	0x20000068
 8000c34:	20000070 	.word	0x20000070
 8000c38:	20000064 	.word	0x20000064

08000c3c <My_Power_Management.part.1>:
static void My_Power_Management(uint8_t ON, uint8_t TX, uint8_t HTS){ // Turns On Sensors and BLE with transmission
 8000c3c:	b570      	push	{r4, r5, r6, lr}
 8000c3e:	0005      	movs	r5, r0
		My_BLE_WFE_conf(GPIO_MODE_IT_FALLING); // Configure BLE_WFE GPIO as External Interrupt Falling
 8000c40:	481e      	ldr	r0, [pc, #120]	; (8000cbc <My_Power_Management.part.1+0x80>)
static void My_Power_Management(uint8_t ON, uint8_t TX, uint8_t HTS){ // Turns On Sensors and BLE with transmission
 8000c42:	000c      	movs	r4, r1
		My_BLE_WFE_conf(GPIO_MODE_IT_FALLING); // Configure BLE_WFE GPIO as External Interrupt Falling
 8000c44:	f7ff ff90 	bl	8000b68 <My_BLE_WFE_conf>
		My_VBLUE_conf(GPIO_MODE_OUTPUT_PP);    // Configure VBLUE, VBLUE1 and VBLUE2 in Output PP
 8000c48:	2001      	movs	r0, #1
 8000c4a:	f7ff ff9f 	bl	8000b8c <My_VBLUE_conf>
			HAL_GPIO_WritePin(BLE_TXE_GPIO_Port, BLE_TXE_Pin, GPIO_PIN_SET);   // Enable the BLE to transmit
 8000c4e:	002a      	movs	r2, r5
		if (TX == 1){
 8000c50:	2d01      	cmp	r5, #1
 8000c52:	d000      	beq.n	8000c56 <My_Power_Management.part.1+0x1a>
			HAL_GPIO_WritePin(BLE_TXE_GPIO_Port, BLE_TXE_Pin, GPIO_PIN_RESET); //Disable The BLE to transmit
 8000c54:	2200      	movs	r2, #0
 8000c56:	2180      	movs	r1, #128	; 0x80
 8000c58:	4819      	ldr	r0, [pc, #100]	; (8000cc0 <My_Power_Management.part.1+0x84>)
 8000c5a:	0209      	lsls	r1, r1, #8
 8000c5c:	f001 f91e 	bl	8001e9c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(VHTS_GPIO_Port,    VHTS_Pin,    GPIO_PIN_SET);   // Turn on HTS221
 8000c60:	0022      	movs	r2, r4
		if (HTS == 1){
 8000c62:	2c01      	cmp	r4, #1
 8000c64:	d000      	beq.n	8000c68 <My_Power_Management.part.1+0x2c>
			HAL_GPIO_WritePin(VHTS_GPIO_Port,    VHTS_Pin,    GPIO_PIN_RESET); // Turn off HTS221
 8000c66:	2200      	movs	r2, #0
 8000c68:	20a0      	movs	r0, #160	; 0xa0
 8000c6a:	2120      	movs	r1, #32
 8000c6c:	05c0      	lsls	r0, r0, #23
 8000c6e:	f001 f915 	bl	8001e9c <HAL_GPIO_WritePin>
		HAL_NVIC_ClearPendingIRQ(EXTI2_3_IRQn);
 8000c72:	2006      	movs	r0, #6
 8000c74:	f000 ff04 	bl	8001a80 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8000c78:	2006      	movs	r0, #6
 8000c7a:	f000 fec5 	bl	8001a08 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_ClearPendingIRQ(EXTI2_3_IRQn);
 8000c7e:	2006      	movs	r0, #6
 8000c80:	f000 fefe 	bl	8001a80 <HAL_NVIC_ClearPendingIRQ>
		HAL_GPIO_WritePin(VBLUE_GPIO_Port,   VBLUE_Pin,   GPIO_PIN_SET);   	   // Turn on the BLE IC
 8000c84:	2201      	movs	r2, #1
 8000c86:	2102      	movs	r1, #2
 8000c88:	480e      	ldr	r0, [pc, #56]	; (8000cc4 <My_Power_Management.part.1+0x88>)
 8000c8a:	f001 f907 	bl	8001e9c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(VBLUE1_GPIO_Port,  VBLUE1_Pin,  GPIO_PIN_SET);   	   // Turn on the BLE IC
 8000c8e:	20a0      	movs	r0, #160	; 0xa0
 8000c90:	2201      	movs	r2, #1
 8000c92:	2180      	movs	r1, #128	; 0x80
 8000c94:	05c0      	lsls	r0, r0, #23
 8000c96:	f001 f901 	bl	8001e9c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(VBLUE2_GPIO_Port,  VBLUE2_Pin,  GPIO_PIN_SET);   	   // Turn on the BLE IC
 8000c9a:	20a0      	movs	r0, #160	; 0xa0
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	2140      	movs	r1, #64	; 0x40
 8000ca0:	05c0      	lsls	r0, r0, #23
 8000ca2:	f001 f8fb 	bl	8001e9c <HAL_GPIO_WritePin>
		HAL_Delay(1); 														   // Reset must be released at least 30 usec after the VBLUE is up and stable
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	f000 fe72 	bl	8001990 <HAL_Delay>
		HAL_GPIO_WritePin(BLE_RST_GPIO_Port, BLE_RST_Pin, GPIO_PIN_SET);  	   // Un-Reset the  BLE IC
 8000cac:	2180      	movs	r1, #128	; 0x80
 8000cae:	2201      	movs	r2, #1
 8000cb0:	01c9      	lsls	r1, r1, #7
 8000cb2:	4803      	ldr	r0, [pc, #12]	; (8000cc0 <My_Power_Management.part.1+0x84>)
 8000cb4:	f001 f8f2 	bl	8001e9c <HAL_GPIO_WritePin>
}
 8000cb8:	bd70      	pop	{r4, r5, r6, pc}
 8000cba:	46c0      	nop			; (mov r8, r8)
 8000cbc:	10210000 	.word	0x10210000
 8000cc0:	50000800 	.word	0x50000800
 8000cc4:	50000400 	.word	0x50000400

08000cc8 <My_Power_Management.constprop.2>:
static void My_Power_Management(uint8_t ON, uint8_t TX, uint8_t HTS){ // Turns On Sensors and BLE with transmission
 8000cc8:	b570      	push	{r4, r5, r6, lr}
		cnt_wfe = 0;
 8000cca:	2400      	movs	r4, #0
 8000ccc:	4b17      	ldr	r3, [pc, #92]	; (8000d2c <My_Power_Management.constprop.2+0x64>)
		My_BLE_WFE_conf(GPIO_MODE_ANALOG);  // Configure BLE_WFE GPIO as Input
 8000cce:	2003      	movs	r0, #3
		cnt_wfe = 0;
 8000cd0:	701c      	strb	r4, [r3, #0]
		My_BLE_WFE_conf(GPIO_MODE_ANALOG);  // Configure BLE_WFE GPIO as Input
 8000cd2:	f7ff ff49 	bl	8000b68 <My_BLE_WFE_conf>
		My_VBLUE_conf(GPIO_MODE_ANALOG);   // Configure VBLUE, VBLUE1 and VBLUE2 in Output PP
 8000cd6:	2003      	movs	r0, #3
 8000cd8:	f7ff ff58 	bl	8000b8c <My_VBLUE_conf>
		HAL_GPIO_WritePin(BLE_TXE_GPIO_Port,   BLE_TXE_Pin,   GPIO_PIN_RESET); // Turn OFF the BLE_TXE signal (Back to Harvest)
 8000cdc:	2180      	movs	r1, #128	; 0x80
		HAL_GPIO_WritePin(VBLUE1_GPIO_Port,    VBLUE1_Pin,    GPIO_PIN_RESET); // Turn OFF the BLE (Back to Harvest)
 8000cde:	25a0      	movs	r5, #160	; 0xa0
		HAL_GPIO_WritePin(BLE_TXE_GPIO_Port,   BLE_TXE_Pin,   GPIO_PIN_RESET); // Turn OFF the BLE_TXE signal (Back to Harvest)
 8000ce0:	4e13      	ldr	r6, [pc, #76]	; (8000d30 <My_Power_Management.constprop.2+0x68>)
 8000ce2:	0022      	movs	r2, r4
 8000ce4:	0030      	movs	r0, r6
 8000ce6:	0209      	lsls	r1, r1, #8
		HAL_GPIO_WritePin(VBLUE1_GPIO_Port,    VBLUE1_Pin,    GPIO_PIN_RESET); // Turn OFF the BLE (Back to Harvest)
 8000ce8:	05ed      	lsls	r5, r5, #23
		HAL_GPIO_WritePin(BLE_TXE_GPIO_Port,   BLE_TXE_Pin,   GPIO_PIN_RESET); // Turn OFF the BLE_TXE signal (Back to Harvest)
 8000cea:	f001 f8d7 	bl	8001e9c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(VBLUE_GPIO_Port,     VBLUE_Pin,     GPIO_PIN_RESET); // Turn OFF the BLE (Back to Harvest)
 8000cee:	0022      	movs	r2, r4
 8000cf0:	2102      	movs	r1, #2
 8000cf2:	4810      	ldr	r0, [pc, #64]	; (8000d34 <My_Power_Management.constprop.2+0x6c>)
 8000cf4:	f001 f8d2 	bl	8001e9c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(VBLUE1_GPIO_Port,    VBLUE1_Pin,    GPIO_PIN_RESET); // Turn OFF the BLE (Back to Harvest)
 8000cf8:	0028      	movs	r0, r5
 8000cfa:	0022      	movs	r2, r4
 8000cfc:	2180      	movs	r1, #128	; 0x80
 8000cfe:	f001 f8cd 	bl	8001e9c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(VBLUE2_GPIO_Port,    VBLUE2_Pin,    GPIO_PIN_RESET); // Turn OFF the BLE (Back to Harvest)
 8000d02:	0028      	movs	r0, r5
 8000d04:	0022      	movs	r2, r4
 8000d06:	2140      	movs	r1, #64	; 0x40
 8000d08:	f001 f8c8 	bl	8001e9c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BLE_RST_GPIO_Port,   BLE_RST_Pin,   GPIO_PIN_RESET); // Reset the    BLE (Back to Harvest)
 8000d0c:	2180      	movs	r1, #128	; 0x80
 8000d0e:	0030      	movs	r0, r6
 8000d10:	0022      	movs	r2, r4
 8000d12:	01c9      	lsls	r1, r1, #7
 8000d14:	f001 f8c2 	bl	8001e9c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(VHTS_GPIO_Port,      VHTS_Pin,      GPIO_PIN_RESET); // Turn OFF VHTS
 8000d18:	0028      	movs	r0, r5
 8000d1a:	0022      	movs	r2, r4
 8000d1c:	2120      	movs	r1, #32
 8000d1e:	f001 f8bd 	bl	8001e9c <HAL_GPIO_WritePin>
		HAL_GPIO_DeInit(BLE_WFE_GPIO_Port,     BLE_WFE_Pin);
 8000d22:	0028      	movs	r0, r5
 8000d24:	2108      	movs	r1, #8
 8000d26:	f001 f843 	bl	8001db0 <HAL_GPIO_DeInit>
}
 8000d2a:	bd70      	pop	{r4, r5, r6, pc}
 8000d2c:	2000002d 	.word	0x2000002d
 8000d30:	50000800 	.word	0x50000800
 8000d34:	50000400 	.word	0x50000400

08000d38 <My_Write_Mcu_Flash>:
void My_Write_Mcu_Flash(void){
 8000d38:	b513      	push	{r0, r1, r4, lr}
	if (HAL_GPIO_ReadPin(BLE_WFE_GPIO_Port, BLE_WFE_Pin) == 0){            // Check if BLE is ready to send Data
 8000d3a:	20a0      	movs	r0, #160	; 0xa0
 8000d3c:	2108      	movs	r1, #8
 8000d3e:	05c0      	lsls	r0, r0, #23
 8000d40:	f001 f8a6 	bl	8001e90 <HAL_GPIO_ReadPin>
 8000d44:	2800      	cmp	r0, #0
 8000d46:	d138      	bne.n	8000dba <My_Write_Mcu_Flash+0x82>
		__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);     // Raise Regulator Voltage to bias Flash Memory
 8000d48:	491c      	ldr	r1, [pc, #112]	; (8000dbc <My_Write_Mcu_Flash+0x84>)
 8000d4a:	4a1d      	ldr	r2, [pc, #116]	; (8000dc0 <My_Write_Mcu_Flash+0x88>)
 8000d4c:	680b      	ldr	r3, [r1, #0]
		HAL_I2C_DeInit(&hi2c1);											   // De Initialize I2C
 8000d4e:	4c1d      	ldr	r4, [pc, #116]	; (8000dc4 <My_Write_Mcu_Flash+0x8c>)
		__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);     // Raise Regulator Voltage to bias Flash Memory
 8000d50:	401a      	ands	r2, r3
 8000d52:	2380      	movs	r3, #128	; 0x80
 8000d54:	011b      	lsls	r3, r3, #4
 8000d56:	4313      	orrs	r3, r2
 8000d58:	600b      	str	r3, [r1, #0]
		HAL_I2C_DeInit(&hi2c1);											   // De Initialize I2C
 8000d5a:	0020      	movs	r0, r4
 8000d5c:	f001 fa8e 	bl	800227c <HAL_I2C_DeInit>
		hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;				   // Disable Clock Stretching
 8000d60:	2380      	movs	r3, #128	; 0x80
		HAL_GPIO_WritePin(VHTS_GPIO_Port,    VHTS_Pin,    GPIO_PIN_SET);   // Turn on HTS221
 8000d62:	20a0      	movs	r0, #160	; 0xa0
		hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;				   // Disable Clock Stretching
 8000d64:	029b      	lsls	r3, r3, #10
		HAL_GPIO_WritePin(VHTS_GPIO_Port,    VHTS_Pin,    GPIO_PIN_SET);   // Turn on HTS221
 8000d66:	2201      	movs	r2, #1
 8000d68:	2120      	movs	r1, #32
 8000d6a:	05c0      	lsls	r0, r0, #23
		hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;				   // Disable Clock Stretching
 8000d6c:	6223      	str	r3, [r4, #32]
		HAL_GPIO_WritePin(VHTS_GPIO_Port,    VHTS_Pin,    GPIO_PIN_SET);   // Turn on HTS221
 8000d6e:	f001 f895 	bl	8001e9c <HAL_GPIO_WritePin>
		HAL_I2C_Init(&hi2c1);											   // Initialize I2C
 8000d72:	0020      	movs	r0, r4
 8000d74:	f001 fa2c 	bl	80021d0 <HAL_I2C_Init>
		HAL_FLASHEx_DATAEEPROM_Unlock();								   // Unlock The Flash
 8000d78:	f000 ff1c 	bl	8001bb4 <HAL_FLASHEx_DATAEEPROM_Unlock>
		hal_error = My_I2C_Slave_Receive(&hi2c1, transmission_params, NOD_BLE, 20, BLE_TXE_GPIO_Port, BLE_TXE_Pin);
 8000d7c:	2380      	movs	r3, #128	; 0x80
 8000d7e:	021b      	lsls	r3, r3, #8
 8000d80:	9301      	str	r3, [sp, #4]
 8000d82:	4b11      	ldr	r3, [pc, #68]	; (8000dc8 <My_Write_Mcu_Flash+0x90>)
 8000d84:	4911      	ldr	r1, [pc, #68]	; (8000dcc <My_Write_Mcu_Flash+0x94>)
 8000d86:	9300      	str	r3, [sp, #0]
 8000d88:	2202      	movs	r2, #2
 8000d8a:	2314      	movs	r3, #20
 8000d8c:	6809      	ldr	r1, [r1, #0]
 8000d8e:	0020      	movs	r0, r4
 8000d90:	f001 fca8 	bl	80026e4 <My_I2C_Slave_Receive>
 8000d94:	4b0e      	ldr	r3, [pc, #56]	; (8000dd0 <My_Write_Mcu_Flash+0x98>)
 8000d96:	6018      	str	r0, [r3, #0]
		while (HAL_GPIO_ReadPin(BTH_GPIO_Port, BTH_Pin) == 0);             // Waiting for END of Transmission from BLE
 8000d98:	20a0      	movs	r0, #160	; 0xa0
 8000d9a:	2110      	movs	r1, #16
 8000d9c:	05c0      	lsls	r0, r0, #23
 8000d9e:	f001 f877 	bl	8001e90 <HAL_GPIO_ReadPin>
 8000da2:	2800      	cmp	r0, #0
 8000da4:	d0f8      	beq.n	8000d98 <My_Write_Mcu_Flash+0x60>
		HAL_FLASHEx_DATAEEPROM_Lock();									   // Lock the Flash
 8000da6:	f000 ff1d 	bl	8001be4 <HAL_FLASHEx_DATAEEPROM_Lock>
		HAL_GPIO_WritePin(VHTS_GPIO_Port,    VHTS_Pin,    GPIO_PIN_RESET); // Turn off HTS221
 8000daa:	20a0      	movs	r0, #160	; 0xa0
 8000dac:	2200      	movs	r2, #0
 8000dae:	2120      	movs	r1, #32
 8000db0:	05c0      	lsls	r0, r0, #23
 8000db2:	f001 f873 	bl	8001e9c <HAL_GPIO_WritePin>
		HAL_NVIC_SystemReset();											   // Reset the MCU
 8000db6:	f000 fe3b 	bl	8001a30 <HAL_NVIC_SystemReset>
}
 8000dba:	bd13      	pop	{r0, r1, r4, pc}
 8000dbc:	40007000 	.word	0x40007000
 8000dc0:	ffffe7ff 	.word	0xffffe7ff
 8000dc4:	2000007c 	.word	0x2000007c
 8000dc8:	50000800 	.word	0x50000800
 8000dcc:	20000074 	.word	0x20000074
 8000dd0:	20000030 	.word	0x20000030

08000dd4 <My_Main>:
	sConfigPVD.PVDLevel = PWR_PVDLEVEL; // Set PVD Threshold
	sConfigPVD.Mode = PWR_PVD_MODE_IT;	// Set PVD to detect Rising Vdd and set Interrupt
	HAL_PWR_ConfigPVD(&sConfigPVD);		// Configure PVD
}

void My_Main(void){
 8000dd4:	b570      	push	{r4, r5, r6, lr}

	HAL_I2C_MspDeInit(&hi2c1); // Deinitialize I2C
 8000dd6:	481f      	ldr	r0, [pc, #124]	; (8000e54 <My_Main+0x80>)
 8000dd8:	f000 fc58 	bl	800168c <HAL_I2C_MspDeInit>
	sConfigPVD.PVDLevel = PWR_PVDLEVEL; // Set PVD Threshold
 8000ddc:	23a0      	movs	r3, #160	; 0xa0
 8000dde:	481e      	ldr	r0, [pc, #120]	; (8000e58 <My_Main+0x84>)
	hts221_humidity_cal_value     = (uint16_t*)(DATA_EEPROM_BASE + 20); // (0x08080018)
	hts221_humidity_slope         = (float*)(DATA_EEPROM_BASE + 24);    // (0x0808001C)
#endif

#if FROM_FLASH
	transmission_params = (uint8_t*)DATA_EEPROM_BASE; 											// DATA_EEPROM_BASE = 0x08080000 Address of the 1st Byte of the EEPPROM MEMORY
 8000de0:	4c1e      	ldr	r4, [pc, #120]	; (8000e5c <My_Main+0x88>)
	sConfigPVD.PVDLevel = PWR_PVDLEVEL; // Set PVD Threshold
 8000de2:	6003      	str	r3, [r0, #0]
	sConfigPVD.Mode = PWR_PVD_MODE_IT;	// Set PVD to detect Rising Vdd and set Interrupt
 8000de4:	4b1e      	ldr	r3, [pc, #120]	; (8000e60 <My_Main+0x8c>)
 8000de6:	6043      	str	r3, [r0, #4]
	HAL_PWR_ConfigPVD(&sConfigPVD);		// Configure PVD
 8000de8:	f001 fe62 	bl	8002ab0 <HAL_PWR_ConfigPVD>
	HAL_PWR_EnablePVD();	          			         // Enable PVD
 8000dec:	f001 fe9a 	bl	8002b24 <HAL_PWR_EnablePVD>
	hts221_temp_adc_cal_value = (uint16_t*)(DATA_EEPROM_BASE + 4); // (0x08080004)
 8000df0:	4b1c      	ldr	r3, [pc, #112]	; (8000e64 <My_Main+0x90>)
 8000df2:	4a1d      	ldr	r2, [pc, #116]	; (8000e68 <My_Main+0x94>)

	if (*((uint32_t*)transmission_params) == 0) {   										    // Check if the 1st Word of the EEPROM Memory is Empty
 8000df4:	6825      	ldr	r5, [r4, #0]
	hts221_temp_adc_cal_value = (uint16_t*)(DATA_EEPROM_BASE + 4); // (0x08080004)
 8000df6:	601a      	str	r2, [r3, #0]
	hts221_temp_deg_cal_value = (uint16_t*)(DATA_EEPROM_BASE + 8); // (0x0808000C)
 8000df8:	4b1c      	ldr	r3, [pc, #112]	; (8000e6c <My_Main+0x98>)
 8000dfa:	4a1d      	ldr	r2, [pc, #116]	; (8000e70 <My_Main+0x9c>)
 8000dfc:	601a      	str	r2, [r3, #0]
	hts221_temp_slope         = (float*)(DATA_EEPROM_BASE + 12);   // (0x08080010)
 8000dfe:	4b1d      	ldr	r3, [pc, #116]	; (8000e74 <My_Main+0xa0>)
 8000e00:	4a1d      	ldr	r2, [pc, #116]	; (8000e78 <My_Main+0xa4>)
 8000e02:	601a      	str	r2, [r3, #0]
	hts221_humidity_adc_cal_value = (uint16_t*)(DATA_EEPROM_BASE + 16); // (0x08080014)
 8000e04:	4b1d      	ldr	r3, [pc, #116]	; (8000e7c <My_Main+0xa8>)
 8000e06:	4a1e      	ldr	r2, [pc, #120]	; (8000e80 <My_Main+0xac>)
 8000e08:	601a      	str	r2, [r3, #0]
	hts221_humidity_cal_value     = (uint16_t*)(DATA_EEPROM_BASE + 20); // (0x08080018)
 8000e0a:	4b1e      	ldr	r3, [pc, #120]	; (8000e84 <My_Main+0xb0>)
 8000e0c:	4a1e      	ldr	r2, [pc, #120]	; (8000e88 <My_Main+0xb4>)
 8000e0e:	601a      	str	r2, [r3, #0]
	hts221_humidity_slope         = (float*)(DATA_EEPROM_BASE + 24);    // (0x0808001C)
 8000e10:	4b1e      	ldr	r3, [pc, #120]	; (8000e8c <My_Main+0xb8>)
 8000e12:	4a1f      	ldr	r2, [pc, #124]	; (8000e90 <My_Main+0xbc>)
 8000e14:	601a      	str	r2, [r3, #0]
	transmission_params = (uint8_t*)DATA_EEPROM_BASE; 											// DATA_EEPROM_BASE = 0x08080000 Address of the 1st Byte of the EEPPROM MEMORY
 8000e16:	4b1f      	ldr	r3, [pc, #124]	; (8000e94 <My_Main+0xc0>)
 8000e18:	601c      	str	r4, [r3, #0]
	if (*((uint32_t*)transmission_params) == 0) {   										    // Check if the 1st Word of the EEPROM Memory is Empty
 8000e1a:	2d00      	cmp	r5, #0
 8000e1c:	d112      	bne.n	8000e44 <My_Main+0x70>
		HAL_FLASHEx_DATAEEPROM_Unlock();                                						// UnLock the EEPROM
 8000e1e:	f000 fec9 	bl	8001bb4 <HAL_FLASHEx_DATAEEPROM_Unlock>
		HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_BYTE, DATA_EEPROM_BASE, NTB);      // Program the 1st BYTE of the EEPROM with the NTB value
 8000e22:	2206      	movs	r2, #6
 8000e24:	0021      	movs	r1, r4
 8000e26:	0028      	movs	r0, r5
 8000e28:	f000 fee6 	bl	8001bf8 <HAL_FLASHEx_DATAEEPROM_Program>
		HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_BYTE, DATA_EEPROM_BASE + 1, RTPS); // Program the 2nd BYTE of the EEPROM with the RTPS value
 8000e2c:	2214      	movs	r2, #20
 8000e2e:	491a      	ldr	r1, [pc, #104]	; (8000e98 <My_Main+0xc4>)
 8000e30:	0028      	movs	r0, r5
 8000e32:	f000 fee1 	bl	8001bf8 <HAL_FLASHEx_DATAEEPROM_Program>
		HAL_FLASHEx_DATAEEPROM_Lock();                                							// Lock the EEPROM
 8000e36:	f000 fed5 	bl	8001be4 <HAL_FLASHEx_DATAEEPROM_Lock>
#else
	rtps = RTPS;
	ntb  = NTB;
#endif

	HAL_LPTIM_Counter_Start(&hlptim1, ARR);  // Start the LPTIM1 Counter
 8000e3a:	4918      	ldr	r1, [pc, #96]	; (8000e9c <My_Main+0xc8>)
 8000e3c:	4818      	ldr	r0, [pc, #96]	; (8000ea0 <My_Main+0xcc>)
 8000e3e:	f001 fd8d 	bl	800295c <HAL_LPTIM_Counter_Start>

}
 8000e42:	bd70      	pop	{r4, r5, r6, pc}
		ntb  = *(transmission_params);      // Extracting ntb From Flash
 8000e44:	7822      	ldrb	r2, [r4, #0]
 8000e46:	4b17      	ldr	r3, [pc, #92]	; (8000ea4 <My_Main+0xd0>)
 8000e48:	701a      	strb	r2, [r3, #0]
		rtps = *(transmission_params + 1);	// Extracting rtps From Flash
 8000e4a:	7862      	ldrb	r2, [r4, #1]
 8000e4c:	4b16      	ldr	r3, [pc, #88]	; (8000ea8 <My_Main+0xd4>)
 8000e4e:	701a      	strb	r2, [r3, #0]
 8000e50:	e7f3      	b.n	8000e3a <My_Main+0x66>
 8000e52:	46c0      	nop			; (mov r8, r8)
 8000e54:	2000007c 	.word	0x2000007c
 8000e58:	20000054 	.word	0x20000054
 8000e5c:	08080000 	.word	0x08080000
 8000e60:	00010002 	.word	0x00010002
 8000e64:	20000060 	.word	0x20000060
 8000e68:	08080004 	.word	0x08080004
 8000e6c:	2000006c 	.word	0x2000006c
 8000e70:	08080008 	.word	0x08080008
 8000e74:	2000005c 	.word	0x2000005c
 8000e78:	0808000c 	.word	0x0808000c
 8000e7c:	20000068 	.word	0x20000068
 8000e80:	08080010 	.word	0x08080010
 8000e84:	20000064 	.word	0x20000064
 8000e88:	08080014 	.word	0x08080014
 8000e8c:	20000070 	.word	0x20000070
 8000e90:	08080018 	.word	0x08080018
 8000e94:	20000074 	.word	0x20000074
 8000e98:	08080001 	.word	0x08080001
 8000e9c:	0000ffff 	.word	0x0000ffff
 8000ea0:	200000c8 	.word	0x200000c8
 8000ea4:	20000034 	.word	0x20000034
 8000ea8:	20000038 	.word	0x20000038

08000eac <My_While>:

void My_While(void){
 8000eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	sConfigPVD.Mode = PWR_PVD_MODE_IT;	// Set PVD to detect Rising Vdd and set Interrupt
 8000eae:	2300      	movs	r3, #0
	sConfigPVD.PVDLevel = PWR_PVDLEVEL; // Set PVD Threshold
 8000eb0:	25c0      	movs	r5, #192	; 0xc0
 8000eb2:	4c98      	ldr	r4, [pc, #608]	; (8001114 <My_While+0x268>)
	HAL_PWR_ConfigPVD(&sConfigPVD);		// Configure PVD
 8000eb4:	0020      	movs	r0, r4
	sConfigPVD.Mode = PWR_PVD_MODE_IT;	// Set PVD to detect Rising Vdd and set Interrupt
 8000eb6:	6063      	str	r3, [r4, #4]
	sConfigPVD.PVDLevel = PWR_PVDLEVEL; // Set PVD Threshold
 8000eb8:	6025      	str	r5, [r4, #0]
	HAL_PWR_ConfigPVD(&sConfigPVD);		// Configure PVD
 8000eba:	f001 fdf9 	bl	8002ab0 <HAL_PWR_ConfigPVD>

	My_Set_PVD(PWR_PVDLEVEL_6, PWR_PVD_MODE_NORMAL);        // Set PVD at the Highest Voltage and Normal Mode

	if(__HAL_PWR_GET_FLAG(PWR_FLAG_PVDO) == 0){             // If Vstor is > 3.0 Volt
 8000ebe:	2204      	movs	r2, #4
 8000ec0:	4b95      	ldr	r3, [pc, #596]	; (8001118 <My_While+0x26c>)
 8000ec2:	6858      	ldr	r0, [r3, #4]
 8000ec4:	4010      	ands	r0, r2
 8000ec6:	d000      	beq.n	8000eca <My_While+0x1e>
 8000ec8:	e07d      	b.n	8000fc6 <My_While+0x11a>
 8000eca:	2101      	movs	r1, #1
 8000ecc:	f7ff feb6 	bl	8000c3c <My_Power_Management.part.1>
		My_Power_Management(1,0,1);			   			    // Turn Power On, BLE, No Tx, Sensors
		HAL_I2C_MspInit(&hi2c1);				 			// Initialize I2C
 8000ed0:	4d92      	ldr	r5, [pc, #584]	; (800111c <My_While+0x270>)
 8000ed2:	0028      	movs	r0, r5
 8000ed4:	f000 fbac 	bl	8001630 <HAL_I2C_MspInit>
		My_hts221_config();						 			// Fetch data from hts221 sensor (one time)
 8000ed8:	f7ff fe7a 	bl	8000bd0 <My_hts221_config>
		HAL_I2C_MspDeInit(&hi2c1);               			// Deinitialize I2C
 8000edc:	0028      	movs	r0, r5
 8000ede:	f000 fbd5 	bl	800168c <HAL_I2C_MspDeInit>
	sConfigPVD.PVDLevel = PWR_PVDLEVEL; // Set PVD Threshold
 8000ee2:	2380      	movs	r3, #128	; 0x80
 8000ee4:	6023      	str	r3, [r4, #0]
	sConfigPVD.Mode = PWR_PVD_MODE_IT;	// Set PVD to detect Rising Vdd and set Interrupt
 8000ee6:	4b8e      	ldr	r3, [pc, #568]	; (8001120 <My_While+0x274>)
	HAL_PWR_ConfigPVD(&sConfigPVD);		// Configure PVD
 8000ee8:	0020      	movs	r0, r4
	sConfigPVD.Mode = PWR_PVD_MODE_IT;	// Set PVD to detect Rising Vdd and set Interrupt
 8000eea:	6063      	str	r3, [r4, #4]
	HAL_PWR_ConfigPVD(&sConfigPVD);		// Configure PVD
 8000eec:	f001 fde0 	bl	8002ab0 <HAL_PWR_ConfigPVD>
		My_Set_PVD(PWR_PVDLEVEL_4, PWR_PVD_MODE_IT_RISING); // Set PVD to 4 with Interrupt for Falling vdd
		My_Enter_Stop_Mode_WFI();                           // Enter Stop Mode and WFI from PVD
 8000ef0:	f7ff fe1c 	bl	8000b2c <My_Enter_Stop_Mode_WFI>
		My_Power_Management(0,0,0);				   		    // Turn Power OFF
 8000ef4:	f7ff fee8 	bl	8000cc8 <My_Power_Management.constprop.2>
			My_Set_PVD(PWR_PVDLEVEL_6, PWR_PVD_MODE_IT_FALLING); // Set PVD to 6 with Interrupt for Rising vdd
			My_Enter_Stop_Mode_WFI();   			             // Enter Stop Mode and WFI from PVD or BTH or WFE
		}
	}

	if (ms == SEND){
 8000ef8:	4f8a      	ldr	r7, [pc, #552]	; (8001124 <My_While+0x278>)
 8000efa:	783d      	ldrb	r5, [r7, #0]
 8000efc:	2d01      	cmp	r5, #1
 8000efe:	d000      	beq.n	8000f02 <My_While+0x56>
 8000f00:	e09e      	b.n	8001040 <My_While+0x194>
		if (cnt_ntb++ < ntb){						 // Check Number of Transmitted Beacons
 8000f02:	4e89      	ldr	r6, [pc, #548]	; (8001128 <My_While+0x27c>)
 8000f04:	4c89      	ldr	r4, [pc, #548]	; (800112c <My_While+0x280>)
 8000f06:	7833      	ldrb	r3, [r6, #0]
 8000f08:	1c5a      	adds	r2, r3, #1
 8000f0a:	7032      	strb	r2, [r6, #0]
 8000f0c:	4a88      	ldr	r2, [pc, #544]	; (8001130 <My_While+0x284>)
 8000f0e:	7812      	ldrb	r2, [r2, #0]
 8000f10:	429a      	cmp	r2, r3
 8000f12:	d800      	bhi.n	8000f16 <My_While+0x6a>
 8000f14:	e075      	b.n	8001002 <My_While+0x156>
 8000f16:	0029      	movs	r1, r5
 8000f18:	0028      	movs	r0, r5
 8000f1a:	f7ff fe8f 	bl	8000c3c <My_Power_Management.part.1>
	HAL_I2C_MspInit(&hi2c1);				 // Initialize I2C
 8000f1e:	4d7f      	ldr	r5, [pc, #508]	; (800111c <My_While+0x270>)
 8000f20:	0028      	movs	r0, r5
 8000f22:	f000 fb85 	bl	8001630 <HAL_I2C_MspInit>
	HAL_I2C_Slave_Transmit(&hi2c1, (uint8_t*)sensor_data, sizeof(sensor_data), 20); // 3) I2C Transmit
 8000f26:	2314      	movs	r3, #20
 8000f28:	2210      	movs	r2, #16
 8000f2a:	4982      	ldr	r1, [pc, #520]	; (8001134 <My_While+0x288>)
 8000f2c:	0028      	movs	r0, r5
 8000f2e:	f001 f9bf 	bl	80022b0 <HAL_I2C_Slave_Transmit>
	HAL_I2C_MspDeInit(&hi2c1);               // De-init I2C
 8000f32:	0028      	movs	r0, r5
 8000f34:	f000 fbaa 	bl	800168c <HAL_I2C_MspDeInit>
			My_Power_Management(1,1,1);  		     // Turn Power On, Yes BLE, Yes Tx, Yes Sensors
#if SENSORS
			My_Sensors_Send_Data();                  // Send HTS221 sensor data to BLE
#endif
			My_Enter_Stop_Mode_WFI();                // Enter Stop Mode and WFI from BTH or PVD or WFE
 8000f38:	f7ff fdf8 	bl	8000b2c <My_Enter_Stop_Mode_WFI>
	if (cnt_ntb > 0){
 8000f3c:	7833      	ldrb	r3, [r6, #0]
 8000f3e:	4d7e      	ldr	r5, [pc, #504]	; (8001138 <My_While+0x28c>)
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d01a      	beq.n	8000f7a <My_While+0xce>
		if (HAL_LPTIM_ReadCounter(&hlptim1) > tadv){
 8000f44:	0020      	movs	r0, r4
 8000f46:	f001 fd29 	bl	800299c <HAL_LPTIM_ReadCounter>
 8000f4a:	882b      	ldrh	r3, [r5, #0]
 8000f4c:	4298      	cmp	r0, r3
 8000f4e:	d947      	bls.n	8000fe0 <My_While+0x134>
			tadv = HAL_LPTIM_ReadCounter(&hlptim1) - tadv;	// Measure Advertising Time After Transmission
 8000f50:	0020      	movs	r0, r4
 8000f52:	f001 fd23 	bl	800299c <HAL_LPTIM_ReadCounter>
 8000f56:	882b      	ldrh	r3, [r5, #0]
 8000f58:	1ac0      	subs	r0, r0, r3
			tadv = (HAL_LPTIM_ReadCounter(&hlptim1) - (ARR - tadv));
 8000f5a:	8028      	strh	r0, [r5, #0]
		if (tadv <= TADV_MIN) {							// Check compliancy with the Minimum Adertising Time
 8000f5c:	882b      	ldrh	r3, [r5, #0]
			tadv_del = HAL_LPTIM_ReadCounter(&hlptim1);
 8000f5e:	0020      	movs	r0, r4
		if (tadv <= TADV_MIN) {							// Check compliancy with the Minimum Adertising Time
 8000f60:	2b1f      	cmp	r3, #31
 8000f62:	d844      	bhi.n	8000fee <My_While+0x142>
			tadv_del = HAL_LPTIM_ReadCounter(&hlptim1);
 8000f64:	f001 fd1a 	bl	800299c <HAL_LPTIM_ReadCounter>
			while(HAL_LPTIM_ReadCounter(&hlptim1) < (tadv_del + TADV_MIN - tadv)); // Set tadv Delay
 8000f68:	b287      	uxth	r7, r0
 8000f6a:	371f      	adds	r7, #31
 8000f6c:	0020      	movs	r0, r4
 8000f6e:	f001 fd15 	bl	800299c <HAL_LPTIM_ReadCounter>
 8000f72:	882b      	ldrh	r3, [r5, #0]
 8000f74:	1afb      	subs	r3, r7, r3
 8000f76:	4298      	cmp	r0, r3
 8000f78:	d3f8      	bcc.n	8000f6c <My_While+0xc0>
			My_Tadv_Ctrl();					         // Controls Minimum Advertising Time REquirement
			My_Power_Management(0,0,0);				 // Turn Power Off
 8000f7a:	f7ff fea5 	bl	8000cc8 <My_Power_Management.constprop.2>
	if (cnt_ntb == 1){
 8000f7e:	7833      	ldrb	r3, [r6, #0]
 8000f80:	2b01      	cmp	r3, #1
 8000f82:	d104      	bne.n	8000f8e <My_While+0xe2>
		tw = HAL_LPTIM_ReadCounter(&hlptim1);
 8000f84:	0020      	movs	r0, r4
 8000f86:	f001 fd09 	bl	800299c <HAL_LPTIM_ReadCounter>
 8000f8a:	4b6c      	ldr	r3, [pc, #432]	; (800113c <My_While+0x290>)
 8000f8c:	8018      	strh	r0, [r3, #0]
	if (cnt_ntb == ntb){
 8000f8e:	4b68      	ldr	r3, [pc, #416]	; (8001130 <My_While+0x284>)
 8000f90:	7832      	ldrb	r2, [r6, #0]
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	429a      	cmp	r2, r3
 8000f96:	d111      	bne.n	8000fbc <My_While+0x110>
		tw = HAL_LPTIM_ReadCounter(&hlptim1) - tw;
 8000f98:	0020      	movs	r0, r4
 8000f9a:	f001 fcff 	bl	800299c <HAL_LPTIM_ReadCounter>
 8000f9e:	4b67      	ldr	r3, [pc, #412]	; (800113c <My_While+0x290>)
 8000fa0:	881e      	ldrh	r6, [r3, #0]
 8000fa2:	1b86      	subs	r6, r0, r6
 8000fa4:	b2b6      	uxth	r6, r6
 8000fa6:	801e      	strh	r6, [r3, #0]
		sensor_data[2] = *((uint8_t*)&(tw)+1); // High byte
 8000fa8:	0a30      	lsrs	r0, r6, #8
 8000faa:	f7ff fd61 	bl	8000a70 <__aeabi_ui2f>
 8000fae:	4b61      	ldr	r3, [pc, #388]	; (8001134 <My_While+0x288>)
 8000fb0:	6098      	str	r0, [r3, #8]
		sensor_data[3] = *((uint8_t*)&(tw)+0); // Low byte
 8000fb2:	b2f0      	uxtb	r0, r6
 8000fb4:	f7ff fd5c 	bl	8000a70 <__aeabi_ui2f>
 8000fb8:	4b5e      	ldr	r3, [pc, #376]	; (8001134 <My_While+0x288>)
 8000fba:	60d8      	str	r0, [r3, #12]
			My_Tadv_Meas();							 // Measure tadv
			tadv = HAL_LPTIM_ReadCounter(&hlptim1);  // Time Stamp tadv
 8000fbc:	0020      	movs	r0, r4
 8000fbe:	f001 fced 	bl	800299c <HAL_LPTIM_ReadCounter>
 8000fc2:	8028      	strh	r0, [r5, #0]
			My_Power_Management(0,0,0);				 // Turn Power Off
			tadv = HAL_LPTIM_ReadCounter(&hlptim1);  // Time Stamp tadv
#endif
		}
	}
}
 8000fc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (__HAL_PWR_GET_FLAG(PWR_CSR_VREFINTRDYF) == 1){       // if Vstor < 3.0 Volt and Internal Reference is Ready
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	071b      	lsls	r3, r3, #28
 8000fca:	d400      	bmi.n	8000fce <My_While+0x122>
 8000fcc:	e794      	b.n	8000ef8 <My_While+0x4c>
	sConfigPVD.Mode = PWR_PVD_MODE_IT;	// Set PVD to detect Rising Vdd and set Interrupt
 8000fce:	4b5c      	ldr	r3, [pc, #368]	; (8001140 <My_While+0x294>)
	HAL_PWR_ConfigPVD(&sConfigPVD);		// Configure PVD
 8000fd0:	0020      	movs	r0, r4
	sConfigPVD.Mode = PWR_PVD_MODE_IT;	// Set PVD to detect Rising Vdd and set Interrupt
 8000fd2:	6063      	str	r3, [r4, #4]
	sConfigPVD.PVDLevel = PWR_PVDLEVEL; // Set PVD Threshold
 8000fd4:	6025      	str	r5, [r4, #0]
	HAL_PWR_ConfigPVD(&sConfigPVD);		// Configure PVD
 8000fd6:	f001 fd6b 	bl	8002ab0 <HAL_PWR_ConfigPVD>
			My_Enter_Stop_Mode_WFI();   			             // Enter Stop Mode and WFI from PVD or BTH or WFE
 8000fda:	f7ff fda7 	bl	8000b2c <My_Enter_Stop_Mode_WFI>
 8000fde:	e78b      	b.n	8000ef8 <My_While+0x4c>
			tadv = (HAL_LPTIM_ReadCounter(&hlptim1) - (ARR - tadv));
 8000fe0:	0020      	movs	r0, r4
 8000fe2:	f001 fcdb 	bl	800299c <HAL_LPTIM_ReadCounter>
 8000fe6:	882b      	ldrh	r3, [r5, #0]
 8000fe8:	3301      	adds	r3, #1
 8000fea:	1818      	adds	r0, r3, r0
 8000fec:	e7b5      	b.n	8000f5a <My_While+0xae>
			tadv_del = HAL_LPTIM_ReadCounter(&hlptim1);
 8000fee:	f001 fcd5 	bl	800299c <HAL_LPTIM_ReadCounter>
			while(HAL_LPTIM_ReadCounter(&hlptim1) < tadv_del + TFALL_MIN); // Set tadv Delay
 8000ff2:	b287      	uxth	r7, r0
 8000ff4:	3703      	adds	r7, #3
 8000ff6:	0020      	movs	r0, r4
 8000ff8:	f001 fcd0 	bl	800299c <HAL_LPTIM_ReadCounter>
 8000ffc:	42b8      	cmp	r0, r7
 8000ffe:	d3fa      	bcc.n	8000ff6 <My_While+0x14a>
 8001000:	e7bb      	b.n	8000f7a <My_While+0xce>
			ms  = WAIT;
 8001002:	2500      	movs	r5, #0
			HAL_LPTIM_Counter_Stop(&hlptim1);        // Stop  LPTIM1 Counter
 8001004:	0020      	movs	r0, r4
			ms  = WAIT;
 8001006:	703d      	strb	r5, [r7, #0]
			cnt_ntb = 0;							 // Reset cnt_ntb
 8001008:	7035      	strb	r5, [r6, #0]
			HAL_LPTIM_Counter_Stop(&hlptim1);        // Stop  LPTIM1 Counter
 800100a:	f001 fd45 	bl	8002a98 <HAL_LPTIM_Counter_Stop>
			HAL_LPTIM_Counter_Start(&hlptim1, ARR);  // Start LPTIM1 Counter
 800100e:	494d      	ldr	r1, [pc, #308]	; (8001144 <My_While+0x298>)
 8001010:	0020      	movs	r0, r4
 8001012:	f001 fca3 	bl	800295c <HAL_LPTIM_Counter_Start>
			rtp = (uint16_t)rtps*LPTIM_TIME_UNIT;	 // Set rtp
 8001016:	4b4c      	ldr	r3, [pc, #304]	; (8001148 <My_While+0x29c>)
 8001018:	781a      	ldrb	r2, [r3, #0]
 800101a:	2322      	movs	r3, #34	; 0x22
 800101c:	33ff      	adds	r3, #255	; 0xff
 800101e:	4353      	muls	r3, r2
 8001020:	4a4a      	ldr	r2, [pc, #296]	; (800114c <My_While+0x2a0>)
 8001022:	8013      	strh	r3, [r2, #0]
 8001024:	0029      	movs	r1, r5
 8001026:	0028      	movs	r0, r5
 8001028:	f7ff fe08 	bl	8000c3c <My_Power_Management.part.1>
			My_Enter_Stop_Mode_WFI();				 // Enter Stop Mode and WFI from BTH
 800102c:	f7ff fd7e 	bl	8000b2c <My_Enter_Stop_Mode_WFI>
			My_Power_Management(0,0,0);				 // Turn Power Off
 8001030:	f7ff fe4a 	bl	8000cc8 <My_Power_Management.constprop.2>
			tadv = HAL_LPTIM_ReadCounter(&hlptim1);  // Time Stamp tadv
 8001034:	0020      	movs	r0, r4
 8001036:	f001 fcb1 	bl	800299c <HAL_LPTIM_ReadCounter>
 800103a:	4b3f      	ldr	r3, [pc, #252]	; (8001138 <My_While+0x28c>)
 800103c:	8018      	strh	r0, [r3, #0]
}
 800103e:	e7c1      	b.n	8000fc4 <My_While+0x118>
	else if (ms == WAIT){
 8001040:	2d00      	cmp	r5, #0
 8001042:	d1bf      	bne.n	8000fc4 <My_While+0x118>
		if (HAL_LPTIM_ReadCounter(&hlptim1) < rtp){
 8001044:	4c39      	ldr	r4, [pc, #228]	; (800112c <My_While+0x280>)
 8001046:	0020      	movs	r0, r4
 8001048:	f001 fca8 	bl	800299c <HAL_LPTIM_ReadCounter>
 800104c:	4b3f      	ldr	r3, [pc, #252]	; (800114c <My_While+0x2a0>)
 800104e:	881b      	ldrh	r3, [r3, #0]
 8001050:	4298      	cmp	r0, r3
 8001052:	d3e7      	bcc.n	8001024 <My_While+0x178>
			ms = SEND;
 8001054:	2601      	movs	r6, #1
			HAL_LPTIM_Counter_Stop(&hlptim1);        // Stop  LPTIM1 Counter
 8001056:	0020      	movs	r0, r4
			ms = SEND;
 8001058:	703e      	strb	r6, [r7, #0]
			HAL_LPTIM_Counter_Stop(&hlptim1);        // Stop  LPTIM1 Counter
 800105a:	f001 fd1d 	bl	8002a98 <HAL_LPTIM_Counter_Stop>
			HAL_LPTIM_Counter_Start(&hlptim1, ARR);  // Start LPTIM1 Counter
 800105e:	4939      	ldr	r1, [pc, #228]	; (8001144 <My_While+0x298>)
 8001060:	0020      	movs	r0, r4
 8001062:	f001 fc7b 	bl	800295c <HAL_LPTIM_Counter_Start>
			HAL_I2C_MspDeInit(&hi2c1);               // Deinitialize I2C
 8001066:	4f2d      	ldr	r7, [pc, #180]	; (800111c <My_While+0x270>)
 8001068:	0038      	movs	r0, r7
 800106a:	f000 fb0f 	bl	800168c <HAL_I2C_MspDeInit>
 800106e:	0031      	movs	r1, r6
 8001070:	0028      	movs	r0, r5
 8001072:	f7ff fde3 	bl	8000c3c <My_Power_Management.part.1>
			HAL_I2C_MspInit(&hi2c1);				 // Initialize I2C
 8001076:	0038      	movs	r0, r7
 8001078:	f000 fada 	bl	8001630 <HAL_I2C_MspInit>
			My_hts221_config();						 // Fetch data from hts221 sensor (one time)
 800107c:	f7ff fda8 	bl	8000bd0 <My_hts221_config>
	hts221_init(); 											     // Initialize HTS221
 8001080:	f000 f902 	bl	8001288 <hts221_init>
	HAL_Delay(HTS221_ODR);									     // Very Critical Delay (Wait that both the sensors are ready --> See note on DRDY at page 24 of the datasheet)
 8001084:	2015      	movs	r0, #21
 8001086:	f000 fc83 	bl	8001990 <HAL_Delay>
	hts221_read_temperature(&hts221_temp_data);                  // Read temperature Measurement
 800108a:	4e31      	ldr	r6, [pc, #196]	; (8001150 <My_While+0x2a4>)
 800108c:	0030      	movs	r0, r6
 800108e:	f000 f931 	bl	80012f4 <hts221_read_temperature>
	hts221_read_humidity(&hts221_humidity_data);                 // Read Humidity Measurement
 8001092:	4830      	ldr	r0, [pc, #192]	; (8001154 <My_While+0x2a8>)
 8001094:	f000 fa72 	bl	800157c <hts221_read_humidity>
	sensor_data[0] = (*hts221_temp_deg_cal_value + *hts221_temp_slope*(hts221_temp_data - *hts221_temp_adc_cal_value))/8;	          // Temperature in Celsius
 8001098:	4b2f      	ldr	r3, [pc, #188]	; (8001158 <My_While+0x2ac>)
 800109a:	8830      	ldrh	r0, [r6, #0]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4d25      	ldr	r5, [pc, #148]	; (8001134 <My_While+0x288>)
 80010a0:	881b      	ldrh	r3, [r3, #0]
 80010a2:	1ac0      	subs	r0, r0, r3
 80010a4:	f7ff fc9a 	bl	80009dc <__aeabi_i2f>
 80010a8:	4b2c      	ldr	r3, [pc, #176]	; (800115c <My_While+0x2b0>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	6819      	ldr	r1, [r3, #0]
 80010ae:	f7ff fb63 	bl	8000778 <__aeabi_fmul>
 80010b2:	4b2b      	ldr	r3, [pc, #172]	; (8001160 <My_While+0x2b4>)
 80010b4:	1c06      	adds	r6, r0, #0
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	8818      	ldrh	r0, [r3, #0]
 80010ba:	f7ff fc8f 	bl	80009dc <__aeabi_i2f>
 80010be:	1c01      	adds	r1, r0, #0
 80010c0:	1c30      	adds	r0, r6, #0
 80010c2:	f7ff f8ad 	bl	8000220 <__aeabi_fadd>
 80010c6:	21f8      	movs	r1, #248	; 0xf8
 80010c8:	0589      	lsls	r1, r1, #22
 80010ca:	f7ff fb55 	bl	8000778 <__aeabi_fmul>
	sensor_data[1] = (*hts221_humidity_cal_value + *hts221_humidity_slope*(hts221_humidity_data - *hts221_humidity_adc_cal_value))/2; // Relative Humidity in %
 80010ce:	4b21      	ldr	r3, [pc, #132]	; (8001154 <My_While+0x2a8>)
	sensor_data[0] = (*hts221_temp_deg_cal_value + *hts221_temp_slope*(hts221_temp_data - *hts221_temp_adc_cal_value))/8;	          // Temperature in Celsius
 80010d0:	6028      	str	r0, [r5, #0]
	sensor_data[1] = (*hts221_humidity_cal_value + *hts221_humidity_slope*(hts221_humidity_data - *hts221_humidity_adc_cal_value))/2; // Relative Humidity in %
 80010d2:	8818      	ldrh	r0, [r3, #0]
 80010d4:	4b23      	ldr	r3, [pc, #140]	; (8001164 <My_While+0x2b8>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	881b      	ldrh	r3, [r3, #0]
 80010da:	1ac0      	subs	r0, r0, r3
 80010dc:	f7ff fc7e 	bl	80009dc <__aeabi_i2f>
 80010e0:	4b21      	ldr	r3, [pc, #132]	; (8001168 <My_While+0x2bc>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	6819      	ldr	r1, [r3, #0]
 80010e6:	f7ff fb47 	bl	8000778 <__aeabi_fmul>
 80010ea:	4b20      	ldr	r3, [pc, #128]	; (800116c <My_While+0x2c0>)
 80010ec:	1c06      	adds	r6, r0, #0
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	8818      	ldrh	r0, [r3, #0]
 80010f2:	f7ff fc73 	bl	80009dc <__aeabi_i2f>
 80010f6:	1c01      	adds	r1, r0, #0
 80010f8:	1c30      	adds	r0, r6, #0
 80010fa:	f7ff f891 	bl	8000220 <__aeabi_fadd>
 80010fe:	21fc      	movs	r1, #252	; 0xfc
 8001100:	0589      	lsls	r1, r1, #22
 8001102:	f7ff fb39 	bl	8000778 <__aeabi_fmul>
 8001106:	6068      	str	r0, [r5, #4]
			My_Power_Management(0,0,0);				 // Turn Power Off
 8001108:	f7ff fdde 	bl	8000cc8 <My_Power_Management.constprop.2>
			HAL_I2C_MspDeInit(&hi2c1);               // Deinitialize I2C
 800110c:	0038      	movs	r0, r7
 800110e:	f000 fabd 	bl	800168c <HAL_I2C_MspDeInit>
 8001112:	e78f      	b.n	8001034 <My_While+0x188>
 8001114:	20000054 	.word	0x20000054
 8001118:	40007000 	.word	0x40007000
 800111c:	2000007c 	.word	0x2000007c
 8001120:	00010001 	.word	0x00010001
 8001124:	20000000 	.word	0x20000000
 8001128:	2000002c 	.word	0x2000002c
 800112c:	200000c8 	.word	0x200000c8
 8001130:	20000034 	.word	0x20000034
 8001134:	20000040 	.word	0x20000040
 8001138:	2000003a 	.word	0x2000003a
 800113c:	2000003c 	.word	0x2000003c
 8001140:	00010002 	.word	0x00010002
 8001144:	0000ffff 	.word	0x0000ffff
 8001148:	20000038 	.word	0x20000038
 800114c:	20000036 	.word	0x20000036
 8001150:	20000050 	.word	0x20000050
 8001154:	20000078 	.word	0x20000078
 8001158:	20000060 	.word	0x20000060
 800115c:	2000005c 	.word	0x2000005c
 8001160:	2000006c 	.word	0x2000006c
 8001164:	20000068 	.word	0x20000068
 8001168:	20000070 	.word	0x20000070
 800116c:	20000064 	.word	0x20000064

08001170 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8001170:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001172:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001174:	2214      	movs	r2, #20
 8001176:	2100      	movs	r1, #0
 8001178:	a803      	add	r0, sp, #12
 800117a:	f002 f92f 	bl	80033dc <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800117e:	2004      	movs	r0, #4
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001180:	2501      	movs	r5, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001182:	4b3c      	ldr	r3, [pc, #240]	; (8001274 <MX_GPIO_Init+0x104>)
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BLE_RST_Pin|BLE_TXE_Pin, GPIO_PIN_RESET);
 8001184:	24c0      	movs	r4, #192	; 0xc0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001186:	6ad9      	ldr	r1, [r3, #44]	; 0x2c

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, VHTS_Pin|VBLUE2_Pin|VBLUE1_Pin, GPIO_PIN_RESET);
 8001188:	26a0      	movs	r6, #160	; 0xa0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800118a:	4301      	orrs	r1, r0
 800118c:	62d9      	str	r1, [r3, #44]	; 0x2c
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800118e:	2102      	movs	r1, #2
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001190:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOC, BLE_RST_Pin|BLE_TXE_Pin, GPIO_PIN_RESET);
 8001192:	4f39      	ldr	r7, [pc, #228]	; (8001278 <MX_GPIO_Init+0x108>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001194:	4002      	ands	r2, r0
 8001196:	9200      	str	r2, [sp, #0]
 8001198:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800119a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOC, BLE_RST_Pin|BLE_TXE_Pin, GPIO_PIN_RESET);
 800119c:	0224      	lsls	r4, r4, #8
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800119e:	432a      	orrs	r2, r5
 80011a0:	62da      	str	r2, [r3, #44]	; 0x2c
 80011a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOA, VHTS_Pin|VBLUE2_Pin|VBLUE1_Pin, GPIO_PIN_RESET);
 80011a4:	05f6      	lsls	r6, r6, #23
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011a6:	402a      	ands	r2, r5
 80011a8:	9201      	str	r2, [sp, #4]
 80011aa:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOC, BLE_RST_Pin|BLE_TXE_Pin, GPIO_PIN_RESET);
 80011ae:	0038      	movs	r0, r7
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011b0:	430a      	orrs	r2, r1
 80011b2:	62da      	str	r2, [r3, #44]	; 0x2c
 80011b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOC, BLE_RST_Pin|BLE_TXE_Pin, GPIO_PIN_RESET);
 80011b6:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011b8:	400b      	ands	r3, r1
 80011ba:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOC, BLE_RST_Pin|BLE_TXE_Pin, GPIO_PIN_RESET);
 80011bc:	0021      	movs	r1, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011be:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOC, BLE_RST_Pin|BLE_TXE_Pin, GPIO_PIN_RESET);
 80011c0:	f000 fe6c 	bl	8001e9c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, VHTS_Pin|VBLUE2_Pin|VBLUE1_Pin, GPIO_PIN_RESET);
 80011c4:	0030      	movs	r0, r6
 80011c6:	2200      	movs	r2, #0
 80011c8:	21e0      	movs	r1, #224	; 0xe0
 80011ca:	f000 fe67 	bl	8001e9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(VBLUE_GPIO_Port, VBLUE_Pin, GPIO_PIN_RESET);
 80011ce:	2200      	movs	r2, #0
 80011d0:	2102      	movs	r1, #2
 80011d2:	482a      	ldr	r0, [pc, #168]	; (800127c <MX_GPIO_Init+0x10c>)
 80011d4:	f000 fe62 	bl	8001e9c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = BLE_RST_Pin|BLE_TXE_Pin;
 80011d8:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011da:	2400      	movs	r4, #0
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011dc:	ab03      	add	r3, sp, #12
 80011de:	0019      	movs	r1, r3
 80011e0:	0038      	movs	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e2:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e4:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e6:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011e8:	f000 fd30 	bl	8001c4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011ec:	2303      	movs	r3, #3
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80011ee:	2707      	movs	r7, #7
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011f0:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f2:	ab03      	add	r3, sp, #12
 80011f4:	0019      	movs	r1, r3
 80011f6:	0030      	movs	r0, r6
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80011f8:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fa:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011fc:	f000 fd26 	bl	8001c4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BLE_WFE_Pin;
 8001200:	2308      	movs	r3, #8
 8001202:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001204:	4b1e      	ldr	r3, [pc, #120]	; (8001280 <MX_GPIO_Init+0x110>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BLE_WFE_GPIO_Port, &GPIO_InitStruct);
 8001206:	0030      	movs	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001208:	9304      	str	r3, [sp, #16]
  HAL_GPIO_Init(BLE_WFE_GPIO_Port, &GPIO_InitStruct);
 800120a:	ab03      	add	r3, sp, #12
 800120c:	0019      	movs	r1, r3
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120e:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(BLE_WFE_GPIO_Port, &GPIO_InitStruct);
 8001210:	f000 fd1c 	bl	8001c4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTH_Pin;
 8001214:	2310      	movs	r3, #16
 8001216:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001218:	4b1a      	ldr	r3, [pc, #104]	; (8001284 <MX_GPIO_Init+0x114>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BTH_GPIO_Port, &GPIO_InitStruct);
 800121a:	0030      	movs	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800121c:	9304      	str	r3, [sp, #16]
  HAL_GPIO_Init(BTH_GPIO_Port, &GPIO_InitStruct);
 800121e:	ab03      	add	r3, sp, #12
 8001220:	0019      	movs	r1, r3
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001222:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(BTH_GPIO_Port, &GPIO_InitStruct);
 8001224:	f000 fd12 	bl	8001c4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = VHTS_Pin|VBLUE2_Pin|VBLUE1_Pin;
 8001228:	23e0      	movs	r3, #224	; 0xe0
 800122a:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800122c:	ab03      	add	r3, sp, #12
 800122e:	0019      	movs	r1, r3
 8001230:	0030      	movs	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001232:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001234:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001236:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001238:	f000 fd08 	bl	8001c4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VBLUE_Pin;
 800123c:	2102      	movs	r1, #2
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(VBLUE_GPIO_Port, &GPIO_InitStruct);
 800123e:	480f      	ldr	r0, [pc, #60]	; (800127c <MX_GPIO_Init+0x10c>)
  GPIO_InitStruct.Pin = VBLUE_Pin;
 8001240:	9103      	str	r1, [sp, #12]
  HAL_GPIO_Init(VBLUE_GPIO_Port, &GPIO_InitStruct);
 8001242:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001244:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001246:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001248:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(VBLUE_GPIO_Port, &GPIO_InitStruct);
 800124a:	f000 fcff 	bl	8001c4c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 2, 0);
 800124e:	0022      	movs	r2, r4
 8001250:	2102      	movs	r1, #2
 8001252:	2006      	movs	r0, #6
 8001254:	f000 fbae 	bl	80019b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8001258:	2006      	movs	r0, #6
 800125a:	f000 fbd5 	bl	8001a08 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 1, 0);
 800125e:	0022      	movs	r2, r4
 8001260:	0029      	movs	r1, r5
 8001262:	0038      	movs	r0, r7
 8001264:	f000 fba6 	bl	80019b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8001268:	0038      	movs	r0, r7
 800126a:	f000 fbcd 	bl	8001a08 <HAL_NVIC_EnableIRQ>

}
 800126e:	b009      	add	sp, #36	; 0x24
 8001270:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001272:	46c0      	nop			; (mov r8, r8)
 8001274:	40021000 	.word	0x40021000
 8001278:	50000800 	.word	0x50000800
 800127c:	50000400 	.word	0x50000400
 8001280:	10210000 	.word	0x10210000
 8001284:	10110000 	.word	0x10110000

08001288 <hts221_init>:
 */

#include "hts221.h"

/* I2C Initialization. Writes hts221 Configuration Registers (See pag. 21, 22, 23 and 24 of hts221 data sheet) */
void hts221_init(void){
 8001288:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t hts221_init_data = AV_CONF_VALUE;
 800128a:	2517      	movs	r5, #23
	HAL_I2C_Mem_Write(&hi2c1, HTS21_I2C_WRITE_ADDR, AV_CONF_ADDR,   I2C_MEMADD_SIZE_8BIT, &hts221_init_data, sizeof(uint8_t), I2C_TIMEOUT);
 800128c:	2401      	movs	r4, #1
 800128e:	2764      	movs	r7, #100	; 0x64
	uint8_t hts221_init_data = AV_CONF_VALUE;
 8001290:	2300      	movs	r3, #0
void hts221_init(void){
 8001292:	b087      	sub	sp, #28
	HAL_I2C_Mem_Write(&hi2c1, HTS21_I2C_WRITE_ADDR, AV_CONF_ADDR,   I2C_MEMADD_SIZE_8BIT, &hts221_init_data, sizeof(uint8_t), I2C_TIMEOUT);
 8001294:	4e16      	ldr	r6, [pc, #88]	; (80012f0 <hts221_init+0x68>)
	uint8_t hts221_init_data = AV_CONF_VALUE;
 8001296:	446d      	add	r5, sp
 8001298:	702b      	strb	r3, [r5, #0]
	HAL_I2C_Mem_Write(&hi2c1, HTS21_I2C_WRITE_ADDR, AV_CONF_ADDR,   I2C_MEMADD_SIZE_8BIT, &hts221_init_data, sizeof(uint8_t), I2C_TIMEOUT);
 800129a:	2210      	movs	r2, #16
 800129c:	0023      	movs	r3, r4
 800129e:	9702      	str	r7, [sp, #8]
 80012a0:	9401      	str	r4, [sp, #4]
 80012a2:	9500      	str	r5, [sp, #0]
 80012a4:	21be      	movs	r1, #190	; 0xbe
 80012a6:	0030      	movs	r0, r6
 80012a8:	f001 f8a8 	bl	80023fc <HAL_I2C_Mem_Write>

	hts221_init_data = CTRL_REG1_VALUE;
 80012ac:	2384      	movs	r3, #132	; 0x84
	HAL_I2C_Mem_Write(&hi2c1, HTS21_I2C_WRITE_ADDR, CTRL_REG1_ADDR, I2C_MEMADD_SIZE_8BIT, &hts221_init_data, sizeof(uint8_t), I2C_TIMEOUT);
 80012ae:	2220      	movs	r2, #32
	hts221_init_data = CTRL_REG1_VALUE;
 80012b0:	702b      	strb	r3, [r5, #0]
	HAL_I2C_Mem_Write(&hi2c1, HTS21_I2C_WRITE_ADDR, CTRL_REG1_ADDR, I2C_MEMADD_SIZE_8BIT, &hts221_init_data, sizeof(uint8_t), I2C_TIMEOUT);
 80012b2:	21be      	movs	r1, #190	; 0xbe
 80012b4:	0023      	movs	r3, r4
 80012b6:	9702      	str	r7, [sp, #8]
 80012b8:	9401      	str	r4, [sp, #4]
 80012ba:	9500      	str	r5, [sp, #0]
 80012bc:	0030      	movs	r0, r6
 80012be:	f001 f89d 	bl	80023fc <HAL_I2C_Mem_Write>

	hts221_init_data = CTRL_REG2_VALUE;
 80012c2:	702c      	strb	r4, [r5, #0]
	HAL_I2C_Mem_Write(&hi2c1, HTS21_I2C_WRITE_ADDR, CTRL_REG2_ADDR, I2C_MEMADD_SIZE_8BIT, &hts221_init_data, sizeof(uint8_t), I2C_TIMEOUT);
 80012c4:	0023      	movs	r3, r4
 80012c6:	9702      	str	r7, [sp, #8]
 80012c8:	9401      	str	r4, [sp, #4]
 80012ca:	9500      	str	r5, [sp, #0]
 80012cc:	2221      	movs	r2, #33	; 0x21
 80012ce:	21be      	movs	r1, #190	; 0xbe
 80012d0:	0030      	movs	r0, r6
 80012d2:	f001 f893 	bl	80023fc <HAL_I2C_Mem_Write>

	hts221_init_data = CTRL_REG3_VALUE;
 80012d6:	2304      	movs	r3, #4
	HAL_I2C_Mem_Write(&hi2c1, HTS21_I2C_WRITE_ADDR, CTRL_REG3_ADDR, I2C_MEMADD_SIZE_8BIT, &hts221_init_data, sizeof(uint8_t), I2C_TIMEOUT);
 80012d8:	2222      	movs	r2, #34	; 0x22
	hts221_init_data = CTRL_REG3_VALUE;
 80012da:	702b      	strb	r3, [r5, #0]
	HAL_I2C_Mem_Write(&hi2c1, HTS21_I2C_WRITE_ADDR, CTRL_REG3_ADDR, I2C_MEMADD_SIZE_8BIT, &hts221_init_data, sizeof(uint8_t), I2C_TIMEOUT);
 80012dc:	21be      	movs	r1, #190	; 0xbe
 80012de:	9702      	str	r7, [sp, #8]
 80012e0:	9401      	str	r4, [sp, #4]
 80012e2:	9500      	str	r5, [sp, #0]
 80012e4:	0023      	movs	r3, r4
 80012e6:	0030      	movs	r0, r6
 80012e8:	f001 f888 	bl	80023fc <HAL_I2C_Mem_Write>
}
 80012ec:	b007      	add	sp, #28
 80012ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012f0:	2000007c 	.word	0x2000007c

080012f4 <hts221_read_temperature>:

/* Read Output Registers for Temperature (See pag. 26 of hts221 data sheet) */
void hts221_read_temperature(uint16_t *hts221_temperature_data){
 80012f4:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t hts221_temperature_data_lsb = 0;
 80012f6:	2516      	movs	r5, #22
void hts221_read_temperature(uint16_t *hts221_temperature_data){
 80012f8:	b089      	sub	sp, #36	; 0x24
	uint8_t hts221_temperature_data_lsb = 0;
 80012fa:	ab02      	add	r3, sp, #8
	uint8_t hts221_temperature_data_msb = 0;
 80012fc:	2617      	movs	r6, #23
	uint8_t hts221_temperature_data_lsb = 0;
 80012fe:	18ed      	adds	r5, r5, r3
 8001300:	2300      	movs	r3, #0

	HAL_I2C_Mem_Read(&hi2c1, HTS21_I2C_READ_ADDR, TEMP_OUT_L_ADDR, I2C_MEMADD_SIZE_8BIT, &hts221_temperature_data_lsb, sizeof(uint8_t), I2C_TIMEOUT); // Read register 2A
 8001302:	2401      	movs	r4, #1
	uint8_t hts221_temperature_data_msb = 0;
 8001304:	aa02      	add	r2, sp, #8
 8001306:	18b6      	adds	r6, r6, r2
	HAL_I2C_Mem_Read(&hi2c1, HTS21_I2C_READ_ADDR, TEMP_OUT_L_ADDR, I2C_MEMADD_SIZE_8BIT, &hts221_temperature_data_lsb, sizeof(uint8_t), I2C_TIMEOUT); // Read register 2A
 8001308:	4f0f      	ldr	r7, [pc, #60]	; (8001348 <hts221_read_temperature+0x54>)
	uint8_t hts221_temperature_data_lsb = 0;
 800130a:	702b      	strb	r3, [r5, #0]
	uint8_t hts221_temperature_data_msb = 0;
 800130c:	7033      	strb	r3, [r6, #0]
	HAL_I2C_Mem_Read(&hi2c1, HTS21_I2C_READ_ADDR, TEMP_OUT_L_ADDR, I2C_MEMADD_SIZE_8BIT, &hts221_temperature_data_lsb, sizeof(uint8_t), I2C_TIMEOUT); // Read register 2A
 800130e:	3364      	adds	r3, #100	; 0x64
void hts221_read_temperature(uint16_t *hts221_temperature_data){
 8001310:	9005      	str	r0, [sp, #20]
	HAL_I2C_Mem_Read(&hi2c1, HTS21_I2C_READ_ADDR, TEMP_OUT_L_ADDR, I2C_MEMADD_SIZE_8BIT, &hts221_temperature_data_lsb, sizeof(uint8_t), I2C_TIMEOUT); // Read register 2A
 8001312:	9302      	str	r3, [sp, #8]
 8001314:	9401      	str	r4, [sp, #4]
 8001316:	0023      	movs	r3, r4
 8001318:	9500      	str	r5, [sp, #0]
 800131a:	222a      	movs	r2, #42	; 0x2a
 800131c:	21bf      	movs	r1, #191	; 0xbf
 800131e:	0038      	movs	r0, r7
 8001320:	f001 f922 	bl	8002568 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1, HTS21_I2C_READ_ADDR, TEMP_OUT_H_ADDR, I2C_MEMADD_SIZE_8BIT, &hts221_temperature_data_msb, sizeof(uint8_t), I2C_TIMEOUT); // Read register 2B
 8001324:	2364      	movs	r3, #100	; 0x64
 8001326:	9401      	str	r4, [sp, #4]
 8001328:	9302      	str	r3, [sp, #8]
 800132a:	9600      	str	r6, [sp, #0]
 800132c:	0023      	movs	r3, r4
 800132e:	222b      	movs	r2, #43	; 0x2b
 8001330:	21bf      	movs	r1, #191	; 0xbf
 8001332:	0038      	movs	r0, r7
 8001334:	f001 f918 	bl	8002568 <HAL_I2C_Mem_Read>
    *hts221_temperature_data = hts221_temperature_data_msb << 8 | hts221_temperature_data_lsb;
 8001338:	7832      	ldrb	r2, [r6, #0]
 800133a:	782b      	ldrb	r3, [r5, #0]
 800133c:	0212      	lsls	r2, r2, #8
 800133e:	4313      	orrs	r3, r2
 8001340:	9a05      	ldr	r2, [sp, #20]
 8001342:	8013      	strh	r3, [r2, #0]
}
 8001344:	b009      	add	sp, #36	; 0x24
 8001346:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001348:	2000007c 	.word	0x2000007c

0800134c <hts221_read_temperature_cal_values>:

/* Read Calibration Register for Temperature (See pag. 26 of hts221 data sheet) */
void hts221_read_temperature_cal_values(uint16_t *hts221_temp_adc_cal_value, uint16_t *hts221_temp_deg_cal_value, float *hts221_temp_slope){
 800134c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800134e:	b08d      	sub	sp, #52	; 0x34
 8001350:	9207      	str	r2, [sp, #28]
	uint8_t  T0_T1_msb = 0, T0_out_lsb = 0, T0_out_msb = 0, T1_out_lsb = 0, T1_out_msb = 0;
 8001352:	2217      	movs	r2, #23
 8001354:	2300      	movs	r3, #0
void hts221_read_temperature_cal_values(uint16_t *hts221_temp_adc_cal_value, uint16_t *hts221_temp_deg_cal_value, float *hts221_temp_slope){
 8001356:	9106      	str	r1, [sp, #24]
	uint8_t  T0_T1_msb = 0, T0_out_lsb = 0, T0_out_msb = 0, T1_out_lsb = 0, T1_out_msb = 0;
 8001358:	a904      	add	r1, sp, #16
 800135a:	1852      	adds	r2, r2, r1
 800135c:	7013      	strb	r3, [r2, #0]
 800135e:	aa0a      	add	r2, sp, #40	; 0x28
 8001360:	7013      	strb	r3, [r2, #0]
 8001362:	2219      	movs	r2, #25
 8001364:	1852      	adds	r2, r2, r1
 8001366:	7013      	strb	r3, [r2, #0]
 8001368:	221a      	movs	r2, #26
 800136a:	1852      	adds	r2, r2, r1
 800136c:	7013      	strb	r3, [r2, #0]
 800136e:	221b      	movs	r2, #27
 8001370:	1852      	adds	r2, r2, r1
 8001372:	7013      	strb	r3, [r2, #0]
	uint16_t T0_out = 0, T1_out = 0;
	uint16_t T0_DegC = 0, T1_DegC = 0;
 8001374:	221e      	movs	r2, #30
 8001376:	2664      	movs	r6, #100	; 0x64
 8001378:	2401      	movs	r4, #1
 800137a:	af0b      	add	r7, sp, #44	; 0x2c
 800137c:	1852      	adds	r2, r2, r1
void hts221_read_temperature_cal_values(uint16_t *hts221_temp_adc_cal_value, uint16_t *hts221_temp_deg_cal_value, float *hts221_temp_slope){
 800137e:	9005      	str	r0, [sp, #20]
	uint16_t T0_DegC = 0, T1_DegC = 0;
 8001380:	803b      	strh	r3, [r7, #0]
 8001382:	8013      	strh	r3, [r2, #0]

	while(T0_DegC == 0){ // Check that the Sensor is Ready after Turn On
 8001384:	883b      	ldrh	r3, [r7, #0]
 8001386:	4d3d      	ldr	r5, [pc, #244]	; (800147c <hts221_read_temperature_cal_values+0x130>)
		HAL_I2C_Mem_Read(&hi2c1, HTS21_I2C_READ_ADDR, T0_degC_x8, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&T0_DegC, sizeof(uint8_t), I2C_TIMEOUT); // Read register 32
 8001388:	9602      	str	r6, [sp, #8]
 800138a:	9401      	str	r4, [sp, #4]
	while(T0_DegC == 0){ // Check that the Sensor is Ready after Turn On
 800138c:	2b00      	cmp	r3, #0
 800138e:	d100      	bne.n	8001392 <hts221_read_temperature_cal_values+0x46>
 8001390:	e06b      	b.n	800146a <hts221_read_temperature_cal_values+0x11e>
	}
	HAL_I2C_Mem_Read(&hi2c1, HTS21_I2C_READ_ADDR, T1_degC_x8, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&T1_DegC,    sizeof(uint8_t), I2C_TIMEOUT);  // Read register 33
 8001392:	231e      	movs	r3, #30
 8001394:	aa04      	add	r2, sp, #16
 8001396:	189b      	adds	r3, r3, r2
 8001398:	9300      	str	r3, [sp, #0]
 800139a:	2233      	movs	r2, #51	; 0x33
 800139c:	2301      	movs	r3, #1
 800139e:	21bf      	movs	r1, #191	; 0xbf
 80013a0:	0028      	movs	r0, r5
 80013a2:	f001 f8e1 	bl	8002568 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1, HTS21_I2C_READ_ADDR, T0_T1_MSB,  I2C_MEMADD_SIZE_8BIT, &T0_T1_msb,  sizeof(uint8_t), I2C_TIMEOUT);  // Read register 35
 80013a6:	2317      	movs	r3, #23
 80013a8:	aa04      	add	r2, sp, #16
 80013aa:	189b      	adds	r3, r3, r2
 80013ac:	9602      	str	r6, [sp, #8]
 80013ae:	9401      	str	r4, [sp, #4]
 80013b0:	9300      	str	r3, [sp, #0]
 80013b2:	2235      	movs	r2, #53	; 0x35
 80013b4:	2301      	movs	r3, #1
 80013b6:	21bf      	movs	r1, #191	; 0xbf
 80013b8:	0028      	movs	r0, r5
 80013ba:	f001 f8d5 	bl	8002568 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1, HTS21_I2C_READ_ADDR, T0_OUT_LSB, I2C_MEMADD_SIZE_8BIT, &T0_out_lsb, sizeof(uint8_t), I2C_TIMEOUT);  // Read register 3C
 80013be:	ab0a      	add	r3, sp, #40	; 0x28
 80013c0:	9602      	str	r6, [sp, #8]
 80013c2:	9401      	str	r4, [sp, #4]
 80013c4:	9300      	str	r3, [sp, #0]
 80013c6:	223c      	movs	r2, #60	; 0x3c
 80013c8:	2301      	movs	r3, #1
 80013ca:	21bf      	movs	r1, #191	; 0xbf
 80013cc:	0028      	movs	r0, r5
 80013ce:	f001 f8cb 	bl	8002568 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1, HTS21_I2C_READ_ADDR, T0_OUT_MSB, I2C_MEMADD_SIZE_8BIT, &T0_out_msb, sizeof(uint8_t), I2C_TIMEOUT);  // Read register 3D
 80013d2:	2319      	movs	r3, #25
 80013d4:	aa04      	add	r2, sp, #16
 80013d6:	189b      	adds	r3, r3, r2
 80013d8:	9602      	str	r6, [sp, #8]
 80013da:	9401      	str	r4, [sp, #4]
 80013dc:	9300      	str	r3, [sp, #0]
 80013de:	223d      	movs	r2, #61	; 0x3d
 80013e0:	2301      	movs	r3, #1
 80013e2:	21bf      	movs	r1, #191	; 0xbf
 80013e4:	0028      	movs	r0, r5
 80013e6:	f001 f8bf 	bl	8002568 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1, HTS21_I2C_READ_ADDR, T1_OUT_LSB, I2C_MEMADD_SIZE_8BIT, &T1_out_lsb, sizeof(uint8_t), I2C_TIMEOUT);  // Read register 3E
 80013ea:	231a      	movs	r3, #26
 80013ec:	aa04      	add	r2, sp, #16
 80013ee:	189b      	adds	r3, r3, r2
 80013f0:	9602      	str	r6, [sp, #8]
 80013f2:	9401      	str	r4, [sp, #4]
 80013f4:	9300      	str	r3, [sp, #0]
 80013f6:	223e      	movs	r2, #62	; 0x3e
 80013f8:	2301      	movs	r3, #1
 80013fa:	21bf      	movs	r1, #191	; 0xbf
 80013fc:	0028      	movs	r0, r5
 80013fe:	f001 f8b3 	bl	8002568 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1, HTS21_I2C_READ_ADDR, T1_OUT_MSB, I2C_MEMADD_SIZE_8BIT, &T1_out_msb, sizeof(uint8_t), I2C_TIMEOUT);  // Read register 3F
 8001402:	9401      	str	r4, [sp, #4]
 8001404:	241b      	movs	r4, #27
 8001406:	0028      	movs	r0, r5

	// See Figure #9 of the hts221 datasheet
	T1_DegC = (T0_T1_msb & 0b00001100) << 6 | T1_DegC;
 8001408:	25c0      	movs	r5, #192	; 0xc0
	HAL_I2C_Mem_Read(&hi2c1, HTS21_I2C_READ_ADDR, T1_OUT_MSB, I2C_MEMADD_SIZE_8BIT, &T1_out_msb, sizeof(uint8_t), I2C_TIMEOUT);  // Read register 3F
 800140a:	ab04      	add	r3, sp, #16
 800140c:	18e4      	adds	r4, r4, r3
 800140e:	9602      	str	r6, [sp, #8]
 8001410:	9400      	str	r4, [sp, #0]
 8001412:	2301      	movs	r3, #1
 8001414:	223f      	movs	r2, #63	; 0x3f
 8001416:	21bf      	movs	r1, #191	; 0xbf
 8001418:	f001 f8a6 	bl	8002568 <HAL_I2C_Mem_Read>
	T1_DegC = (T0_T1_msb & 0b00001100) << 6 | T1_DegC;
 800141c:	ab04      	add	r3, sp, #16
 800141e:	7ddb      	ldrb	r3, [r3, #23]
 8001420:	aa04      	add	r2, sp, #16
 8001422:	00ad      	lsls	r5, r5, #2
 8001424:	8bd1      	ldrh	r1, [r2, #30]
 8001426:	0198      	lsls	r0, r3, #6
 8001428:	4028      	ands	r0, r5
 800142a:	4301      	orrs	r1, r0
	T0_DegC = (T0_T1_msb & 0b00000011) << 8 | T0_DegC;
 800142c:	021b      	lsls	r3, r3, #8
 800142e:	8838      	ldrh	r0, [r7, #0]
 8001430:	402b      	ands	r3, r5
 8001432:	4303      	orrs	r3, r0
	T1_out = T1_out_msb << 8 | T1_out_lsb;
 8001434:	7820      	ldrb	r0, [r4, #0]
 8001436:	7e94      	ldrb	r4, [r2, #26]
 8001438:	0200      	lsls	r0, r0, #8
 800143a:	4304      	orrs	r4, r0
	T0_out = T0_out_msb << 8 | T0_out_lsb;
 800143c:	7e50      	ldrb	r0, [r2, #25]
 800143e:	7e15      	ldrb	r5, [r2, #24]
 8001440:	0200      	lsls	r0, r0, #8

	*hts221_temp_adc_cal_value = T0_out;  // adc calibration value
 8001442:	9a05      	ldr	r2, [sp, #20]
	T0_out = T0_out_msb << 8 | T0_out_lsb;
 8001444:	4305      	orrs	r5, r0
	*hts221_temp_adc_cal_value = T0_out;  // adc calibration value
 8001446:	8015      	strh	r5, [r2, #0]
	*hts221_temp_deg_cal_value = T0_DegC; // temp in Celsius calibration value
 8001448:	9a06      	ldr	r2, [sp, #24]
	*hts221_temp_slope = (float)((T1_DegC - T0_DegC))/(float)(T1_out - T0_out);	// Temperature Slope (Calibration)
 800144a:	1ac8      	subs	r0, r1, r3
	*hts221_temp_deg_cal_value = T0_DegC; // temp in Celsius calibration value
 800144c:	8013      	strh	r3, [r2, #0]
	*hts221_temp_slope = (float)((T1_DegC - T0_DegC))/(float)(T1_out - T0_out);	// Temperature Slope (Calibration)
 800144e:	f7ff fac5 	bl	80009dc <__aeabi_i2f>
 8001452:	1c06      	adds	r6, r0, #0
 8001454:	1b60      	subs	r0, r4, r5
 8001456:	f7ff fac1 	bl	80009dc <__aeabi_i2f>
 800145a:	1c01      	adds	r1, r0, #0
 800145c:	1c30      	adds	r0, r6, #0
 800145e:	f7ff f879 	bl	8000554 <__aeabi_fdiv>
 8001462:	9b07      	ldr	r3, [sp, #28]
 8001464:	6018      	str	r0, [r3, #0]
}
 8001466:	b00d      	add	sp, #52	; 0x34
 8001468:	bdf0      	pop	{r4, r5, r6, r7, pc}
		HAL_I2C_Mem_Read(&hi2c1, HTS21_I2C_READ_ADDR, T0_degC_x8, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&T0_DegC, sizeof(uint8_t), I2C_TIMEOUT); // Read register 32
 800146a:	9700      	str	r7, [sp, #0]
 800146c:	0023      	movs	r3, r4
 800146e:	2232      	movs	r2, #50	; 0x32
 8001470:	21bf      	movs	r1, #191	; 0xbf
 8001472:	0028      	movs	r0, r5
 8001474:	f001 f878 	bl	8002568 <HAL_I2C_Mem_Read>
 8001478:	e784      	b.n	8001384 <hts221_read_temperature_cal_values+0x38>
 800147a:	46c0      	nop			; (mov r8, r8)
 800147c:	2000007c 	.word	0x2000007c

08001480 <hts221_read_humidity_cal_values>:

/* Read Calibration Register for Humidity (See pag. 26 of hts221 data sheet) */
void hts221_read_humidity_cal_values(uint16_t *hts221_humidity_adc_cal_value, uint16_t *hts221_humidity_cal_value, float *hts221_humidity_slope){
 8001480:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001482:	b08b      	sub	sp, #44	; 0x2c
 8001484:	9207      	str	r2, [sp, #28]
	uint8_t  h0_out_lsb = 0,  h0_out_msb = 0, h1_out_lsb = 0, h1_out_msb; // RH Calibration Values (See HTS221 Data Sheet Pag. 28)
 8001486:	2212      	movs	r2, #18
 8001488:	2300      	movs	r3, #0
void hts221_read_humidity_cal_values(uint16_t *hts221_humidity_adc_cal_value, uint16_t *hts221_humidity_cal_value, float *hts221_humidity_slope){
 800148a:	9106      	str	r1, [sp, #24]
	uint8_t  h0_out_lsb = 0,  h0_out_msb = 0, h1_out_lsb = 0, h1_out_msb; // RH Calibration Values (See HTS221 Data Sheet Pag. 28)
 800148c:	a904      	add	r1, sp, #16
 800148e:	1852      	adds	r2, r2, r1
 8001490:	7013      	strb	r3, [r2, #0]
 8001492:	2213      	movs	r2, #19
 8001494:	1852      	adds	r2, r2, r1
 8001496:	7013      	strb	r3, [r2, #0]
 8001498:	aa09      	add	r2, sp, #36	; 0x24
 800149a:	7013      	strb	r3, [r2, #0]
	uint8_t  h0_rh = 0,   h1_rh = 0; // RH Calibration Values in %   (See HTS221 Data Sheet Pag. 28)
 800149c:	2716      	movs	r7, #22
 800149e:	2217      	movs	r2, #23
 80014a0:	2664      	movs	r6, #100	; 0x64
 80014a2:	2401      	movs	r4, #1
 80014a4:	187f      	adds	r7, r7, r1
 80014a6:	1852      	adds	r2, r2, r1
void hts221_read_humidity_cal_values(uint16_t *hts221_humidity_adc_cal_value, uint16_t *hts221_humidity_cal_value, float *hts221_humidity_slope){
 80014a8:	9005      	str	r0, [sp, #20]
	uint8_t  h0_rh = 0,   h1_rh = 0; // RH Calibration Values in %   (See HTS221 Data Sheet Pag. 28)
 80014aa:	703b      	strb	r3, [r7, #0]
 80014ac:	7013      	strb	r3, [r2, #0]
    uint16_t h0_out = 0, h1_out = 0;

	while(h0_rh == 0){ // Check that the Sensor is Ready after Turn On
 80014ae:	783b      	ldrb	r3, [r7, #0]
 80014b0:	4d31      	ldr	r5, [pc, #196]	; (8001578 <hts221_read_humidity_cal_values+0xf8>)
		HAL_I2C_Mem_Read(&hi2c1, HTS21_I2C_READ_ADDR, H0_rH_x2, I2C_MEMADD_SIZE_8BIT, &h0_rh, sizeof(uint8_t), I2C_TIMEOUT);
 80014b2:	9602      	str	r6, [sp, #8]
 80014b4:	9401      	str	r4, [sp, #4]
	while(h0_rh == 0){ // Check that the Sensor is Ready after Turn On
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d056      	beq.n	8001568 <hts221_read_humidity_cal_values+0xe8>
	}
	HAL_I2C_Mem_Read(&hi2c1, HTS21_I2C_READ_ADDR, H1_rH_x2,      I2C_MEMADD_SIZE_8BIT, &h1_rh,      sizeof(uint8_t), I2C_TIMEOUT); // Read register 31
 80014ba:	2317      	movs	r3, #23
 80014bc:	aa04      	add	r2, sp, #16
 80014be:	189b      	adds	r3, r3, r2
 80014c0:	9300      	str	r3, [sp, #0]
 80014c2:	2231      	movs	r2, #49	; 0x31
 80014c4:	2301      	movs	r3, #1
 80014c6:	21bf      	movs	r1, #191	; 0xbf
 80014c8:	0028      	movs	r0, r5
 80014ca:	f001 f84d 	bl	8002568 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1, HTS21_I2C_READ_ADDR, H0_T0_OUT_LSB, I2C_MEMADD_SIZE_8BIT, &h0_out_lsb, sizeof(uint8_t), I2C_TIMEOUT); // Read register 36
 80014ce:	2312      	movs	r3, #18
 80014d0:	aa04      	add	r2, sp, #16
 80014d2:	189b      	adds	r3, r3, r2
 80014d4:	9602      	str	r6, [sp, #8]
 80014d6:	9401      	str	r4, [sp, #4]
 80014d8:	9300      	str	r3, [sp, #0]
 80014da:	2236      	movs	r2, #54	; 0x36
 80014dc:	2301      	movs	r3, #1
 80014de:	21bf      	movs	r1, #191	; 0xbf
 80014e0:	0028      	movs	r0, r5
 80014e2:	f001 f841 	bl	8002568 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1, HTS21_I2C_READ_ADDR, H0_T0_OUT_MSB, I2C_MEMADD_SIZE_8BIT, &h0_out_msb, sizeof(uint8_t), I2C_TIMEOUT); // Read register 37
 80014e6:	2313      	movs	r3, #19
 80014e8:	aa04      	add	r2, sp, #16
 80014ea:	189b      	adds	r3, r3, r2
 80014ec:	9602      	str	r6, [sp, #8]
 80014ee:	9401      	str	r4, [sp, #4]
 80014f0:	9300      	str	r3, [sp, #0]
 80014f2:	2237      	movs	r2, #55	; 0x37
 80014f4:	2301      	movs	r3, #1
 80014f6:	21bf      	movs	r1, #191	; 0xbf
 80014f8:	0028      	movs	r0, r5
 80014fa:	f001 f835 	bl	8002568 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1, HTS21_I2C_READ_ADDR, H1_T0_OUT_LSB, I2C_MEMADD_SIZE_8BIT, &h1_out_lsb, sizeof(uint8_t), I2C_TIMEOUT); // Read register 3A
 80014fe:	ab09      	add	r3, sp, #36	; 0x24
 8001500:	9602      	str	r6, [sp, #8]
 8001502:	9401      	str	r4, [sp, #4]
 8001504:	9300      	str	r3, [sp, #0]
 8001506:	223a      	movs	r2, #58	; 0x3a
 8001508:	2301      	movs	r3, #1
 800150a:	21bf      	movs	r1, #191	; 0xbf
 800150c:	0028      	movs	r0, r5
 800150e:	f001 f82b 	bl	8002568 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1, HTS21_I2C_READ_ADDR, H1_T0_OUT_LSB, I2C_MEMADD_SIZE_8BIT, &h1_out_msb, sizeof(uint8_t), I2C_TIMEOUT); // Read register 3B
 8001512:	9401      	str	r4, [sp, #4]
 8001514:	2415      	movs	r4, #21
 8001516:	ab04      	add	r3, sp, #16
 8001518:	18e4      	adds	r4, r4, r3
 800151a:	21bf      	movs	r1, #191	; 0xbf
 800151c:	9602      	str	r6, [sp, #8]
 800151e:	9400      	str	r4, [sp, #0]
 8001520:	2301      	movs	r3, #1
 8001522:	223a      	movs	r2, #58	; 0x3a
 8001524:	0028      	movs	r0, r5
 8001526:	f001 f81f 	bl	8002568 <HAL_I2C_Mem_Read>

	// See Figure #10 (Pag. 28) of the hts221 datasheet
	h0_out = h0_out_msb << 8 | h0_out_lsb;
 800152a:	ab04      	add	r3, sp, #16
 800152c:	7cd8      	ldrb	r0, [r3, #19]
 800152e:	7c9d      	ldrb	r5, [r3, #18]
 8001530:	0200      	lsls	r0, r0, #8
 8001532:	4305      	orrs	r5, r0
	h1_out = h1_out_msb << 8 | h1_out_lsb;
 8001534:	7820      	ldrb	r0, [r4, #0]
 8001536:	7d1c      	ldrb	r4, [r3, #20]

	*hts221_humidity_adc_cal_value = h0_out;					                // adc calibration value
 8001538:	9b05      	ldr	r3, [sp, #20]
	*hts221_humidity_cal_value     = h0_rh;		       		                    // Humidity calibration value
 800153a:	9a06      	ldr	r2, [sp, #24]
	*hts221_humidity_adc_cal_value = h0_out;					                // adc calibration value
 800153c:	801d      	strh	r5, [r3, #0]
	*hts221_humidity_cal_value     = h0_rh;		       		                    // Humidity calibration value
 800153e:	783b      	ldrb	r3, [r7, #0]
	h1_out = h1_out_msb << 8 | h1_out_lsb;
 8001540:	0200      	lsls	r0, r0, #8
	*hts221_humidity_cal_value     = h0_rh;		       		                    // Humidity calibration value
 8001542:	8013      	strh	r3, [r2, #0]
	*hts221_humidity_slope = (float)(h1_rh - h0_rh)/(float)(h1_out - h0_out);	// Humidity Slope (Calibration)
 8001544:	aa04      	add	r2, sp, #16
	h1_out = h1_out_msb << 8 | h1_out_lsb;
 8001546:	4304      	orrs	r4, r0
	*hts221_humidity_slope = (float)(h1_rh - h0_rh)/(float)(h1_out - h0_out);	// Humidity Slope (Calibration)
 8001548:	7dd0      	ldrb	r0, [r2, #23]
 800154a:	1ac0      	subs	r0, r0, r3
 800154c:	f7ff fa46 	bl	80009dc <__aeabi_i2f>
 8001550:	1c06      	adds	r6, r0, #0
 8001552:	1b60      	subs	r0, r4, r5
 8001554:	f7ff fa42 	bl	80009dc <__aeabi_i2f>
 8001558:	1c01      	adds	r1, r0, #0
 800155a:	1c30      	adds	r0, r6, #0
 800155c:	f7fe fffa 	bl	8000554 <__aeabi_fdiv>
 8001560:	9b07      	ldr	r3, [sp, #28]
 8001562:	6018      	str	r0, [r3, #0]
}
 8001564:	b00b      	add	sp, #44	; 0x2c
 8001566:	bdf0      	pop	{r4, r5, r6, r7, pc}
		HAL_I2C_Mem_Read(&hi2c1, HTS21_I2C_READ_ADDR, H0_rH_x2, I2C_MEMADD_SIZE_8BIT, &h0_rh, sizeof(uint8_t), I2C_TIMEOUT);
 8001568:	9700      	str	r7, [sp, #0]
 800156a:	0023      	movs	r3, r4
 800156c:	2230      	movs	r2, #48	; 0x30
 800156e:	21bf      	movs	r1, #191	; 0xbf
 8001570:	0028      	movs	r0, r5
 8001572:	f000 fff9 	bl	8002568 <HAL_I2C_Mem_Read>
 8001576:	e79a      	b.n	80014ae <hts221_read_humidity_cal_values+0x2e>
 8001578:	2000007c 	.word	0x2000007c

0800157c <hts221_read_humidity>:

/* Read Output Registers for Humidity (See pag. 26 of hts221 data sheet) */
void hts221_read_humidity(uint16_t *hts221_humidity_data){
 800157c:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t hts221_humidity_data_lsb = 0;
 800157e:	2516      	movs	r5, #22
void hts221_read_humidity(uint16_t *hts221_humidity_data){
 8001580:	b089      	sub	sp, #36	; 0x24
	uint8_t hts221_humidity_data_lsb = 0;
 8001582:	ab02      	add	r3, sp, #8
	uint8_t hts221_humidity_data_msb = 0;
 8001584:	2617      	movs	r6, #23
	uint8_t hts221_humidity_data_lsb = 0;
 8001586:	18ed      	adds	r5, r5, r3
 8001588:	2300      	movs	r3, #0

	HAL_I2C_Mem_Read(&hi2c1, HTS21_I2C_READ_ADDR, HUMIDITY_OUT_L_ADDR, I2C_MEMADD_SIZE_8BIT, &hts221_humidity_data_lsb, sizeof(uint8_t), I2C_TIMEOUT); // Read register 28
 800158a:	2401      	movs	r4, #1
	uint8_t hts221_humidity_data_msb = 0;
 800158c:	aa02      	add	r2, sp, #8
 800158e:	18b6      	adds	r6, r6, r2
	HAL_I2C_Mem_Read(&hi2c1, HTS21_I2C_READ_ADDR, HUMIDITY_OUT_L_ADDR, I2C_MEMADD_SIZE_8BIT, &hts221_humidity_data_lsb, sizeof(uint8_t), I2C_TIMEOUT); // Read register 28
 8001590:	4f0f      	ldr	r7, [pc, #60]	; (80015d0 <hts221_read_humidity+0x54>)
	uint8_t hts221_humidity_data_lsb = 0;
 8001592:	702b      	strb	r3, [r5, #0]
	uint8_t hts221_humidity_data_msb = 0;
 8001594:	7033      	strb	r3, [r6, #0]
	HAL_I2C_Mem_Read(&hi2c1, HTS21_I2C_READ_ADDR, HUMIDITY_OUT_L_ADDR, I2C_MEMADD_SIZE_8BIT, &hts221_humidity_data_lsb, sizeof(uint8_t), I2C_TIMEOUT); // Read register 28
 8001596:	3364      	adds	r3, #100	; 0x64
void hts221_read_humidity(uint16_t *hts221_humidity_data){
 8001598:	9005      	str	r0, [sp, #20]
	HAL_I2C_Mem_Read(&hi2c1, HTS21_I2C_READ_ADDR, HUMIDITY_OUT_L_ADDR, I2C_MEMADD_SIZE_8BIT, &hts221_humidity_data_lsb, sizeof(uint8_t), I2C_TIMEOUT); // Read register 28
 800159a:	9302      	str	r3, [sp, #8]
 800159c:	9401      	str	r4, [sp, #4]
 800159e:	0023      	movs	r3, r4
 80015a0:	9500      	str	r5, [sp, #0]
 80015a2:	2228      	movs	r2, #40	; 0x28
 80015a4:	21bf      	movs	r1, #191	; 0xbf
 80015a6:	0038      	movs	r0, r7
 80015a8:	f000 ffde 	bl	8002568 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1, HTS21_I2C_READ_ADDR, HUMIDITY_OUT_H_ADDR, I2C_MEMADD_SIZE_8BIT, &hts221_humidity_data_msb, sizeof(uint8_t), I2C_TIMEOUT); // Read register 29
 80015ac:	2364      	movs	r3, #100	; 0x64
 80015ae:	9401      	str	r4, [sp, #4]
 80015b0:	9302      	str	r3, [sp, #8]
 80015b2:	9600      	str	r6, [sp, #0]
 80015b4:	0023      	movs	r3, r4
 80015b6:	2229      	movs	r2, #41	; 0x29
 80015b8:	21bf      	movs	r1, #191	; 0xbf
 80015ba:	0038      	movs	r0, r7
 80015bc:	f000 ffd4 	bl	8002568 <HAL_I2C_Mem_Read>
	*hts221_humidity_data = hts221_humidity_data_msb << 8 | hts221_humidity_data_lsb;
 80015c0:	7832      	ldrb	r2, [r6, #0]
 80015c2:	782b      	ldrb	r3, [r5, #0]
 80015c4:	0212      	lsls	r2, r2, #8
 80015c6:	4313      	orrs	r3, r2
 80015c8:	9a05      	ldr	r2, [sp, #20]
 80015ca:	8013      	strh	r3, [r2, #0]
}
 80015cc:	b009      	add	sp, #36	; 0x24
 80015ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015d0:	2000007c 	.word	0x2000007c

080015d4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80015d4:	b510      	push	{r4, lr}

  hi2c1.Instance = I2C1;
 80015d6:	4b13      	ldr	r3, [pc, #76]	; (8001624 <MX_I2C1_Init+0x50>)
 80015d8:	4c13      	ldr	r4, [pc, #76]	; (8001628 <MX_I2C1_Init+0x54>)
 80015da:	6023      	str	r3, [r4, #0]
  hi2c1.Init.Timing = 0x000006C5;
 80015dc:	4b13      	ldr	r3, [pc, #76]	; (800162c <MX_I2C1_Init+0x58>)
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015de:	0020      	movs	r0, r4
  hi2c1.Init.Timing = 0x000006C5;
 80015e0:	6063      	str	r3, [r4, #4]
  hi2c1.Init.OwnAddress1 = 20;
 80015e2:	2314      	movs	r3, #20
 80015e4:	60a3      	str	r3, [r4, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015e6:	3b13      	subs	r3, #19
 80015e8:	60e3      	str	r3, [r4, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015ea:	2300      	movs	r3, #0
 80015ec:	6123      	str	r3, [r4, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80015ee:	6163      	str	r3, [r4, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80015f0:	61a3      	str	r3, [r4, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015f2:	61e3      	str	r3, [r4, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015f4:	6223      	str	r3, [r4, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015f6:	f000 fdeb 	bl	80021d0 <HAL_I2C_Init>
 80015fa:	2800      	cmp	r0, #0
 80015fc:	d001      	beq.n	8001602 <MX_I2C1_Init+0x2e>
  {
    Error_Handler();
 80015fe:	f000 f8dd 	bl	80017bc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001602:	2100      	movs	r1, #0
 8001604:	0020      	movs	r0, r4
 8001606:	f001 f90f 	bl	8002828 <HAL_I2CEx_ConfigAnalogFilter>
 800160a:	2800      	cmp	r0, #0
 800160c:	d001      	beq.n	8001612 <MX_I2C1_Init+0x3e>
  {
    Error_Handler();
 800160e:	f000 f8d5 	bl	80017bc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001612:	2100      	movs	r1, #0
 8001614:	0020      	movs	r0, r4
 8001616:	f001 f92d 	bl	8002874 <HAL_I2CEx_ConfigDigitalFilter>
 800161a:	2800      	cmp	r0, #0
 800161c:	d001      	beq.n	8001622 <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 800161e:	f000 f8cd 	bl	80017bc <Error_Handler>
  }

}
 8001622:	bd10      	pop	{r4, pc}
 8001624:	40005400 	.word	0x40005400
 8001628:	2000007c 	.word	0x2000007c
 800162c:	000006c5 	.word	0x000006c5

08001630 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001630:	b510      	push	{r4, lr}
 8001632:	0004      	movs	r4, r0
 8001634:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001636:	2214      	movs	r2, #20
 8001638:	2100      	movs	r1, #0
 800163a:	a801      	add	r0, sp, #4
 800163c:	f001 fece 	bl	80033dc <memset>
  if(i2cHandle->Instance==I2C1)
 8001640:	4b10      	ldr	r3, [pc, #64]	; (8001684 <HAL_I2C_MspInit+0x54>)
 8001642:	6822      	ldr	r2, [r4, #0]
 8001644:	429a      	cmp	r2, r3
 8001646:	d11b      	bne.n	8001680 <HAL_I2C_MspInit+0x50>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001648:	2301      	movs	r3, #1
 800164a:	4c0f      	ldr	r4, [pc, #60]	; (8001688 <HAL_I2C_MspInit+0x58>)
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800164c:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800164e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001650:	a901      	add	r1, sp, #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001652:	431a      	orrs	r2, r3
 8001654:	62e2      	str	r2, [r4, #44]	; 0x2c
 8001656:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001658:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800165a:	401a      	ands	r2, r3
 800165c:	9200      	str	r2, [sp, #0]
 800165e:	9a00      	ldr	r2, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001660:	22c0      	movs	r2, #192	; 0xc0
 8001662:	00d2      	lsls	r2, r2, #3
 8001664:	9201      	str	r2, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001666:	2212      	movs	r2, #18
 8001668:	9202      	str	r2, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800166a:	3a0f      	subs	r2, #15
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800166c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800166e:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8001670:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001672:	f000 faeb 	bl	8001c4c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001676:	2380      	movs	r3, #128	; 0x80
 8001678:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800167a:	039b      	lsls	r3, r3, #14
 800167c:	4313      	orrs	r3, r2
 800167e:	63a3      	str	r3, [r4, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001680:	b006      	add	sp, #24
 8001682:	bd10      	pop	{r4, pc}
 8001684:	40005400 	.word	0x40005400
 8001688:	40021000 	.word	0x40021000

0800168c <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{

  if(i2cHandle->Instance==I2C1)
 800168c:	4b0b      	ldr	r3, [pc, #44]	; (80016bc <HAL_I2C_MspDeInit+0x30>)
 800168e:	6802      	ldr	r2, [r0, #0]
{
 8001690:	b510      	push	{r4, lr}
  if(i2cHandle->Instance==I2C1)
 8001692:	429a      	cmp	r2, r3
 8001694:	d110      	bne.n	80016b8 <HAL_I2C_MspDeInit+0x2c>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001696:	4a0a      	ldr	r2, [pc, #40]	; (80016c0 <HAL_I2C_MspDeInit+0x34>)
 8001698:	490a      	ldr	r1, [pc, #40]	; (80016c4 <HAL_I2C_MspDeInit+0x38>)
 800169a:	6b93      	ldr	r3, [r2, #56]	; 0x38

    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9);
 800169c:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_I2C1_CLK_DISABLE();
 800169e:	400b      	ands	r3, r1
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9);
 80016a0:	2180      	movs	r1, #128	; 0x80
 80016a2:	05c0      	lsls	r0, r0, #23
 80016a4:	0089      	lsls	r1, r1, #2
    __HAL_RCC_I2C1_CLK_DISABLE();
 80016a6:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9);
 80016a8:	f000 fb82 	bl	8001db0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_10);
 80016ac:	2180      	movs	r1, #128	; 0x80
 80016ae:	20a0      	movs	r0, #160	; 0xa0
 80016b0:	00c9      	lsls	r1, r1, #3
 80016b2:	05c0      	lsls	r0, r0, #23
 80016b4:	f000 fb7c 	bl	8001db0 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }
}
 80016b8:	bd10      	pop	{r4, pc}
 80016ba:	46c0      	nop			; (mov r8, r8)
 80016bc:	40005400 	.word	0x40005400
 80016c0:	40021000 	.word	0x40021000
 80016c4:	ffdfffff 	.word	0xffdfffff

080016c8 <MX_LPTIM1_Init>:
void MX_LPTIM1_Init(void)
{

  hlptim1.Instance = LPTIM1;
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV128;
 80016c8:	22e0      	movs	r2, #224	; 0xe0
  hlptim1.Instance = LPTIM1;
 80016ca:	480b      	ldr	r0, [pc, #44]	; (80016f8 <MX_LPTIM1_Init+0x30>)
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV128;
 80016cc:	0112      	lsls	r2, r2, #4
{
 80016ce:	b510      	push	{r4, lr}
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV128;
 80016d0:	6082      	str	r2, [r0, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 80016d2:	4a0a      	ldr	r2, [pc, #40]	; (80016fc <MX_LPTIM1_Init+0x34>)
  hlptim1.Instance = LPTIM1;
 80016d4:	4b0a      	ldr	r3, [pc, #40]	; (8001700 <MX_LPTIM1_Init+0x38>)
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 80016d6:	6142      	str	r2, [r0, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_ENDOFPERIOD;
 80016d8:	2280      	movs	r2, #128	; 0x80
  hlptim1.Instance = LPTIM1;
 80016da:	6003      	str	r3, [r0, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 80016dc:	2300      	movs	r3, #0
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_ENDOFPERIOD;
 80016de:	03d2      	lsls	r2, r2, #15
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 80016e0:	6043      	str	r3, [r0, #4]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 80016e2:	6203      	str	r3, [r0, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_ENDOFPERIOD;
 80016e4:	6242      	str	r2, [r0, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 80016e6:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 80016e8:	f001 f8e8 	bl	80028bc <HAL_LPTIM_Init>
 80016ec:	2800      	cmp	r0, #0
 80016ee:	d001      	beq.n	80016f4 <MX_LPTIM1_Init+0x2c>
  {
    Error_Handler();
 80016f0:	f000 f864 	bl	80017bc <Error_Handler>
  }

}
 80016f4:	bd10      	pop	{r4, pc}
 80016f6:	46c0      	nop			; (mov r8, r8)
 80016f8:	200000c8 	.word	0x200000c8
 80016fc:	0000ffff 	.word	0x0000ffff
 8001700:	40007c00 	.word	0x40007c00

08001704 <HAL_LPTIM_MspInit>:

void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* lptimHandle)
{

  if(lptimHandle->Instance==LPTIM1)
 8001704:	4b05      	ldr	r3, [pc, #20]	; (800171c <HAL_LPTIM_MspInit+0x18>)
 8001706:	6802      	ldr	r2, [r0, #0]
 8001708:	429a      	cmp	r2, r3
 800170a:	d105      	bne.n	8001718 <HAL_LPTIM_MspInit+0x14>
  {
  /* USER CODE BEGIN LPTIM1_MspInit 0 */

  /* USER CODE END LPTIM1_MspInit 0 */
    /* LPTIM1 clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 800170c:	2380      	movs	r3, #128	; 0x80
 800170e:	4a04      	ldr	r2, [pc, #16]	; (8001720 <HAL_LPTIM_MspInit+0x1c>)
 8001710:	061b      	lsls	r3, r3, #24
 8001712:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8001714:	430b      	orrs	r3, r1
 8001716:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }
}
 8001718:	4770      	bx	lr
 800171a:	46c0      	nop			; (mov r8, r8)
 800171c:	40007c00 	.word	0x40007c00
 8001720:	40021000 	.word	0x40021000

08001724 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001724:	b510      	push	{r4, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001726:	2418      	movs	r4, #24
{
 8001728:	b098      	sub	sp, #96	; 0x60
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800172a:	2230      	movs	r2, #48	; 0x30
 800172c:	2100      	movs	r1, #0
 800172e:	a80c      	add	r0, sp, #48	; 0x30
 8001730:	f001 fe54 	bl	80033dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001734:	2214      	movs	r2, #20
 8001736:	2100      	movs	r1, #0
 8001738:	4668      	mov	r0, sp
 800173a:	f001 fe4f 	bl	80033dc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800173e:	0022      	movs	r2, r4
 8001740:	2100      	movs	r1, #0
 8001742:	a805      	add	r0, sp, #20
 8001744:	f001 fe4a 	bl	80033dc <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001748:	23c0      	movs	r3, #192	; 0xc0
 800174a:	4a13      	ldr	r2, [pc, #76]	; (8001798 <SystemClock_Config+0x74>)
 800174c:	015b      	lsls	r3, r3, #5
 800174e:	6811      	ldr	r1, [r2, #0]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = 0;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001750:	a80b      	add	r0, sp, #44	; 0x2c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001752:	430b      	orrs	r3, r1
 8001754:	6013      	str	r3, [r2, #0]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001756:	2301      	movs	r3, #1
 8001758:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800175a:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 800175c:	23a0      	movs	r3, #160	; 0xa0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 800175e:	940b      	str	r4, [sp, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001760:	2400      	movs	r4, #0
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8001762:	021b      	lsls	r3, r3, #8
 8001764:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001766:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001768:	9414      	str	r4, [sp, #80]	; 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800176a:	f001 fa4f 	bl	8002c0c <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800176e:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001770:	0021      	movs	r1, r4
 8001772:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001774:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001776:	9401      	str	r4, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001778:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800177a:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800177c:	9404      	str	r4, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800177e:	f001 fc97 	bl	80030b0 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_LPTIM1;
 8001782:	2388      	movs	r3, #136	; 0x88
 8001784:	9305      	str	r3, [sp, #20]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
  PeriphClkInit.LptimClockSelection = RCC_LPTIM1CLKSOURCE_LSI;
 8001786:	2380      	movs	r3, #128	; 0x80

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001788:	a805      	add	r0, sp, #20
  PeriphClkInit.LptimClockSelection = RCC_LPTIM1CLKSOURCE_LSI;
 800178a:	02db      	lsls	r3, r3, #11
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800178c:	9409      	str	r4, [sp, #36]	; 0x24
  PeriphClkInit.LptimClockSelection = RCC_LPTIM1CLKSOURCE_LSI;
 800178e:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001790:	f001 fd46 	bl	8003220 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8001794:	b018      	add	sp, #96	; 0x60
 8001796:	bd10      	pop	{r4, pc}
 8001798:	40007000 	.word	0x40007000

0800179c <main>:
{
 800179c:	b510      	push	{r4, lr}
  HAL_Init();
 800179e:	f000 f8d1 	bl	8001944 <HAL_Init>
  SystemClock_Config();
 80017a2:	f7ff ffbf 	bl	8001724 <SystemClock_Config>
  MX_GPIO_Init();
 80017a6:	f7ff fce3 	bl	8001170 <MX_GPIO_Init>
  MX_LPTIM1_Init();
 80017aa:	f7ff ff8d 	bl	80016c8 <MX_LPTIM1_Init>
  MX_I2C1_Init();
 80017ae:	f7ff ff11 	bl	80015d4 <MX_I2C1_Init>
	My_Main();
 80017b2:	f7ff fb0f 	bl	8000dd4 <My_Main>
		My_While();
 80017b6:	f7ff fb79 	bl	8000eac <My_While>
 80017ba:	e7fc      	b.n	80017b6 <main+0x1a>

080017bc <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80017bc:	4770      	bx	lr
	...

080017c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017c0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017c2:	2401      	movs	r4, #1
 80017c4:	4b08      	ldr	r3, [pc, #32]	; (80017e8 <HAL_MspInit+0x28>)

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 0, 0);
 80017c6:	0020      	movs	r0, r4
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017ca:	4322      	orrs	r2, r4
 80017cc:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80017ce:	2280      	movs	r2, #128	; 0x80
 80017d0:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80017d2:	0552      	lsls	r2, r2, #21
 80017d4:	430a      	orrs	r2, r1
 80017d6:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_NVIC_SetPriority(PVD_IRQn, 0, 0);
 80017d8:	2200      	movs	r2, #0
 80017da:	0011      	movs	r1, r2
 80017dc:	f000 f8ea 	bl	80019b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 80017e0:	0020      	movs	r0, r4
 80017e2:	f000 f911 	bl	8001a08 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017e6:	bd10      	pop	{r4, pc}
 80017e8:	40021000 	.word	0x40021000

080017ec <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80017ec:	4770      	bx	lr

080017ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017ee:	e7fe      	b.n	80017ee <HardFault_Handler>

080017f0 <SVC_Handler>:
 80017f0:	4770      	bx	lr

080017f2 <PendSV_Handler>:
 80017f2:	4770      	bx	lr

080017f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017f4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017f6:	f000 f8b9 	bl	800196c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017fa:	bd10      	pop	{r4, pc}

080017fc <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 80017fc:	b510      	push	{r4, lr}
  /* USER CODE BEGIN PVD_IRQn 0 */
	//pvdi++;
	HAL_NVIC_DisableIRQ(PVD_IRQn);
 80017fe:	2001      	movs	r0, #1
 8001800:	f000 f90c 	bl	8001a1c <HAL_NVIC_DisableIRQ>
  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 8001804:	f001 f9b4 	bl	8002b70 <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 8001808:	bd10      	pop	{r4, pc}
	...

0800180c <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 800180c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 800180e:	2008      	movs	r0, #8
 8001810:	f000 fb54 	bl	8001ebc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */
#if OTAP
	if (++cnt_wfe >= 1 && HAL_GPIO_ReadPin(VBLUE_GPIO_Port, VBLUE_Pin) == 1){
 8001814:	4a07      	ldr	r2, [pc, #28]	; (8001834 <EXTI2_3_IRQHandler+0x28>)
 8001816:	7813      	ldrb	r3, [r2, #0]
 8001818:	3301      	adds	r3, #1
 800181a:	b2db      	uxtb	r3, r3
 800181c:	7013      	strb	r3, [r2, #0]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d007      	beq.n	8001832 <EXTI2_3_IRQHandler+0x26>
 8001822:	2102      	movs	r1, #2
 8001824:	4804      	ldr	r0, [pc, #16]	; (8001838 <EXTI2_3_IRQHandler+0x2c>)
 8001826:	f000 fb33 	bl	8001e90 <HAL_GPIO_ReadPin>
 800182a:	2801      	cmp	r0, #1
 800182c:	d101      	bne.n	8001832 <EXTI2_3_IRQHandler+0x26>
		My_Write_Mcu_Flash();
 800182e:	f7ff fa83 	bl	8000d38 <My_Write_Mcu_Flash>
	}
#endif
  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8001832:	bd10      	pop	{r4, pc}
 8001834:	2000002d 	.word	0x2000002d
 8001838:	50000400 	.word	0x50000400

0800183c <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800183c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */
	HAL_NVIC_DisableIRQ(EXTI2_3_IRQn);
 800183e:	2006      	movs	r0, #6
 8001840:	f000 f8ec 	bl	8001a1c <HAL_NVIC_DisableIRQ>
//	HAL_NVIC_DisableIRQ(EXTI4_15_IRQn);
  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001844:	2010      	movs	r0, #16
 8001846:	f000 fb39 	bl	8001ebc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800184a:	bd10      	pop	{r4, pc}

0800184c <SystemInit>:
  * @retval None
  */
void SystemInit (void)
{
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 800184c:	2280      	movs	r2, #128	; 0x80
 800184e:	4b10      	ldr	r3, [pc, #64]	; (8001890 <SystemInit+0x44>)
 8001850:	0052      	lsls	r2, r2, #1
 8001852:	6819      	ldr	r1, [r3, #0]
 8001854:	430a      	orrs	r2, r1
 8001856:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8001858:	68da      	ldr	r2, [r3, #12]
 800185a:	490e      	ldr	r1, [pc, #56]	; (8001894 <SystemInit+0x48>)
 800185c:	400a      	ands	r2, r1
 800185e:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	490d      	ldr	r1, [pc, #52]	; (8001898 <SystemInit+0x4c>)
 8001864:	400a      	ands	r2, r1

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001866:	2101      	movs	r1, #1
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8001868:	601a      	str	r2, [r3, #0]
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800186a:	689a      	ldr	r2, [r3, #8]
 800186c:	438a      	bics	r2, r1
 800186e:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	490a      	ldr	r1, [pc, #40]	; (800189c <SystemInit+0x50>)
 8001874:	400a      	ands	r2, r1
 8001876:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8001878:	68da      	ldr	r2, [r3, #12]
 800187a:	4909      	ldr	r1, [pc, #36]	; (80018a0 <SystemInit+0x54>)
 800187c:	400a      	ands	r2, r1
 800187e:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001880:	2200      	movs	r2, #0
 8001882:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001884:	2280      	movs	r2, #128	; 0x80
 8001886:	4b07      	ldr	r3, [pc, #28]	; (80018a4 <SystemInit+0x58>)
 8001888:	0512      	lsls	r2, r2, #20
 800188a:	609a      	str	r2, [r3, #8]
#endif

}
 800188c:	4770      	bx	lr
 800188e:	46c0      	nop			; (mov r8, r8)
 8001890:	40021000 	.word	0x40021000
 8001894:	88ff400c 	.word	0x88ff400c
 8001898:	fef6fff6 	.word	0xfef6fff6
 800189c:	fffbffff 	.word	0xfffbffff
 80018a0:	ff02ffff 	.word	0xff02ffff
 80018a4:	e000ed00 	.word	0xe000ed00

080018a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80018a8:	480d      	ldr	r0, [pc, #52]	; (80018e0 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80018aa:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 80018ac:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80018ae:	e003      	b.n	80018b8 <LoopCopyDataInit>

080018b0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80018b0:	4b0c      	ldr	r3, [pc, #48]	; (80018e4 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 80018b2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80018b4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80018b6:	3104      	adds	r1, #4

080018b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 80018b8:	480b      	ldr	r0, [pc, #44]	; (80018e8 <LoopForever+0xa>)
  ldr  r3, =_edata
 80018ba:	4b0c      	ldr	r3, [pc, #48]	; (80018ec <LoopForever+0xe>)
  adds  r2, r0, r1
 80018bc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80018be:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80018c0:	d3f6      	bcc.n	80018b0 <CopyDataInit>
  ldr  r2, =_sbss
 80018c2:	4a0b      	ldr	r2, [pc, #44]	; (80018f0 <LoopForever+0x12>)
  b  LoopFillZerobss
 80018c4:	e002      	b.n	80018cc <LoopFillZerobss>

080018c6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 80018c6:	2300      	movs	r3, #0
  str  r3, [r2]
 80018c8:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018ca:	3204      	adds	r2, #4

080018cc <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 80018cc:	4b09      	ldr	r3, [pc, #36]	; (80018f4 <LoopForever+0x16>)
  cmp  r2, r3
 80018ce:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80018d0:	d3f9      	bcc.n	80018c6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80018d2:	f7ff ffbb 	bl	800184c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018d6:	f001 fd5d 	bl	8003394 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018da:	f7ff ff5f 	bl	800179c <main>

080018de <LoopForever>:

LoopForever:
    b LoopForever
 80018de:	e7fe      	b.n	80018de <LoopForever>
   ldr   r0, =_estack
 80018e0:	20002000 	.word	0x20002000
  ldr  r3, =_sidata
 80018e4:	080034e8 	.word	0x080034e8
  ldr  r0, =_sdata
 80018e8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80018ec:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 80018f0:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 80018f4:	20000114 	.word	0x20000114

080018f8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018f8:	e7fe      	b.n	80018f8 <ADC1_COMP_IRQHandler>
	...

080018fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018fc:	b570      	push	{r4, r5, r6, lr}
 80018fe:	0005      	movs	r5, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001900:	20fa      	movs	r0, #250	; 0xfa
 8001902:	4b0d      	ldr	r3, [pc, #52]	; (8001938 <HAL_InitTick+0x3c>)
 8001904:	0080      	lsls	r0, r0, #2
 8001906:	7819      	ldrb	r1, [r3, #0]
 8001908:	f7fe fbfe 	bl	8000108 <__udivsi3>
 800190c:	4b0b      	ldr	r3, [pc, #44]	; (800193c <HAL_InitTick+0x40>)
 800190e:	0001      	movs	r1, r0
 8001910:	6818      	ldr	r0, [r3, #0]
 8001912:	f7fe fbf9 	bl	8000108 <__udivsi3>
 8001916:	f000 f899 	bl	8001a4c <HAL_SYSTICK_Config>
 800191a:	0004      	movs	r4, r0
  {
    return HAL_ERROR;
 800191c:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800191e:	2c00      	cmp	r4, #0
 8001920:	d109      	bne.n	8001936 <HAL_InitTick+0x3a>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001922:	2d03      	cmp	r5, #3
 8001924:	d807      	bhi.n	8001936 <HAL_InitTick+0x3a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001926:	3802      	subs	r0, #2
 8001928:	0022      	movs	r2, r4
 800192a:	0029      	movs	r1, r5
 800192c:	f000 f842 	bl	80019b4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001930:	0020      	movs	r0, r4
 8001932:	4b03      	ldr	r3, [pc, #12]	; (8001940 <HAL_InitTick+0x44>)
 8001934:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001936:	bd70      	pop	{r4, r5, r6, pc}
 8001938:	20000008 	.word	0x20000008
 800193c:	20000004 	.word	0x20000004
 8001940:	2000000c 	.word	0x2000000c

08001944 <HAL_Init>:
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001944:	2340      	movs	r3, #64	; 0x40
 8001946:	4a08      	ldr	r2, [pc, #32]	; (8001968 <HAL_Init+0x24>)
{
 8001948:	b510      	push	{r4, lr}
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800194a:	6811      	ldr	r1, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800194c:	2000      	movs	r0, #0
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800194e:	430b      	orrs	r3, r1
 8001950:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001952:	f7ff ffd3 	bl	80018fc <HAL_InitTick>
 8001956:	1e04      	subs	r4, r0, #0
 8001958:	d103      	bne.n	8001962 <HAL_Init+0x1e>
    HAL_MspInit();
 800195a:	f7ff ff31 	bl	80017c0 <HAL_MspInit>
}
 800195e:	0020      	movs	r0, r4
 8001960:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8001962:	2401      	movs	r4, #1
 8001964:	e7fb      	b.n	800195e <HAL_Init+0x1a>
 8001966:	46c0      	nop			; (mov r8, r8)
 8001968:	40022000 	.word	0x40022000

0800196c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800196c:	4a03      	ldr	r2, [pc, #12]	; (800197c <HAL_IncTick+0x10>)
 800196e:	4b04      	ldr	r3, [pc, #16]	; (8001980 <HAL_IncTick+0x14>)
 8001970:	6811      	ldr	r1, [r2, #0]
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	185b      	adds	r3, r3, r1
 8001976:	6013      	str	r3, [r2, #0]
}
 8001978:	4770      	bx	lr
 800197a:	46c0      	nop			; (mov r8, r8)
 800197c:	200000f8 	.word	0x200000f8
 8001980:	20000008 	.word	0x20000008

08001984 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001984:	4b01      	ldr	r3, [pc, #4]	; (800198c <HAL_GetTick+0x8>)
 8001986:	6818      	ldr	r0, [r3, #0]
}
 8001988:	4770      	bx	lr
 800198a:	46c0      	nop			; (mov r8, r8)
 800198c:	200000f8 	.word	0x200000f8

08001990 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001990:	b570      	push	{r4, r5, r6, lr}
 8001992:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001994:	f7ff fff6 	bl	8001984 <HAL_GetTick>
 8001998:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800199a:	1c63      	adds	r3, r4, #1
 800199c:	d002      	beq.n	80019a4 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800199e:	4b04      	ldr	r3, [pc, #16]	; (80019b0 <HAL_Delay+0x20>)
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	18e4      	adds	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80019a4:	f7ff ffee 	bl	8001984 <HAL_GetTick>
 80019a8:	1b40      	subs	r0, r0, r5
 80019aa:	42a0      	cmp	r0, r4
 80019ac:	d3fa      	bcc.n	80019a4 <HAL_Delay+0x14>
  {
  }
}
 80019ae:	bd70      	pop	{r4, r5, r6, pc}
 80019b0:	20000008 	.word	0x20000008

080019b4 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019b4:	b530      	push	{r4, r5, lr}
 80019b6:	25ff      	movs	r5, #255	; 0xff
 80019b8:	2403      	movs	r4, #3
 80019ba:	002a      	movs	r2, r5
 80019bc:	b2c3      	uxtb	r3, r0
 80019be:	401c      	ands	r4, r3
 80019c0:	00e4      	lsls	r4, r4, #3
 80019c2:	40a2      	lsls	r2, r4
 80019c4:	0189      	lsls	r1, r1, #6
 80019c6:	4029      	ands	r1, r5
 80019c8:	43d2      	mvns	r2, r2
 80019ca:	40a1      	lsls	r1, r4
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 80019cc:	2800      	cmp	r0, #0
 80019ce:	da0b      	bge.n	80019e8 <HAL_NVIC_SetPriority+0x34>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80019d0:	200f      	movs	r0, #15
 80019d2:	4003      	ands	r3, r0
 80019d4:	3b08      	subs	r3, #8
 80019d6:	480a      	ldr	r0, [pc, #40]	; (8001a00 <HAL_NVIC_SetPriority+0x4c>)
 80019d8:	089b      	lsrs	r3, r3, #2
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	181b      	adds	r3, r3, r0
 80019de:	69d8      	ldr	r0, [r3, #28]
 80019e0:	4002      	ands	r2, r0
 80019e2:	4311      	orrs	r1, r2
 80019e4:	61d9      	str	r1, [r3, #28]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 80019e6:	bd30      	pop	{r4, r5, pc}
 80019e8:	4b06      	ldr	r3, [pc, #24]	; (8001a04 <HAL_NVIC_SetPriority+0x50>)
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80019ea:	0880      	lsrs	r0, r0, #2
 80019ec:	0080      	lsls	r0, r0, #2
 80019ee:	18c0      	adds	r0, r0, r3
 80019f0:	23c0      	movs	r3, #192	; 0xc0
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	58c4      	ldr	r4, [r0, r3]
 80019f6:	4022      	ands	r2, r4
 80019f8:	4311      	orrs	r1, r2
 80019fa:	50c1      	str	r1, [r0, r3]
 80019fc:	e7f3      	b.n	80019e6 <HAL_NVIC_SetPriority+0x32>
 80019fe:	46c0      	nop			; (mov r8, r8)
 8001a00:	e000ed00 	.word	0xe000ed00
 8001a04:	e000e100 	.word	0xe000e100

08001a08 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001a08:	231f      	movs	r3, #31
 8001a0a:	4018      	ands	r0, r3
 8001a0c:	3b1e      	subs	r3, #30
 8001a0e:	4083      	lsls	r3, r0
 8001a10:	4a01      	ldr	r2, [pc, #4]	; (8001a18 <HAL_NVIC_EnableIRQ+0x10>)
 8001a12:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001a14:	4770      	bx	lr
 8001a16:	46c0      	nop			; (mov r8, r8)
 8001a18:	e000e100 	.word	0xe000e100

08001a1c <HAL_NVIC_DisableIRQ>:
  NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001a1c:	231f      	movs	r3, #31
 8001a1e:	4018      	ands	r0, r3
 8001a20:	3b1e      	subs	r3, #30
 8001a22:	4083      	lsls	r3, r0
 8001a24:	4a01      	ldr	r2, [pc, #4]	; (8001a2c <HAL_NVIC_DisableIRQ+0x10>)
 8001a26:	67d3      	str	r3, [r2, #124]	; 0x7c
    /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8001a28:	4770      	bx	lr
 8001a2a:	46c0      	nop			; (mov r8, r8)
 8001a2c:	e000e104 	.word	0xe000e104

08001a30 <HAL_NVIC_SystemReset>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001a30:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a34:	4b03      	ldr	r3, [pc, #12]	; (8001a44 <HAL_NVIC_SystemReset+0x14>)
 8001a36:	4a04      	ldr	r2, [pc, #16]	; (8001a48 <HAL_NVIC_SystemReset+0x18>)
 8001a38:	60da      	str	r2, [r3, #12]
 8001a3a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8001a3e:	46c0      	nop			; (mov r8, r8)
 8001a40:	e7fd      	b.n	8001a3e <HAL_NVIC_SystemReset+0xe>
 8001a42:	46c0      	nop			; (mov r8, r8)
 8001a44:	e000ed00 	.word	0xe000ed00
 8001a48:	05fa0004 	.word	0x05fa0004

08001a4c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a4c:	4a09      	ldr	r2, [pc, #36]	; (8001a74 <HAL_SYSTICK_Config+0x28>)
 8001a4e:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a50:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d80d      	bhi.n	8001a72 <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a56:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a58:	4a07      	ldr	r2, [pc, #28]	; (8001a78 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a5a:	4808      	ldr	r0, [pc, #32]	; (8001a7c <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a5c:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a5e:	6a03      	ldr	r3, [r0, #32]
 8001a60:	0609      	lsls	r1, r1, #24
 8001a62:	021b      	lsls	r3, r3, #8
 8001a64:	0a1b      	lsrs	r3, r3, #8
 8001a66:	430b      	orrs	r3, r1
 8001a68:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a6a:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a6c:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a6e:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a70:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001a72:	4770      	bx	lr
 8001a74:	00ffffff 	.word	0x00ffffff
 8001a78:	e000e010 	.word	0xe000e010
 8001a7c:	e000ed00 	.word	0xe000ed00

08001a80 <HAL_NVIC_ClearPendingIRQ>:
  NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001a80:	231f      	movs	r3, #31
 8001a82:	22c0      	movs	r2, #192	; 0xc0
 8001a84:	4018      	ands	r0, r3
 8001a86:	3b1e      	subs	r3, #30
 8001a88:	4083      	lsls	r3, r0
 8001a8a:	4902      	ldr	r1, [pc, #8]	; (8001a94 <HAL_NVIC_ClearPendingIRQ+0x14>)
 8001a8c:	0052      	lsls	r2, r2, #1
 8001a8e:	508b      	str	r3, [r1, r2]
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{ 
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
}
 8001a90:	4770      	bx	lr
 8001a92:	46c0      	nop			; (mov r8, r8)
 8001a94:	e000e100 	.word	0xe000e100

08001a98 <FLASH_SetErrorCode>:
  */
static void FLASH_SetErrorCode(void)
{
  uint32_t flags = 0;
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8001a98:	2180      	movs	r1, #128	; 0x80
 8001a9a:	4a27      	ldr	r2, [pc, #156]	; (8001b38 <FLASH_SetErrorCode+0xa0>)
 8001a9c:	0049      	lsls	r1, r1, #1
 8001a9e:	6990      	ldr	r0, [r2, #24]
{
 8001aa0:	b530      	push	{r4, r5, lr}
  uint32_t flags = 0;
 8001aa2:	2300      	movs	r3, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8001aa4:	4208      	tst	r0, r1
 8001aa6:	d005      	beq.n	8001ab4 <FLASH_SetErrorCode+0x1c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001aa8:	4824      	ldr	r0, [pc, #144]	; (8001b3c <FLASH_SetErrorCode+0xa4>)
 8001aaa:	3302      	adds	r3, #2
 8001aac:	6944      	ldr	r4, [r0, #20]
 8001aae:	4323      	orrs	r3, r4
 8001ab0:	6143      	str	r3, [r0, #20]
    flags |= FLASH_FLAG_WRPERR;
 8001ab2:	000b      	movs	r3, r1
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 8001ab4:	2080      	movs	r0, #128	; 0x80
 8001ab6:	6991      	ldr	r1, [r2, #24]
 8001ab8:	0080      	lsls	r0, r0, #2
 8001aba:	4201      	tst	r1, r0
 8001abc:	d005      	beq.n	8001aca <FLASH_SetErrorCode+0x32>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001abe:	2101      	movs	r1, #1
 8001ac0:	4c1e      	ldr	r4, [pc, #120]	; (8001b3c <FLASH_SetErrorCode+0xa4>)
    flags |= FLASH_FLAG_PGAERR;
 8001ac2:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001ac4:	6965      	ldr	r5, [r4, #20]
 8001ac6:	4329      	orrs	r1, r5
 8001ac8:	6161      	str	r1, [r4, #20]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 8001aca:	2080      	movs	r0, #128	; 0x80
 8001acc:	6991      	ldr	r1, [r2, #24]
 8001ace:	00c0      	lsls	r0, r0, #3
 8001ad0:	4201      	tst	r1, r0
 8001ad2:	d005      	beq.n	8001ae0 <FLASH_SetErrorCode+0x48>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 8001ad4:	2108      	movs	r1, #8
 8001ad6:	4c19      	ldr	r4, [pc, #100]	; (8001b3c <FLASH_SetErrorCode+0xa4>)
    flags |= FLASH_FLAG_SIZERR;
 8001ad8:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 8001ada:	6965      	ldr	r5, [r4, #20]
 8001adc:	4329      	orrs	r1, r5
 8001ade:	6161      	str	r1, [r4, #20]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8001ae0:	2080      	movs	r0, #128	; 0x80
 8001ae2:	6991      	ldr	r1, [r2, #24]
 8001ae4:	0100      	lsls	r0, r0, #4
 8001ae6:	4201      	tst	r1, r0
 8001ae8:	d005      	beq.n	8001af6 <FLASH_SetErrorCode+0x5e>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8001aea:	2104      	movs	r1, #4
 8001aec:	4c13      	ldr	r4, [pc, #76]	; (8001b3c <FLASH_SetErrorCode+0xa4>)
    flags |= FLASH_FLAG_OPTVERR;
 8001aee:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8001af0:	6965      	ldr	r5, [r4, #20]
 8001af2:	4329      	orrs	r1, r5
 8001af4:	6161      	str	r1, [r4, #20]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 8001af6:	2080      	movs	r0, #128	; 0x80
 8001af8:	6991      	ldr	r1, [r2, #24]
 8001afa:	0180      	lsls	r0, r0, #6
 8001afc:	4201      	tst	r1, r0
 8001afe:	d005      	beq.n	8001b0c <FLASH_SetErrorCode+0x74>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8001b00:	2110      	movs	r1, #16
 8001b02:	4c0e      	ldr	r4, [pc, #56]	; (8001b3c <FLASH_SetErrorCode+0xa4>)
    flags |= FLASH_FLAG_RDERR;
 8001b04:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8001b06:	6965      	ldr	r5, [r4, #20]
 8001b08:	4329      	orrs	r1, r5
 8001b0a:	6161      	str	r1, [r4, #20]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR))
 8001b0c:	6991      	ldr	r1, [r2, #24]
 8001b0e:	0389      	lsls	r1, r1, #14
 8001b10:	d505      	bpl.n	8001b1e <FLASH_SetErrorCode+0x86>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 8001b12:	2020      	movs	r0, #32
 8001b14:	4c09      	ldr	r4, [pc, #36]	; (8001b3c <FLASH_SetErrorCode+0xa4>)
    flags |= HAL_FLASH_ERROR_FWWERR;
 8001b16:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 8001b18:	6961      	ldr	r1, [r4, #20]
 8001b1a:	4301      	orrs	r1, r0
 8001b1c:	6161      	str	r1, [r4, #20]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR))
 8001b1e:	2080      	movs	r0, #128	; 0x80
 8001b20:	6991      	ldr	r1, [r2, #24]
 8001b22:	0240      	lsls	r0, r0, #9
 8001b24:	4201      	tst	r1, r0
 8001b26:	d005      	beq.n	8001b34 <FLASH_SetErrorCode+0x9c>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 8001b28:	2140      	movs	r1, #64	; 0x40
 8001b2a:	4c04      	ldr	r4, [pc, #16]	; (8001b3c <FLASH_SetErrorCode+0xa4>)
    flags |= FLASH_FLAG_NOTZEROERR;
 8001b2c:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 8001b2e:	6965      	ldr	r5, [r4, #20]
 8001b30:	4329      	orrs	r1, r5
 8001b32:	6161      	str	r1, [r4, #20]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001b34:	6193      	str	r3, [r2, #24]
}  
 8001b36:	bd30      	pop	{r4, r5, pc}
 8001b38:	40022000 	.word	0x40022000
 8001b3c:	200000fc 	.word	0x200000fc

08001b40 <FLASH_WaitForLastOperation>:
{
 8001b40:	b570      	push	{r4, r5, r6, lr}
 8001b42:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001b44:	f7ff ff1e 	bl	8001984 <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001b48:	2501      	movs	r5, #1
  uint32_t tickstart = HAL_GetTick();
 8001b4a:	0006      	movs	r6, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001b4c:	4a18      	ldr	r2, [pc, #96]	; (8001bb0 <FLASH_WaitForLastOperation+0x70>)
 8001b4e:	0013      	movs	r3, r2
 8001b50:	6991      	ldr	r1, [r2, #24]
 8001b52:	4229      	tst	r1, r5
 8001b54:	d11f      	bne.n	8001b96 <FLASH_WaitForLastOperation+0x56>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8001b56:	2102      	movs	r1, #2
 8001b58:	6990      	ldr	r0, [r2, #24]
 8001b5a:	4208      	tst	r0, r1
 8001b5c:	d000      	beq.n	8001b60 <FLASH_WaitForLastOperation+0x20>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001b5e:	6191      	str	r1, [r2, #24]
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 8001b60:	699a      	ldr	r2, [r3, #24]
 8001b62:	05d2      	lsls	r2, r2, #23
 8001b64:	d413      	bmi.n	8001b8e <FLASH_WaitForLastOperation+0x4e>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 8001b66:	699a      	ldr	r2, [r3, #24]
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 8001b68:	0592      	lsls	r2, r2, #22
 8001b6a:	d410      	bmi.n	8001b8e <FLASH_WaitForLastOperation+0x4e>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 8001b6c:	699a      	ldr	r2, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 8001b6e:	0552      	lsls	r2, r2, #21
 8001b70:	d40d      	bmi.n	8001b8e <FLASH_WaitForLastOperation+0x4e>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 8001b72:	699a      	ldr	r2, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 8001b74:	0512      	lsls	r2, r2, #20
 8001b76:	d40a      	bmi.n	8001b8e <FLASH_WaitForLastOperation+0x4e>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 8001b78:	699a      	ldr	r2, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 8001b7a:	0492      	lsls	r2, r2, #18
 8001b7c:	d407      	bmi.n	8001b8e <FLASH_WaitForLastOperation+0x4e>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 8001b7e:	2280      	movs	r2, #128	; 0x80
 8001b80:	6998      	ldr	r0, [r3, #24]
 8001b82:	0292      	lsls	r2, r2, #10
 8001b84:	4010      	ands	r0, r2
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 8001b86:	d102      	bne.n	8001b8e <FLASH_WaitForLastOperation+0x4e>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) )
 8001b88:	699b      	ldr	r3, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 8001b8a:	03db      	lsls	r3, r3, #15
 8001b8c:	d508      	bpl.n	8001ba0 <FLASH_WaitForLastOperation+0x60>
    FLASH_SetErrorCode();
 8001b8e:	f7ff ff83 	bl	8001a98 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001b92:	2001      	movs	r0, #1
 8001b94:	e004      	b.n	8001ba0 <FLASH_WaitForLastOperation+0x60>
    if (Timeout != HAL_MAX_DELAY)
 8001b96:	1c61      	adds	r1, r4, #1
 8001b98:	d0da      	beq.n	8001b50 <FLASH_WaitForLastOperation+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8001b9a:	2c00      	cmp	r4, #0
 8001b9c:	d101      	bne.n	8001ba2 <FLASH_WaitForLastOperation+0x62>
        return HAL_TIMEOUT;
 8001b9e:	2003      	movs	r0, #3
}
 8001ba0:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8001ba2:	f7ff feef 	bl	8001984 <HAL_GetTick>
 8001ba6:	1b80      	subs	r0, r0, r6
 8001ba8:	42a0      	cmp	r0, r4
 8001baa:	d9cf      	bls.n	8001b4c <FLASH_WaitForLastOperation+0xc>
 8001bac:	e7f7      	b.n	8001b9e <FLASH_WaitForLastOperation+0x5e>
 8001bae:	46c0      	nop			; (mov r8, r8)
 8001bb0:	40022000 	.word	0x40022000

08001bb4 <HAL_FLASHEx_DATAEEPROM_Unlock>:
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Unlock(void)
{
  uint32_t primask_bit;

  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	4b08      	ldr	r3, [pc, #32]	; (8001bd8 <HAL_FLASHEx_DATAEEPROM_Unlock+0x24>)
    {
      return HAL_ERROR;
    }
  }

  return HAL_OK;  
 8001bb8:	2000      	movs	r0, #0
  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 8001bba:	6859      	ldr	r1, [r3, #4]
 8001bbc:	4211      	tst	r1, r2
 8001bbe:	d00a      	beq.n	8001bd6 <HAL_FLASHEx_DATAEEPROM_Unlock+0x22>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8001bc0:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8001bc4:	b672      	cpsid	i
    FLASH->PEKEYR = FLASH_PEKEY1;
 8001bc6:	4805      	ldr	r0, [pc, #20]	; (8001bdc <HAL_FLASHEx_DATAEEPROM_Unlock+0x28>)
 8001bc8:	60d8      	str	r0, [r3, #12]
    FLASH->PEKEYR = FLASH_PEKEY2;
 8001bca:	4805      	ldr	r0, [pc, #20]	; (8001be0 <HAL_FLASHEx_DATAEEPROM_Unlock+0x2c>)
 8001bcc:	60d8      	str	r0, [r3, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001bce:	f381 8810 	msr	PRIMASK, r1
    if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 8001bd2:	6858      	ldr	r0, [r3, #4]
      return HAL_ERROR;
 8001bd4:	4010      	ands	r0, r2
}
 8001bd6:	4770      	bx	lr
 8001bd8:	40022000 	.word	0x40022000
 8001bdc:	89abcdef 	.word	0x89abcdef
 8001be0:	02030405 	.word	0x02030405

08001be4 <HAL_FLASHEx_DATAEEPROM_Lock>:
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Lock(void)
{
  /* Set the PELOCK Bit to lock the data memory and FLASH_PECR register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 8001be4:	2301      	movs	r3, #1
 8001be6:	4a03      	ldr	r2, [pc, #12]	; (8001bf4 <HAL_FLASHEx_DATAEEPROM_Lock+0x10>)
  
  return HAL_OK;
}
 8001be8:	2000      	movs	r0, #0
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 8001bea:	6851      	ldr	r1, [r2, #4]
 8001bec:	430b      	orrs	r3, r1
 8001bee:	6053      	str	r3, [r2, #4]
}
 8001bf0:	4770      	bx	lr
 8001bf2:	46c0      	nop			; (mov r8, r8)
 8001bf4:	40022000 	.word	0x40022000

08001bf8 <HAL_FLASHEx_DATAEEPROM_Program>:
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */

HAL_StatusTypeDef   HAL_FLASHEx_DATAEEPROM_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 8001bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef status = HAL_ERROR;
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001bfa:	4d12      	ldr	r5, [pc, #72]	; (8001c44 <HAL_FLASHEx_DATAEEPROM_Program+0x4c>)
{
 8001bfc:	0007      	movs	r7, r0
  __HAL_LOCK(&pFlash);
 8001bfe:	7c2b      	ldrb	r3, [r5, #16]
{
 8001c00:	000e      	movs	r6, r1
 8001c02:	0014      	movs	r4, r2
  __HAL_LOCK(&pFlash);
 8001c04:	2002      	movs	r0, #2
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d00c      	beq.n	8001c24 <HAL_FLASHEx_DATAEEPROM_Program+0x2c>
 8001c0a:	2301      	movs	r3, #1
  /* Check the parameters */
  assert_param(IS_TYPEPROGRAMDATA(TypeProgram));
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001c0c:	480e      	ldr	r0, [pc, #56]	; (8001c48 <HAL_FLASHEx_DATAEEPROM_Program+0x50>)
  __HAL_LOCK(&pFlash);
 8001c0e:	742b      	strb	r3, [r5, #16]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001c10:	f7ff ff96 	bl	8001b40 <FLASH_WaitForLastOperation>
  
  if(status == HAL_OK)
 8001c14:	2800      	cmp	r0, #0
 8001c16:	d103      	bne.n	8001c20 <HAL_FLASHEx_DATAEEPROM_Program+0x28>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001c18:	6168      	str	r0, [r5, #20]

    if(TypeProgram == FLASH_TYPEPROGRAMDATA_WORD)
 8001c1a:	2f02      	cmp	r7, #2
 8001c1c:	d103      	bne.n	8001c26 <HAL_FLASHEx_DATAEEPROM_Program+0x2e>
    {
      /* Program word (32-bit) at a specified address.*/
      *(__IO uint32_t *)Address = Data;
 8001c1e:	6034      	str	r4, [r6, #0]
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001c20:	2300      	movs	r3, #0
 8001c22:	742b      	strb	r3, [r5, #16]

  return status;
}
 8001c24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_HALFWORD)
 8001c26:	2f01      	cmp	r7, #1
 8001c28:	d102      	bne.n	8001c30 <HAL_FLASHEx_DATAEEPROM_Program+0x38>
      *(__IO uint16_t *)Address = (uint16_t) Data;
 8001c2a:	b2a4      	uxth	r4, r4
 8001c2c:	8034      	strh	r4, [r6, #0]
 8001c2e:	e7f7      	b.n	8001c20 <HAL_FLASHEx_DATAEEPROM_Program+0x28>
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_BYTE)
 8001c30:	2f00      	cmp	r7, #0
 8001c32:	d003      	beq.n	8001c3c <HAL_FLASHEx_DATAEEPROM_Program+0x44>
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001c34:	4804      	ldr	r0, [pc, #16]	; (8001c48 <HAL_FLASHEx_DATAEEPROM_Program+0x50>)
 8001c36:	f7ff ff83 	bl	8001b40 <FLASH_WaitForLastOperation>
 8001c3a:	e7f1      	b.n	8001c20 <HAL_FLASHEx_DATAEEPROM_Program+0x28>
      *(__IO uint8_t *)Address = (uint8_t) Data;
 8001c3c:	b2e4      	uxtb	r4, r4
 8001c3e:	7034      	strb	r4, [r6, #0]
 8001c40:	e7ee      	b.n	8001c20 <HAL_FLASHEx_DATAEEPROM_Program+0x28>
 8001c42:	46c0      	nop			; (mov r8, r8)
 8001c44:	200000fc 	.word	0x200000fc
 8001c48:	0000c350 	.word	0x0000c350

08001c4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c4c:	b5f0      	push	{r4, r5, r6, r7, lr}
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001c4e:	4a52      	ldr	r2, [pc, #328]	; (8001d98 <HAL_GPIO_Init+0x14c>)
  while (((GPIO_Init->Pin) >> position) != 0)
 8001c50:	680b      	ldr	r3, [r1, #0]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001c52:	1882      	adds	r2, r0, r2
 8001c54:	1e54      	subs	r4, r2, #1
 8001c56:	41a2      	sbcs	r2, r4
{
 8001c58:	b087      	sub	sp, #28
  while (((GPIO_Init->Pin) >> position) != 0)
 8001c5a:	9304      	str	r3, [sp, #16]
  uint32_t position = 0x00U;
 8001c5c:	2300      	movs	r3, #0
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001c5e:	3205      	adds	r2, #5
 8001c60:	9205      	str	r2, [sp, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001c62:	9a04      	ldr	r2, [sp, #16]
 8001c64:	40da      	lsrs	r2, r3
 8001c66:	d101      	bne.n	8001c6c <HAL_GPIO_Init+0x20>
        EXTI->FTSR = temp;
      }
    }
    position++;
  }
}
 8001c68:	b007      	add	sp, #28
 8001c6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001c6c:	2701      	movs	r7, #1
 8001c6e:	003a      	movs	r2, r7
 8001c70:	409a      	lsls	r2, r3
 8001c72:	9203      	str	r2, [sp, #12]
 8001c74:	9c03      	ldr	r4, [sp, #12]
 8001c76:	9a04      	ldr	r2, [sp, #16]
 8001c78:	4022      	ands	r2, r4
 8001c7a:	9201      	str	r2, [sp, #4]
    if (iocurrent)
 8001c7c:	d100      	bne.n	8001c80 <HAL_GPIO_Init+0x34>
 8001c7e:	e089      	b.n	8001d94 <HAL_GPIO_Init+0x148>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c80:	684a      	ldr	r2, [r1, #4]
 8001c82:	005c      	lsls	r4, r3, #1
 8001c84:	4694      	mov	ip, r2
 8001c86:	2210      	movs	r2, #16
 8001c88:	4666      	mov	r6, ip
 8001c8a:	4396      	bics	r6, r2
 8001c8c:	3a0d      	subs	r2, #13
 8001c8e:	40a2      	lsls	r2, r4
 8001c90:	43d2      	mvns	r2, r2
 8001c92:	9202      	str	r2, [sp, #8]
 8001c94:	1e72      	subs	r2, r6, #1
 8001c96:	42ba      	cmp	r2, r7
 8001c98:	d80f      	bhi.n	8001cba <HAL_GPIO_Init+0x6e>
        temp = GPIOx->OSPEEDR;
 8001c9a:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001c9c:	9a02      	ldr	r2, [sp, #8]
 8001c9e:	4015      	ands	r5, r2
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ca0:	68ca      	ldr	r2, [r1, #12]
 8001ca2:	40a2      	lsls	r2, r4
 8001ca4:	432a      	orrs	r2, r5
        GPIOx->OSPEEDR = temp;
 8001ca6:	6082      	str	r2, [r0, #8]
        temp = GPIOx->OTYPER;
 8001ca8:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001caa:	9a03      	ldr	r2, [sp, #12]
 8001cac:	4395      	bics	r5, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001cae:	4662      	mov	r2, ip
 8001cb0:	0912      	lsrs	r2, r2, #4
 8001cb2:	403a      	ands	r2, r7
 8001cb4:	409a      	lsls	r2, r3
 8001cb6:	432a      	orrs	r2, r5
        GPIOx->OTYPER = temp;
 8001cb8:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 8001cba:	68c5      	ldr	r5, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001cbc:	9a02      	ldr	r2, [sp, #8]
 8001cbe:	4015      	ands	r5, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cc0:	688a      	ldr	r2, [r1, #8]
 8001cc2:	40a2      	lsls	r2, r4
 8001cc4:	432a      	orrs	r2, r5
      GPIOx->PUPDR = temp;
 8001cc6:	60c2      	str	r2, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cc8:	2e02      	cmp	r6, #2
 8001cca:	d10d      	bne.n	8001ce8 <HAL_GPIO_Init+0x9c>
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U));
 8001ccc:	2507      	movs	r5, #7
 8001cce:	270f      	movs	r7, #15
 8001cd0:	401d      	ands	r5, r3
 8001cd2:	00ad      	lsls	r5, r5, #2
 8001cd4:	40af      	lsls	r7, r5
        temp = GPIOx->AFR[position >> 3U];
 8001cd6:	08da      	lsrs	r2, r3, #3
 8001cd8:	0092      	lsls	r2, r2, #2
 8001cda:	1882      	adds	r2, r0, r2
 8001cdc:	6a16      	ldr	r6, [r2, #32]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U));
 8001cde:	43be      	bics	r6, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001ce0:	690f      	ldr	r7, [r1, #16]
 8001ce2:	40af      	lsls	r7, r5
 8001ce4:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3U] = temp;
 8001ce6:	6216      	str	r6, [r2, #32]
      temp = GPIOx->MODER;
 8001ce8:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001cea:	9a02      	ldr	r2, [sp, #8]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cec:	4665      	mov	r5, ip
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001cee:	4032      	ands	r2, r6
 8001cf0:	0016      	movs	r6, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cf2:	2203      	movs	r2, #3
 8001cf4:	4015      	ands	r5, r2
 8001cf6:	40a5      	lsls	r5, r4
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001cf8:	4664      	mov	r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cfa:	4335      	orrs	r5, r6
      GPIOx->MODER = temp;
 8001cfc:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001cfe:	00e4      	lsls	r4, r4, #3
 8001d00:	d548      	bpl.n	8001d94 <HAL_GPIO_Init+0x148>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d02:	2701      	movs	r7, #1
 8001d04:	4d25      	ldr	r5, [pc, #148]	; (8001d9c <HAL_GPIO_Init+0x150>)
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8001d06:	401a      	ands	r2, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d08:	6b6c      	ldr	r4, [r5, #52]	; 0x34
 8001d0a:	433c      	orrs	r4, r7
 8001d0c:	636c      	str	r4, [r5, #52]	; 0x34
 8001d0e:	4c24      	ldr	r4, [pc, #144]	; (8001da0 <HAL_GPIO_Init+0x154>)
        temp = SYSCFG->EXTICR[position >> 2U];
 8001d10:	089d      	lsrs	r5, r3, #2
 8001d12:	00ad      	lsls	r5, r5, #2
 8001d14:	192d      	adds	r5, r5, r4
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8001d16:	0094      	lsls	r4, r2, #2
 8001d18:	220f      	movs	r2, #15
 8001d1a:	40a2      	lsls	r2, r4
        temp = SYSCFG->EXTICR[position >> 2U];
 8001d1c:	68ae      	ldr	r6, [r5, #8]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8001d1e:	4396      	bics	r6, r2
 8001d20:	9602      	str	r6, [sp, #8]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001d22:	26a0      	movs	r6, #160	; 0xa0
 8001d24:	2200      	movs	r2, #0
 8001d26:	05f6      	lsls	r6, r6, #23
 8001d28:	42b0      	cmp	r0, r6
 8001d2a:	d008      	beq.n	8001d3e <HAL_GPIO_Init+0xf2>
 8001d2c:	4e1d      	ldr	r6, [pc, #116]	; (8001da4 <HAL_GPIO_Init+0x158>)
 8001d2e:	003a      	movs	r2, r7
 8001d30:	42b0      	cmp	r0, r6
 8001d32:	d004      	beq.n	8001d3e <HAL_GPIO_Init+0xf2>
 8001d34:	4f1c      	ldr	r7, [pc, #112]	; (8001da8 <HAL_GPIO_Init+0x15c>)
 8001d36:	1892      	adds	r2, r2, r2
 8001d38:	42b8      	cmp	r0, r7
 8001d3a:	d000      	beq.n	8001d3e <HAL_GPIO_Init+0xf2>
 8001d3c:	9a05      	ldr	r2, [sp, #20]
 8001d3e:	40a2      	lsls	r2, r4
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d40:	4667      	mov	r7, ip
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001d42:	9c02      	ldr	r4, [sp, #8]
 8001d44:	4322      	orrs	r2, r4
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d46:	60aa      	str	r2, [r5, #8]
        temp = EXTI->IMR;
 8001d48:	4a18      	ldr	r2, [pc, #96]	; (8001dac <HAL_GPIO_Init+0x160>)
        temp &= ~((uint32_t)iocurrent);
 8001d4a:	9c01      	ldr	r4, [sp, #4]
        temp = EXTI->IMR;
 8001d4c:	6816      	ldr	r6, [r2, #0]
          temp |= iocurrent;
 8001d4e:	9d01      	ldr	r5, [sp, #4]
        temp &= ~((uint32_t)iocurrent);
 8001d50:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 8001d52:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d54:	03ff      	lsls	r7, r7, #15
 8001d56:	d401      	bmi.n	8001d5c <HAL_GPIO_Init+0x110>
        temp &= ~((uint32_t)iocurrent);
 8001d58:	0035      	movs	r5, r6
 8001d5a:	4025      	ands	r5, r4
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d5c:	4667      	mov	r7, ip
        EXTI->IMR = temp;
 8001d5e:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8001d60:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 8001d62:	9d01      	ldr	r5, [sp, #4]
 8001d64:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d66:	03bf      	lsls	r7, r7, #14
 8001d68:	d401      	bmi.n	8001d6e <HAL_GPIO_Init+0x122>
        temp &= ~((uint32_t)iocurrent);
 8001d6a:	0035      	movs	r5, r6
 8001d6c:	4025      	ands	r5, r4
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d6e:	4667      	mov	r7, ip
        EXTI->EMR = temp;
 8001d70:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8001d72:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 8001d74:	9d01      	ldr	r5, [sp, #4]
 8001d76:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d78:	02ff      	lsls	r7, r7, #11
 8001d7a:	d401      	bmi.n	8001d80 <HAL_GPIO_Init+0x134>
        temp &= ~((uint32_t)iocurrent);
 8001d7c:	0035      	movs	r5, r6
 8001d7e:	4025      	ands	r5, r4
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d80:	4667      	mov	r7, ip
        EXTI->RTSR = temp;
 8001d82:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8001d84:	68d5      	ldr	r5, [r2, #12]
          temp |= iocurrent;
 8001d86:	9e01      	ldr	r6, [sp, #4]
 8001d88:	432e      	orrs	r6, r5
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d8a:	02bf      	lsls	r7, r7, #10
 8001d8c:	d401      	bmi.n	8001d92 <HAL_GPIO_Init+0x146>
        temp &= ~((uint32_t)iocurrent);
 8001d8e:	4025      	ands	r5, r4
 8001d90:	002e      	movs	r6, r5
        EXTI->FTSR = temp;
 8001d92:	60d6      	str	r6, [r2, #12]
    position++;
 8001d94:	3301      	adds	r3, #1
 8001d96:	e764      	b.n	8001c62 <HAL_GPIO_Init+0x16>
 8001d98:	afffe400 	.word	0xafffe400
 8001d9c:	40021000 	.word	0x40021000
 8001da0:	40010000 	.word	0x40010000
 8001da4:	50000400 	.word	0x50000400
 8001da8:	50000800 	.word	0x50000800
 8001dac:	40010400 	.word	0x40010400

08001db0 <HAL_GPIO_DeInit>:
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (((uint32_t)0x0FU) << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8001db0:	4a32      	ldr	r2, [pc, #200]	; (8001e7c <HAL_GPIO_DeInit+0xcc>)
{
 8001db2:	b5f0      	push	{r4, r5, r6, r7, lr}
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8001db4:	1882      	adds	r2, r0, r2
 8001db6:	1e54      	subs	r4, r2, #1
 8001db8:	41a2      	sbcs	r2, r4
  uint32_t position = 0x00U;
 8001dba:	2300      	movs	r3, #0
{
 8001dbc:	b085      	sub	sp, #20
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8001dbe:	3205      	adds	r2, #5
 8001dc0:	9203      	str	r2, [sp, #12]
  while ((GPIO_Pin >> position) != 0)
 8001dc2:	000a      	movs	r2, r1
 8001dc4:	40da      	lsrs	r2, r3
 8001dc6:	d101      	bne.n	8001dcc <HAL_GPIO_DeInit+0x1c>
      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
    }
    position++;
  }
}
 8001dc8:	b005      	add	sp, #20
 8001dca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Pin) & (1U << position);
 8001dcc:	2201      	movs	r2, #1
 8001dce:	409a      	lsls	r2, r3
 8001dd0:	0014      	movs	r4, r2
 8001dd2:	9200      	str	r2, [sp, #0]
 8001dd4:	400c      	ands	r4, r1
    if (iocurrent)
 8001dd6:	d04f      	beq.n	8001e78 <HAL_GPIO_DeInit+0xc8>
 8001dd8:	4d29      	ldr	r5, [pc, #164]	; (8001e80 <HAL_GPIO_DeInit+0xd0>)
      tmp = SYSCFG->EXTICR[position >> 2U];
 8001dda:	089a      	lsrs	r2, r3, #2
 8001ddc:	0092      	lsls	r2, r2, #2
 8001dde:	1952      	adds	r2, r2, r5
 8001de0:	6895      	ldr	r5, [r2, #8]
      tmp &= (((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8001de2:	2603      	movs	r6, #3
      tmp = SYSCFG->EXTICR[position >> 2U];
 8001de4:	002f      	movs	r7, r5
      tmp &= (((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8001de6:	250f      	movs	r5, #15
 8001de8:	401e      	ands	r6, r3
 8001dea:	00b6      	lsls	r6, r6, #2
 8001dec:	40b5      	lsls	r5, r6
 8001dee:	9501      	str	r5, [sp, #4]
 8001df0:	403d      	ands	r5, r7
 8001df2:	9502      	str	r5, [sp, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8001df4:	25a0      	movs	r5, #160	; 0xa0
 8001df6:	05ed      	lsls	r5, r5, #23
 8001df8:	46ac      	mov	ip, r5
 8001dfa:	2500      	movs	r5, #0
 8001dfc:	4560      	cmp	r0, ip
 8001dfe:	d009      	beq.n	8001e14 <HAL_GPIO_DeInit+0x64>
 8001e00:	4d20      	ldr	r5, [pc, #128]	; (8001e84 <HAL_GPIO_DeInit+0xd4>)
 8001e02:	46ac      	mov	ip, r5
 8001e04:	2501      	movs	r5, #1
 8001e06:	4560      	cmp	r0, ip
 8001e08:	d004      	beq.n	8001e14 <HAL_GPIO_DeInit+0x64>
 8001e0a:	4f1f      	ldr	r7, [pc, #124]	; (8001e88 <HAL_GPIO_DeInit+0xd8>)
 8001e0c:	196d      	adds	r5, r5, r5
 8001e0e:	42b8      	cmp	r0, r7
 8001e10:	d000      	beq.n	8001e14 <HAL_GPIO_DeInit+0x64>
 8001e12:	9d03      	ldr	r5, [sp, #12]
 8001e14:	40b5      	lsls	r5, r6
 8001e16:	9e02      	ldr	r6, [sp, #8]
 8001e18:	42b5      	cmp	r5, r6
 8001e1a:	d111      	bne.n	8001e40 <HAL_GPIO_DeInit+0x90>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8001e1c:	43e4      	mvns	r4, r4
 8001e1e:	4d1b      	ldr	r5, [pc, #108]	; (8001e8c <HAL_GPIO_DeInit+0xdc>)
 8001e20:	682e      	ldr	r6, [r5, #0]
 8001e22:	4026      	ands	r6, r4
 8001e24:	602e      	str	r6, [r5, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8001e26:	686e      	ldr	r6, [r5, #4]
 8001e28:	4026      	ands	r6, r4
 8001e2a:	606e      	str	r6, [r5, #4]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8001e2c:	68ae      	ldr	r6, [r5, #8]
 8001e2e:	4026      	ands	r6, r4
 8001e30:	60ae      	str	r6, [r5, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8001e32:	68ee      	ldr	r6, [r5, #12]
 8001e34:	4034      	ands	r4, r6
 8001e36:	60ec      	str	r4, [r5, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8001e38:	6894      	ldr	r4, [r2, #8]
 8001e3a:	9d01      	ldr	r5, [sp, #4]
 8001e3c:	43ac      	bics	r4, r5
 8001e3e:	6094      	str	r4, [r2, #8]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8001e40:	2203      	movs	r2, #3
 8001e42:	005d      	lsls	r5, r3, #1
 8001e44:	40aa      	lsls	r2, r5
      GPIOx->AFR[position >> 3U] &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U));
 8001e46:	2507      	movs	r5, #7
 8001e48:	270f      	movs	r7, #15
 8001e4a:	401d      	ands	r5, r3
 8001e4c:	00ad      	lsls	r5, r5, #2
 8001e4e:	40af      	lsls	r7, r5
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e50:	43d5      	mvns	r5, r2
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8001e52:	6804      	ldr	r4, [r0, #0]
 8001e54:	4314      	orrs	r4, r2
 8001e56:	6004      	str	r4, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U));
 8001e58:	08dc      	lsrs	r4, r3, #3
 8001e5a:	00a4      	lsls	r4, r4, #2
 8001e5c:	1904      	adds	r4, r0, r4
 8001e5e:	6a26      	ldr	r6, [r4, #32]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position);
 8001e60:	9a00      	ldr	r2, [sp, #0]
      GPIOx->AFR[position >> 3U] &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U));
 8001e62:	43be      	bics	r6, r7
 8001e64:	6226      	str	r6, [r4, #32]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e66:	68c4      	ldr	r4, [r0, #12]
 8001e68:	402c      	ands	r4, r5
 8001e6a:	60c4      	str	r4, [r0, #12]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position);
 8001e6c:	6844      	ldr	r4, [r0, #4]
 8001e6e:	4394      	bics	r4, r2
 8001e70:	6044      	str	r4, [r0, #4]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001e72:	6882      	ldr	r2, [r0, #8]
 8001e74:	402a      	ands	r2, r5
 8001e76:	6082      	str	r2, [r0, #8]
    position++;
 8001e78:	3301      	adds	r3, #1
 8001e7a:	e7a2      	b.n	8001dc2 <HAL_GPIO_DeInit+0x12>
 8001e7c:	afffe400 	.word	0xafffe400
 8001e80:	40010000 	.word	0x40010000
 8001e84:	50000400 	.word	0x50000400
 8001e88:	50000800 	.word	0x50000800
 8001e8c:	40010400 	.word	0x40010400

08001e90 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e90:	6900      	ldr	r0, [r0, #16]
 8001e92:	4008      	ands	r0, r1
 8001e94:	1e41      	subs	r1, r0, #1
 8001e96:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8001e98:	b2c0      	uxtb	r0, r0
}
 8001e9a:	4770      	bx	lr

08001e9c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e9c:	2a00      	cmp	r2, #0
 8001e9e:	d001      	beq.n	8001ea4 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ea0:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001ea2:	4770      	bx	lr
    GPIOx->BRR = GPIO_Pin ;
 8001ea4:	6281      	str	r1, [r0, #40]	; 0x28
}
 8001ea6:	e7fc      	b.n	8001ea2 <HAL_GPIO_WritePin+0x6>

08001ea8 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001ea8:	6942      	ldr	r2, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001eaa:	0013      	movs	r3, r2
 8001eac:	400b      	ands	r3, r1
 8001eae:	041b      	lsls	r3, r3, #16
 8001eb0:	4391      	bics	r1, r2
 8001eb2:	4319      	orrs	r1, r3
 8001eb4:	6181      	str	r1, [r0, #24]
}
 8001eb6:	4770      	bx	lr

08001eb8 <HAL_GPIO_EXTI_Callback>:
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001eb8:	4770      	bx	lr
	...

08001ebc <HAL_GPIO_EXTI_IRQHandler>:
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001ebc:	4b04      	ldr	r3, [pc, #16]	; (8001ed0 <HAL_GPIO_EXTI_IRQHandler+0x14>)
{
 8001ebe:	b510      	push	{r4, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001ec0:	695a      	ldr	r2, [r3, #20]
 8001ec2:	4210      	tst	r0, r2
 8001ec4:	d002      	beq.n	8001ecc <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001ec6:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001ec8:	f7ff fff6 	bl	8001eb8 <HAL_GPIO_EXTI_Callback>
}
 8001ecc:	bd10      	pop	{r4, pc}
 8001ece:	46c0      	nop			; (mov r8, r8)
 8001ed0:	40010400 	.word	0x40010400

08001ed4 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001ed4:	6803      	ldr	r3, [r0, #0]
 8001ed6:	699a      	ldr	r2, [r3, #24]
 8001ed8:	0792      	lsls	r2, r2, #30
 8001eda:	d501      	bpl.n	8001ee0 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001edc:	2200      	movs	r2, #0
 8001ede:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	6999      	ldr	r1, [r3, #24]
 8001ee4:	4211      	tst	r1, r2
 8001ee6:	d102      	bne.n	8001eee <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001ee8:	6999      	ldr	r1, [r3, #24]
 8001eea:	430a      	orrs	r2, r1
 8001eec:	619a      	str	r2, [r3, #24]
  }
}
 8001eee:	4770      	bx	lr

08001ef0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001ef0:	b530      	push	{r4, r5, lr}
 8001ef2:	9c03      	ldr	r4, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8001ef4:	0412      	lsls	r2, r2, #16
 8001ef6:	6800      	ldr	r0, [r0, #0]
 8001ef8:	4322      	orrs	r2, r4
 8001efa:	4313      	orrs	r3, r2
 8001efc:	4a05      	ldr	r2, [pc, #20]	; (8001f14 <I2C_TransferConfig+0x24>)
 8001efe:	6845      	ldr	r5, [r0, #4]
 8001f00:	0589      	lsls	r1, r1, #22
 8001f02:	0d64      	lsrs	r4, r4, #21
 8001f04:	0d89      	lsrs	r1, r1, #22
 8001f06:	4314      	orrs	r4, r2
 8001f08:	43a5      	bics	r5, r4
 8001f0a:	430b      	orrs	r3, r1
 8001f0c:	432b      	orrs	r3, r5
 8001f0e:	6043      	str	r3, [r0, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8001f10:	bd30      	pop	{r4, r5, pc}
 8001f12:	46c0      	nop			; (mov r8, r8)
 8001f14:	03ff63ff 	.word	0x03ff63ff

08001f18 <I2C_IsAcknowledgeFailed>:
{
 8001f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001f1a:	6803      	ldr	r3, [r0, #0]
{
 8001f1c:	0004      	movs	r4, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001f1e:	6998      	ldr	r0, [r3, #24]
 8001f20:	2310      	movs	r3, #16
{
 8001f22:	000e      	movs	r6, r1
 8001f24:	0017      	movs	r7, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001f26:	4018      	ands	r0, r3
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f28:	2520      	movs	r5, #32
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001f2a:	2800      	cmp	r0, #0
 8001f2c:	d118      	bne.n	8001f60 <I2C_IsAcknowledgeFailed+0x48>
}
 8001f2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (Timeout != HAL_MAX_DELAY)
 8001f30:	1c72      	adds	r2, r6, #1
 8001f32:	d016      	beq.n	8001f62 <I2C_IsAcknowledgeFailed+0x4a>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f34:	f7ff fd26 	bl	8001984 <HAL_GetTick>
 8001f38:	1bc0      	subs	r0, r0, r7
 8001f3a:	42b0      	cmp	r0, r6
 8001f3c:	d801      	bhi.n	8001f42 <I2C_IsAcknowledgeFailed+0x2a>
 8001f3e:	2e00      	cmp	r6, #0
 8001f40:	d10e      	bne.n	8001f60 <I2C_IsAcknowledgeFailed+0x48>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f42:	2220      	movs	r2, #32
 8001f44:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001f46:	4313      	orrs	r3, r2
 8001f48:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001f4a:	0023      	movs	r3, r4
 8001f4c:	3341      	adds	r3, #65	; 0x41
 8001f4e:	701a      	strb	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f50:	0022      	movs	r2, r4
 8001f52:	2300      	movs	r3, #0
 8001f54:	3242      	adds	r2, #66	; 0x42
    __HAL_UNLOCK(hi2c);
 8001f56:	3440      	adds	r4, #64	; 0x40
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f58:	7013      	strb	r3, [r2, #0]
    return HAL_ERROR;
 8001f5a:	2001      	movs	r0, #1
    __HAL_UNLOCK(hi2c);
 8001f5c:	7023      	strb	r3, [r4, #0]
    return HAL_ERROR;
 8001f5e:	e7e6      	b.n	8001f2e <I2C_IsAcknowledgeFailed+0x16>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f60:	6823      	ldr	r3, [r4, #0]
 8001f62:	699a      	ldr	r2, [r3, #24]
 8001f64:	422a      	tst	r2, r5
 8001f66:	d0e3      	beq.n	8001f30 <I2C_IsAcknowledgeFailed+0x18>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f68:	2210      	movs	r2, #16
    I2C_Flush_TXDR(hi2c);
 8001f6a:	0020      	movs	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f6c:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f6e:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8001f70:	f7ff ffb0 	bl	8001ed4 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8001f74:	6822      	ldr	r2, [r4, #0]
 8001f76:	4906      	ldr	r1, [pc, #24]	; (8001f90 <I2C_IsAcknowledgeFailed+0x78>)
 8001f78:	6853      	ldr	r3, [r2, #4]
 8001f7a:	400b      	ands	r3, r1
 8001f7c:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001f7e:	2304      	movs	r3, #4
 8001f80:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001f82:	4313      	orrs	r3, r2
 8001f84:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001f86:	0023      	movs	r3, r4
 8001f88:	3341      	adds	r3, #65	; 0x41
 8001f8a:	701d      	strb	r5, [r3, #0]
 8001f8c:	e7e0      	b.n	8001f50 <I2C_IsAcknowledgeFailed+0x38>
 8001f8e:	46c0      	nop			; (mov r8, r8)
 8001f90:	fe00e800 	.word	0xfe00e800

08001f94 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8001f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f96:	0004      	movs	r4, r0
 8001f98:	000d      	movs	r5, r1
 8001f9a:	0017      	movs	r7, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001f9c:	2604      	movs	r6, #4
 8001f9e:	6823      	ldr	r3, [r4, #0]
 8001fa0:	699b      	ldr	r3, [r3, #24]
 8001fa2:	4233      	tst	r3, r6
 8001fa4:	d111      	bne.n	8001fca <I2C_WaitOnRXNEFlagUntilTimeout+0x36>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fa6:	003a      	movs	r2, r7
 8001fa8:	0029      	movs	r1, r5
 8001faa:	0020      	movs	r0, r4
 8001fac:	f7ff ffb4 	bl	8001f18 <I2C_IsAcknowledgeFailed>
 8001fb0:	2800      	cmp	r0, #0
 8001fb2:	d11a      	bne.n	8001fea <I2C_WaitOnRXNEFlagUntilTimeout+0x56>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001fb4:	2120      	movs	r1, #32
 8001fb6:	6823      	ldr	r3, [r4, #0]
 8001fb8:	699a      	ldr	r2, [r3, #24]
 8001fba:	420a      	tst	r2, r1
 8001fbc:	d017      	beq.n	8001fee <I2C_WaitOnRXNEFlagUntilTimeout+0x5a>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001fbe:	699a      	ldr	r2, [r3, #24]
 8001fc0:	4232      	tst	r2, r6
 8001fc2:	d004      	beq.n	8001fce <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
 8001fc4:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8001fc6:	2a00      	cmp	r2, #0
 8001fc8:	d001      	beq.n	8001fce <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
        return HAL_OK;
 8001fca:	2000      	movs	r0, #0
}
 8001fcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001fce:	2120      	movs	r1, #32
 8001fd0:	61d9      	str	r1, [r3, #28]
        I2C_RESET_CR2(hi2c);
 8001fd2:	685a      	ldr	r2, [r3, #4]
 8001fd4:	480e      	ldr	r0, [pc, #56]	; (8002010 <I2C_WaitOnRXNEFlagUntilTimeout+0x7c>)
 8001fd6:	4002      	ands	r2, r0
 8001fd8:	605a      	str	r2, [r3, #4]
        hi2c->State = HAL_I2C_STATE_READY;
 8001fda:	0022      	movs	r2, r4
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fdc:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 8001fde:	3241      	adds	r2, #65	; 0x41
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fe0:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001fe2:	7011      	strb	r1, [r2, #0]
        __HAL_UNLOCK(hi2c);
 8001fe4:	3440      	adds	r4, #64	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fe6:	7053      	strb	r3, [r2, #1]
      __HAL_UNLOCK(hi2c);
 8001fe8:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 8001fea:	2001      	movs	r0, #1
 8001fec:	e7ee      	b.n	8001fcc <I2C_WaitOnRXNEFlagUntilTimeout+0x38>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fee:	f7ff fcc9 	bl	8001984 <HAL_GetTick>
 8001ff2:	1bc0      	subs	r0, r0, r7
 8001ff4:	42a8      	cmp	r0, r5
 8001ff6:	d801      	bhi.n	8001ffc <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
 8001ff8:	2d00      	cmp	r5, #0
 8001ffa:	d1d0      	bne.n	8001f9e <I2C_WaitOnRXNEFlagUntilTimeout+0xa>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ffc:	2220      	movs	r2, #32
 8001ffe:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002000:	4313      	orrs	r3, r2
 8002002:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002004:	0023      	movs	r3, r4
 8002006:	3341      	adds	r3, #65	; 0x41
 8002008:	701a      	strb	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);
 800200a:	3440      	adds	r4, #64	; 0x40
 800200c:	2300      	movs	r3, #0
 800200e:	e7eb      	b.n	8001fe8 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8002010:	fe00e800 	.word	0xfe00e800

08002014 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8002014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002016:	0004      	movs	r4, r0
 8002018:	000d      	movs	r5, r1
 800201a:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800201c:	2720      	movs	r7, #32
 800201e:	6823      	ldr	r3, [r4, #0]
 8002020:	699b      	ldr	r3, [r3, #24]
 8002022:	423b      	tst	r3, r7
 8002024:	d001      	beq.n	800202a <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
 8002026:	2000      	movs	r0, #0
}
 8002028:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800202a:	0032      	movs	r2, r6
 800202c:	0029      	movs	r1, r5
 800202e:	0020      	movs	r0, r4
 8002030:	f7ff ff72 	bl	8001f18 <I2C_IsAcknowledgeFailed>
 8002034:	2800      	cmp	r0, #0
 8002036:	d113      	bne.n	8002060 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002038:	f7ff fca4 	bl	8001984 <HAL_GetTick>
 800203c:	1b80      	subs	r0, r0, r6
 800203e:	42a8      	cmp	r0, r5
 8002040:	d801      	bhi.n	8002046 <I2C_WaitOnSTOPFlagUntilTimeout+0x32>
 8002042:	2d00      	cmp	r5, #0
 8002044:	d1eb      	bne.n	800201e <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002046:	2220      	movs	r2, #32
 8002048:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800204a:	4313      	orrs	r3, r2
 800204c:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800204e:	0023      	movs	r3, r4
 8002050:	3341      	adds	r3, #65	; 0x41
 8002052:	701a      	strb	r2, [r3, #0]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002054:	0022      	movs	r2, r4
 8002056:	2300      	movs	r3, #0
 8002058:	3242      	adds	r2, #66	; 0x42
          __HAL_UNLOCK(hi2c);
 800205a:	3440      	adds	r4, #64	; 0x40
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800205c:	7013      	strb	r3, [r2, #0]
          __HAL_UNLOCK(hi2c);
 800205e:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 8002060:	2001      	movs	r0, #1
 8002062:	e7e1      	b.n	8002028 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>

08002064 <I2C_WaitOnFlagUntilTimeout>:
{
 8002064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002066:	0004      	movs	r4, r0
 8002068:	000e      	movs	r6, r1
 800206a:	0017      	movs	r7, r2
 800206c:	001d      	movs	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800206e:	6822      	ldr	r2, [r4, #0]
 8002070:	6993      	ldr	r3, [r2, #24]
 8002072:	4033      	ands	r3, r6
 8002074:	1b9b      	subs	r3, r3, r6
 8002076:	4259      	negs	r1, r3
 8002078:	414b      	adcs	r3, r1
 800207a:	42bb      	cmp	r3, r7
 800207c:	d001      	beq.n	8002082 <I2C_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 800207e:	2000      	movs	r0, #0
 8002080:	e017      	b.n	80020b2 <I2C_WaitOnFlagUntilTimeout+0x4e>
    if (Timeout != HAL_MAX_DELAY)
 8002082:	1c6b      	adds	r3, r5, #1
 8002084:	d0f4      	beq.n	8002070 <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002086:	f7ff fc7d 	bl	8001984 <HAL_GetTick>
 800208a:	9b06      	ldr	r3, [sp, #24]
 800208c:	1ac0      	subs	r0, r0, r3
 800208e:	42a8      	cmp	r0, r5
 8002090:	d801      	bhi.n	8002096 <I2C_WaitOnFlagUntilTimeout+0x32>
 8002092:	2d00      	cmp	r5, #0
 8002094:	d1eb      	bne.n	800206e <I2C_WaitOnFlagUntilTimeout+0xa>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002096:	2220      	movs	r2, #32
 8002098:	6c63      	ldr	r3, [r4, #68]	; 0x44
          __HAL_UNLOCK(hi2c);
 800209a:	2001      	movs	r0, #1
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800209c:	4313      	orrs	r3, r2
 800209e:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80020a0:	0023      	movs	r3, r4
 80020a2:	3341      	adds	r3, #65	; 0x41
 80020a4:	701a      	strb	r2, [r3, #0]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80020a6:	0022      	movs	r2, r4
 80020a8:	2300      	movs	r3, #0
 80020aa:	3242      	adds	r2, #66	; 0x42
          __HAL_UNLOCK(hi2c);
 80020ac:	3440      	adds	r4, #64	; 0x40
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80020ae:	7013      	strb	r3, [r2, #0]
          __HAL_UNLOCK(hi2c);
 80020b0:	7023      	strb	r3, [r4, #0]
}
 80020b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080020b4 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 80020b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020b6:	0004      	movs	r4, r0
 80020b8:	000d      	movs	r5, r1
 80020ba:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80020bc:	2702      	movs	r7, #2
 80020be:	6823      	ldr	r3, [r4, #0]
 80020c0:	699b      	ldr	r3, [r3, #24]
 80020c2:	423b      	tst	r3, r7
 80020c4:	d001      	beq.n	80020ca <I2C_WaitOnTXISFlagUntilTimeout+0x16>
  return HAL_OK;
 80020c6:	2000      	movs	r0, #0
}
 80020c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80020ca:	0032      	movs	r2, r6
 80020cc:	0029      	movs	r1, r5
 80020ce:	0020      	movs	r0, r4
 80020d0:	f7ff ff22 	bl	8001f18 <I2C_IsAcknowledgeFailed>
 80020d4:	2800      	cmp	r0, #0
 80020d6:	d115      	bne.n	8002104 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 80020d8:	1c6b      	adds	r3, r5, #1
 80020da:	d0f0      	beq.n	80020be <I2C_WaitOnTXISFlagUntilTimeout+0xa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020dc:	f7ff fc52 	bl	8001984 <HAL_GetTick>
 80020e0:	1b80      	subs	r0, r0, r6
 80020e2:	42a8      	cmp	r0, r5
 80020e4:	d801      	bhi.n	80020ea <I2C_WaitOnTXISFlagUntilTimeout+0x36>
 80020e6:	2d00      	cmp	r5, #0
 80020e8:	d1e9      	bne.n	80020be <I2C_WaitOnTXISFlagUntilTimeout+0xa>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80020ea:	2220      	movs	r2, #32
 80020ec:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80020ee:	4313      	orrs	r3, r2
 80020f0:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80020f2:	0023      	movs	r3, r4
 80020f4:	3341      	adds	r3, #65	; 0x41
 80020f6:	701a      	strb	r2, [r3, #0]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80020f8:	0022      	movs	r2, r4
 80020fa:	2300      	movs	r3, #0
 80020fc:	3242      	adds	r2, #66	; 0x42
          __HAL_UNLOCK(hi2c);
 80020fe:	3440      	adds	r4, #64	; 0x40
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002100:	7013      	strb	r3, [r2, #0]
          __HAL_UNLOCK(hi2c);
 8002102:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 8002104:	2001      	movs	r0, #1
 8002106:	e7df      	b.n	80020c8 <I2C_WaitOnTXISFlagUntilTimeout+0x14>

08002108 <I2C_RequestMemoryWrite>:
{
 8002108:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800210a:	0014      	movs	r4, r2
 800210c:	001e      	movs	r6, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800210e:	b2da      	uxtb	r2, r3
 8002110:	4b15      	ldr	r3, [pc, #84]	; (8002168 <I2C_RequestMemoryWrite+0x60>)
{
 8002112:	0005      	movs	r5, r0
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002114:	9300      	str	r3, [sp, #0]
 8002116:	2380      	movs	r3, #128	; 0x80
 8002118:	045b      	lsls	r3, r3, #17
 800211a:	f7ff fee9 	bl	8001ef0 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800211e:	9a07      	ldr	r2, [sp, #28]
 8002120:	9906      	ldr	r1, [sp, #24]
 8002122:	0028      	movs	r0, r5
 8002124:	f7ff ffc6 	bl	80020b4 <I2C_WaitOnTXISFlagUntilTimeout>
 8002128:	2800      	cmp	r0, #0
 800212a:	d001      	beq.n	8002130 <I2C_RequestMemoryWrite+0x28>
    return HAL_ERROR;
 800212c:	2001      	movs	r0, #1
}
 800212e:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8002130:	682b      	ldr	r3, [r5, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002132:	2e01      	cmp	r6, #1
 8002134:	d10d      	bne.n	8002152 <I2C_RequestMemoryWrite+0x4a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002136:	b2e4      	uxtb	r4, r4
 8002138:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800213a:	9b07      	ldr	r3, [sp, #28]
 800213c:	2200      	movs	r2, #0
 800213e:	9300      	str	r3, [sp, #0]
 8002140:	2180      	movs	r1, #128	; 0x80
 8002142:	9b06      	ldr	r3, [sp, #24]
 8002144:	0028      	movs	r0, r5
 8002146:	f7ff ff8d 	bl	8002064 <I2C_WaitOnFlagUntilTimeout>
 800214a:	1e43      	subs	r3, r0, #1
 800214c:	4198      	sbcs	r0, r3
    return HAL_ERROR;
 800214e:	b2c0      	uxtb	r0, r0
 8002150:	e7ed      	b.n	800212e <I2C_RequestMemoryWrite+0x26>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002152:	0a22      	lsrs	r2, r4, #8
 8002154:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002156:	9906      	ldr	r1, [sp, #24]
 8002158:	9a07      	ldr	r2, [sp, #28]
 800215a:	0028      	movs	r0, r5
 800215c:	f7ff ffaa 	bl	80020b4 <I2C_WaitOnTXISFlagUntilTimeout>
 8002160:	2800      	cmp	r0, #0
 8002162:	d1e3      	bne.n	800212c <I2C_RequestMemoryWrite+0x24>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002164:	682b      	ldr	r3, [r5, #0]
 8002166:	e7e6      	b.n	8002136 <I2C_RequestMemoryWrite+0x2e>
 8002168:	80002000 	.word	0x80002000

0800216c <I2C_RequestMemoryRead>:
{
 800216c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800216e:	0005      	movs	r5, r0
 8002170:	0014      	movs	r4, r2
 8002172:	001e      	movs	r6, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002174:	b2da      	uxtb	r2, r3
 8002176:	4b15      	ldr	r3, [pc, #84]	; (80021cc <I2C_RequestMemoryRead+0x60>)
 8002178:	9300      	str	r3, [sp, #0]
 800217a:	2300      	movs	r3, #0
 800217c:	f7ff feb8 	bl	8001ef0 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002180:	9a07      	ldr	r2, [sp, #28]
 8002182:	9906      	ldr	r1, [sp, #24]
 8002184:	0028      	movs	r0, r5
 8002186:	f7ff ff95 	bl	80020b4 <I2C_WaitOnTXISFlagUntilTimeout>
 800218a:	2800      	cmp	r0, #0
 800218c:	d001      	beq.n	8002192 <I2C_RequestMemoryRead+0x26>
    return HAL_ERROR;
 800218e:	2001      	movs	r0, #1
}
 8002190:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8002192:	682b      	ldr	r3, [r5, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002194:	2e01      	cmp	r6, #1
 8002196:	d10d      	bne.n	80021b4 <I2C_RequestMemoryRead+0x48>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002198:	b2e4      	uxtb	r4, r4
 800219a:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800219c:	9b07      	ldr	r3, [sp, #28]
 800219e:	2200      	movs	r2, #0
 80021a0:	9300      	str	r3, [sp, #0]
 80021a2:	2140      	movs	r1, #64	; 0x40
 80021a4:	9b06      	ldr	r3, [sp, #24]
 80021a6:	0028      	movs	r0, r5
 80021a8:	f7ff ff5c 	bl	8002064 <I2C_WaitOnFlagUntilTimeout>
 80021ac:	1e43      	subs	r3, r0, #1
 80021ae:	4198      	sbcs	r0, r3
    return HAL_ERROR;
 80021b0:	b2c0      	uxtb	r0, r0
 80021b2:	e7ed      	b.n	8002190 <I2C_RequestMemoryRead+0x24>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80021b4:	0a22      	lsrs	r2, r4, #8
 80021b6:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80021b8:	9906      	ldr	r1, [sp, #24]
 80021ba:	9a07      	ldr	r2, [sp, #28]
 80021bc:	0028      	movs	r0, r5
 80021be:	f7ff ff79 	bl	80020b4 <I2C_WaitOnTXISFlagUntilTimeout>
 80021c2:	2800      	cmp	r0, #0
 80021c4:	d1e3      	bne.n	800218e <I2C_RequestMemoryRead+0x22>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80021c6:	682b      	ldr	r3, [r5, #0]
 80021c8:	e7e6      	b.n	8002198 <I2C_RequestMemoryRead+0x2c>
 80021ca:	46c0      	nop			; (mov r8, r8)
 80021cc:	80002000 	.word	0x80002000

080021d0 <HAL_I2C_Init>:
{
 80021d0:	b570      	push	{r4, r5, r6, lr}
 80021d2:	0004      	movs	r4, r0
    return HAL_ERROR;
 80021d4:	2001      	movs	r0, #1
  if (hi2c == NULL)
 80021d6:	2c00      	cmp	r4, #0
 80021d8:	d03f      	beq.n	800225a <HAL_I2C_Init+0x8a>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80021da:	0025      	movs	r5, r4
 80021dc:	3541      	adds	r5, #65	; 0x41
 80021de:	782b      	ldrb	r3, [r5, #0]
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d105      	bne.n	80021f2 <HAL_I2C_Init+0x22>
    hi2c->Lock = HAL_UNLOCKED;
 80021e6:	0022      	movs	r2, r4
 80021e8:	3240      	adds	r2, #64	; 0x40
 80021ea:	7013      	strb	r3, [r2, #0]
    HAL_I2C_MspInit(hi2c);
 80021ec:	0020      	movs	r0, r4
 80021ee:	f7ff fa1f 	bl	8001630 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80021f2:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 80021f4:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 80021f6:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 80021f8:	6823      	ldr	r3, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80021fa:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	68a6      	ldr	r6, [r4, #8]
 8002200:	438a      	bics	r2, r1
 8002202:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002204:	6861      	ldr	r1, [r4, #4]
 8002206:	4a1a      	ldr	r2, [pc, #104]	; (8002270 <HAL_I2C_Init+0xa0>)
 8002208:	400a      	ands	r2, r1
 800220a:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800220c:	6899      	ldr	r1, [r3, #8]
 800220e:	4a19      	ldr	r2, [pc, #100]	; (8002274 <HAL_I2C_Init+0xa4>)
 8002210:	4011      	ands	r1, r2
 8002212:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002214:	2801      	cmp	r0, #1
 8002216:	d121      	bne.n	800225c <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002218:	2180      	movs	r1, #128	; 0x80
 800221a:	0209      	lsls	r1, r1, #8
 800221c:	4331      	orrs	r1, r6
 800221e:	6099      	str	r1, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002220:	6858      	ldr	r0, [r3, #4]
 8002222:	4915      	ldr	r1, [pc, #84]	; (8002278 <HAL_I2C_Init+0xa8>)
 8002224:	4301      	orrs	r1, r0
 8002226:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002228:	68d9      	ldr	r1, [r3, #12]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800222a:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800222c:	400a      	ands	r2, r1
 800222e:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002230:	6961      	ldr	r1, [r4, #20]
 8002232:	6922      	ldr	r2, [r4, #16]
 8002234:	430a      	orrs	r2, r1
 8002236:	69a1      	ldr	r1, [r4, #24]
 8002238:	0209      	lsls	r1, r1, #8
 800223a:	430a      	orrs	r2, r1
 800223c:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800223e:	6a21      	ldr	r1, [r4, #32]
 8002240:	69e2      	ldr	r2, [r4, #28]
 8002242:	430a      	orrs	r2, r1
 8002244:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8002246:	2201      	movs	r2, #1
 8002248:	6819      	ldr	r1, [r3, #0]
 800224a:	430a      	orrs	r2, r1
 800224c:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 800224e:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002250:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002252:	702b      	strb	r3, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002254:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002256:	3442      	adds	r4, #66	; 0x42
 8002258:	7020      	strb	r0, [r4, #0]
}
 800225a:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800225c:	2184      	movs	r1, #132	; 0x84
 800225e:	0209      	lsls	r1, r1, #8
 8002260:	4331      	orrs	r1, r6
 8002262:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002264:	2802      	cmp	r0, #2
 8002266:	d1db      	bne.n	8002220 <HAL_I2C_Init+0x50>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002268:	2180      	movs	r1, #128	; 0x80
 800226a:	0109      	lsls	r1, r1, #4
 800226c:	6059      	str	r1, [r3, #4]
 800226e:	e7d7      	b.n	8002220 <HAL_I2C_Init+0x50>
 8002270:	f0ffffff 	.word	0xf0ffffff
 8002274:	ffff7fff 	.word	0xffff7fff
 8002278:	02008000 	.word	0x02008000

0800227c <HAL_I2C_DeInit>:
{
 800227c:	b570      	push	{r4, r5, r6, lr}
 800227e:	0004      	movs	r4, r0
    return HAL_ERROR;
 8002280:	2001      	movs	r0, #1
  if (hi2c == NULL)
 8002282:	2c00      	cmp	r4, #0
 8002284:	d013      	beq.n	80022ae <HAL_I2C_DeInit+0x32>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002286:	0025      	movs	r5, r4
 8002288:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 800228a:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800228c:	3541      	adds	r5, #65	; 0x41
 800228e:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 8002290:	6813      	ldr	r3, [r2, #0]
 8002292:	4383      	bics	r3, r0
 8002294:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 8002296:	0020      	movs	r0, r4
 8002298:	f7ff f9f8 	bl	800168c <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800229c:	2000      	movs	r0, #0
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800229e:	0023      	movs	r3, r4
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022a0:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80022a2:	3342      	adds	r3, #66	; 0x42
  hi2c->State = HAL_I2C_STATE_RESET;
 80022a4:	7028      	strb	r0, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 80022a6:	6320      	str	r0, [r4, #48]	; 0x30
  __HAL_UNLOCK(hi2c);
 80022a8:	3440      	adds	r4, #64	; 0x40
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80022aa:	7018      	strb	r0, [r3, #0]
  __HAL_UNLOCK(hi2c);
 80022ac:	7020      	strb	r0, [r4, #0]
}
 80022ae:	bd70      	pop	{r4, r5, r6, pc}

080022b0 <HAL_I2C_Slave_Transmit>:
{
 80022b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022b2:	001f      	movs	r7, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 80022b4:	0003      	movs	r3, r0
{
 80022b6:	b087      	sub	sp, #28
  if (hi2c->State == HAL_I2C_STATE_READY)
 80022b8:	3341      	adds	r3, #65	; 0x41
{
 80022ba:	9104      	str	r1, [sp, #16]
 80022bc:	9205      	str	r2, [sp, #20]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80022be:	9303      	str	r3, [sp, #12]
 80022c0:	781d      	ldrb	r5, [r3, #0]
{
 80022c2:	0004      	movs	r4, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80022c4:	b2ed      	uxtb	r5, r5
    return HAL_BUSY;
 80022c6:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 80022c8:	2d20      	cmp	r5, #32
 80022ca:	d107      	bne.n	80022dc <HAL_I2C_Slave_Transmit+0x2c>
    if ((pData == NULL) || (Size == 0U))
 80022cc:	2900      	cmp	r1, #0
 80022ce:	d001      	beq.n	80022d4 <HAL_I2C_Slave_Transmit+0x24>
 80022d0:	2a00      	cmp	r2, #0
 80022d2:	d105      	bne.n	80022e0 <HAL_I2C_Slave_Transmit+0x30>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80022d4:	2380      	movs	r3, #128	; 0x80
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 80022da:	2001      	movs	r0, #1
}
 80022dc:	b007      	add	sp, #28
 80022de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 80022e0:	0023      	movs	r3, r4
 80022e2:	3340      	adds	r3, #64	; 0x40
 80022e4:	781a      	ldrb	r2, [r3, #0]
 80022e6:	2a01      	cmp	r2, #1
 80022e8:	d0f8      	beq.n	80022dc <HAL_I2C_Slave_Transmit+0x2c>
 80022ea:	2201      	movs	r2, #1
 80022ec:	701a      	strb	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80022ee:	f7ff fb49 	bl	8001984 <HAL_GetTick>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80022f2:	2321      	movs	r3, #33	; 0x21
 80022f4:	9a03      	ldr	r2, [sp, #12]
    tickstart = HAL_GetTick();
 80022f6:	0006      	movs	r6, r0
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80022f8:	7013      	strb	r3, [r2, #0]
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 80022fa:	0023      	movs	r3, r4
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022fc:	2200      	movs	r2, #0
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 80022fe:	3342      	adds	r3, #66	; 0x42
 8002300:	701d      	strb	r5, [r3, #0]
    hi2c->pBuffPtr  = pData;
 8002302:	9b04      	ldr	r3, [sp, #16]
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8002304:	6821      	ldr	r1, [r4, #0]
    hi2c->pBuffPtr  = pData;
 8002306:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8002308:	9b05      	ldr	r3, [sp, #20]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800230a:	6462      	str	r2, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 800230c:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 800230e:	684b      	ldr	r3, [r1, #4]
 8002310:	4839      	ldr	r0, [pc, #228]	; (80023f8 <HAL_I2C_Slave_Transmit+0x148>)
    hi2c->XferISR   = NULL;
 8002312:	6362      	str	r2, [r4, #52]	; 0x34
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8002314:	4003      	ands	r3, r0
 8002316:	604b      	str	r3, [r1, #4]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 8002318:	0020      	movs	r0, r4
 800231a:	003b      	movs	r3, r7
 800231c:	9600      	str	r6, [sp, #0]
 800231e:	2108      	movs	r1, #8
 8002320:	f7ff fea0 	bl	8002064 <I2C_WaitOnFlagUntilTimeout>
 8002324:	6823      	ldr	r3, [r4, #0]
 8002326:	1e02      	subs	r2, r0, #0
 8002328:	d005      	beq.n	8002336 <HAL_I2C_Slave_Transmit+0x86>
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800232a:	2280      	movs	r2, #128	; 0x80
 800232c:	6859      	ldr	r1, [r3, #4]
 800232e:	0212      	lsls	r2, r2, #8
 8002330:	430a      	orrs	r2, r1
 8002332:	605a      	str	r2, [r3, #4]
 8002334:	e7d1      	b.n	80022da <HAL_I2C_Slave_Transmit+0x2a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002336:	2508      	movs	r5, #8
 8002338:	61dd      	str	r5, [r3, #28]
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800233a:	68e3      	ldr	r3, [r4, #12]
 800233c:	2b02      	cmp	r3, #2
 800233e:	d109      	bne.n	8002354 <HAL_I2C_Slave_Transmit+0xa4>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 8002340:	003b      	movs	r3, r7
 8002342:	9600      	str	r6, [sp, #0]
 8002344:	0029      	movs	r1, r5
 8002346:	0020      	movs	r0, r4
 8002348:	f7ff fe8c 	bl	8002064 <I2C_WaitOnFlagUntilTimeout>
 800234c:	6823      	ldr	r3, [r4, #0]
 800234e:	2800      	cmp	r0, #0
 8002350:	d1eb      	bne.n	800232a <HAL_I2C_Slave_Transmit+0x7a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002352:	61dd      	str	r5, [r3, #28]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_DIR, RESET, Timeout, tickstart) != HAL_OK)
 8002354:	2180      	movs	r1, #128	; 0x80
 8002356:	9600      	str	r6, [sp, #0]
 8002358:	003b      	movs	r3, r7
 800235a:	2200      	movs	r2, #0
 800235c:	0249      	lsls	r1, r1, #9
 800235e:	0020      	movs	r0, r4
 8002360:	f7ff fe80 	bl	8002064 <I2C_WaitOnFlagUntilTimeout>
 8002364:	2800      	cmp	r0, #0
 8002366:	d014      	beq.n	8002392 <HAL_I2C_Slave_Transmit+0xe2>
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002368:	6822      	ldr	r2, [r4, #0]
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800236a:	2380      	movs	r3, #128	; 0x80
 800236c:	6851      	ldr	r1, [r2, #4]
 800236e:	021b      	lsls	r3, r3, #8
 8002370:	430b      	orrs	r3, r1
 8002372:	6053      	str	r3, [r2, #4]
 8002374:	e7b1      	b.n	80022da <HAL_I2C_Slave_Transmit+0x2a>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002376:	f7ff fe9d 	bl	80020b4 <I2C_WaitOnTXISFlagUntilTimeout>
 800237a:	6822      	ldr	r2, [r4, #0]
 800237c:	2800      	cmp	r0, #0
 800237e:	d1f4      	bne.n	800236a <HAL_I2C_Slave_Transmit+0xba>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002380:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002382:	7819      	ldrb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 8002384:	3301      	adds	r3, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002386:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8002388:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800238a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800238c:	3b01      	subs	r3, #1
 800238e:	b29b      	uxth	r3, r3
 8002390:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferCount > 0U)
 8002392:	8d65      	ldrh	r5, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002394:	0032      	movs	r2, r6
    while (hi2c->XferCount > 0U)
 8002396:	b2ad      	uxth	r5, r5
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002398:	0039      	movs	r1, r7
 800239a:	0020      	movs	r0, r4
    while (hi2c->XferCount > 0U)
 800239c:	2d00      	cmp	r5, #0
 800239e:	d1ea      	bne.n	8002376 <HAL_I2C_Slave_Transmit+0xc6>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023a0:	f7ff fe38 	bl	8002014 <I2C_WaitOnSTOPFlagUntilTimeout>
 80023a4:	6823      	ldr	r3, [r4, #0]
 80023a6:	2800      	cmp	r0, #0
 80023a8:	d00a      	beq.n	80023c0 <HAL_I2C_Slave_Transmit+0x110>
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80023aa:	2280      	movs	r2, #128	; 0x80
 80023ac:	6859      	ldr	r1, [r3, #4]
 80023ae:	0212      	lsls	r2, r2, #8
 80023b0:	430a      	orrs	r2, r1
 80023b2:	605a      	str	r2, [r3, #4]
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023b4:	6c62      	ldr	r2, [r4, #68]	; 0x44
        return HAL_ERROR;
 80023b6:	2001      	movs	r0, #1
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023b8:	2a04      	cmp	r2, #4
 80023ba:	d000      	beq.n	80023be <HAL_I2C_Slave_Transmit+0x10e>
 80023bc:	e78e      	b.n	80022dc <HAL_I2C_Slave_Transmit+0x2c>
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023be:	6465      	str	r5, [r4, #68]	; 0x44
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, Timeout, tickstart) != HAL_OK)
 80023c0:	2580      	movs	r5, #128	; 0x80
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80023c2:	2220      	movs	r2, #32
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, Timeout, tickstart) != HAL_OK)
 80023c4:	022d      	lsls	r5, r5, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80023c6:	61da      	str	r2, [r3, #28]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, Timeout, tickstart) != HAL_OK)
 80023c8:	0029      	movs	r1, r5
 80023ca:	003b      	movs	r3, r7
 80023cc:	3a1f      	subs	r2, #31
 80023ce:	9600      	str	r6, [sp, #0]
 80023d0:	0020      	movs	r0, r4
 80023d2:	f7ff fe47 	bl	8002064 <I2C_WaitOnFlagUntilTimeout>
 80023d6:	6823      	ldr	r3, [r4, #0]
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80023d8:	685a      	ldr	r2, [r3, #4]
 80023da:	4315      	orrs	r5, r2
 80023dc:	605d      	str	r5, [r3, #4]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, Timeout, tickstart) != HAL_OK)
 80023de:	2800      	cmp	r0, #0
 80023e0:	d000      	beq.n	80023e4 <HAL_I2C_Slave_Transmit+0x134>
 80023e2:	e77a      	b.n	80022da <HAL_I2C_Slave_Transmit+0x2a>
    hi2c->State = HAL_I2C_STATE_READY;
 80023e4:	2220      	movs	r2, #32
 80023e6:	9b03      	ldr	r3, [sp, #12]
 80023e8:	701a      	strb	r2, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80023ea:	0023      	movs	r3, r4
    __HAL_UNLOCK(hi2c);
 80023ec:	3440      	adds	r4, #64	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80023ee:	3342      	adds	r3, #66	; 0x42
 80023f0:	7018      	strb	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 80023f2:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 80023f4:	e772      	b.n	80022dc <HAL_I2C_Slave_Transmit+0x2c>
 80023f6:	46c0      	nop			; (mov r8, r8)
 80023f8:	ffff7fff 	.word	0xffff7fff

080023fc <HAL_I2C_Mem_Write>:
{
 80023fc:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 80023fe:	0007      	movs	r7, r0
{
 8002400:	b089      	sub	sp, #36	; 0x24
 8002402:	9307      	str	r3, [sp, #28]
 8002404:	ab0e      	add	r3, sp, #56	; 0x38
 8002406:	9206      	str	r2, [sp, #24]
 8002408:	cb04      	ldmia	r3!, {r2}
  if (hi2c->State == HAL_I2C_STATE_READY)
 800240a:	3741      	adds	r7, #65	; 0x41
{
 800240c:	881b      	ldrh	r3, [r3, #0]
 800240e:	9204      	str	r2, [sp, #16]
 8002410:	9305      	str	r3, [sp, #20]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002412:	783b      	ldrb	r3, [r7, #0]
{
 8002414:	0004      	movs	r4, r0
 8002416:	000d      	movs	r5, r1
    return HAL_BUSY;
 8002418:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 800241a:	2b20      	cmp	r3, #32
 800241c:	d108      	bne.n	8002430 <HAL_I2C_Mem_Write+0x34>
    if ((pData == NULL) || (Size == 0U))
 800241e:	2a00      	cmp	r2, #0
 8002420:	d002      	beq.n	8002428 <HAL_I2C_Mem_Write+0x2c>
 8002422:	9b05      	ldr	r3, [sp, #20]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d105      	bne.n	8002434 <HAL_I2C_Mem_Write+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002428:	2380      	movs	r3, #128	; 0x80
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 800242e:	2001      	movs	r0, #1
}
 8002430:	b009      	add	sp, #36	; 0x24
 8002432:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 8002434:	0023      	movs	r3, r4
 8002436:	3340      	adds	r3, #64	; 0x40
 8002438:	9303      	str	r3, [sp, #12]
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	2b01      	cmp	r3, #1
 800243e:	d0f7      	beq.n	8002430 <HAL_I2C_Mem_Write+0x34>
 8002440:	2201      	movs	r2, #1
 8002442:	9b03      	ldr	r3, [sp, #12]
 8002444:	701a      	strb	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8002446:	f7ff fa9d 	bl	8001984 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800244a:	2180      	movs	r1, #128	; 0x80
    tickstart = HAL_GetTick();
 800244c:	9002      	str	r0, [sp, #8]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800244e:	9000      	str	r0, [sp, #0]
 8002450:	2319      	movs	r3, #25
 8002452:	2201      	movs	r2, #1
 8002454:	0209      	lsls	r1, r1, #8
 8002456:	0020      	movs	r0, r4
 8002458:	f7ff fe04 	bl	8002064 <I2C_WaitOnFlagUntilTimeout>
 800245c:	1e06      	subs	r6, r0, #0
 800245e:	d1e6      	bne.n	800242e <HAL_I2C_Mem_Write+0x32>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002460:	2321      	movs	r3, #33	; 0x21
 8002462:	703b      	strb	r3, [r7, #0]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002464:	0027      	movs	r7, r4
 8002466:	331f      	adds	r3, #31
 8002468:	3742      	adds	r7, #66	; 0x42
 800246a:	703b      	strb	r3, [r7, #0]
    hi2c->pBuffPtr  = pData;
 800246c:	9b04      	ldr	r3, [sp, #16]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800246e:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8002470:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8002472:	9b05      	ldr	r3, [sp, #20]
    hi2c->XferISR   = NULL;
 8002474:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 8002476:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002478:	9b02      	ldr	r3, [sp, #8]
 800247a:	9a06      	ldr	r2, [sp, #24]
 800247c:	9301      	str	r3, [sp, #4]
 800247e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002480:	0029      	movs	r1, r5
 8002482:	9300      	str	r3, [sp, #0]
 8002484:	0020      	movs	r0, r4
 8002486:	9b07      	ldr	r3, [sp, #28]
 8002488:	f7ff fe3e 	bl	8002108 <I2C_RequestMemoryWrite>
 800248c:	2800      	cmp	r0, #0
 800248e:	d002      	beq.n	8002496 <HAL_I2C_Mem_Write+0x9a>
      __HAL_UNLOCK(hi2c);
 8002490:	9b03      	ldr	r3, [sp, #12]
 8002492:	701e      	strb	r6, [r3, #0]
 8002494:	e7cb      	b.n	800242e <HAL_I2C_Mem_Write+0x32>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002496:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002498:	2bff      	cmp	r3, #255	; 0xff
 800249a:	d953      	bls.n	8002544 <HAL_I2C_Mem_Write+0x148>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800249c:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800249e:	2380      	movs	r3, #128	; 0x80
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80024a0:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80024a2:	045b      	lsls	r3, r3, #17
 80024a4:	9000      	str	r0, [sp, #0]
 80024a6:	0029      	movs	r1, r5
 80024a8:	0020      	movs	r0, r4
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80024aa:	2680      	movs	r6, #128	; 0x80
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80024ac:	f7ff fd20 	bl	8001ef0 <I2C_TransferConfig>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80024b0:	04b6      	lsls	r6, r6, #18
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024b2:	9a02      	ldr	r2, [sp, #8]
 80024b4:	9910      	ldr	r1, [sp, #64]	; 0x40
 80024b6:	0020      	movs	r0, r4
 80024b8:	f7ff fdfc 	bl	80020b4 <I2C_WaitOnTXISFlagUntilTimeout>
 80024bc:	2800      	cmp	r0, #0
 80024be:	d1b6      	bne.n	800242e <HAL_I2C_Mem_Write+0x32>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80024c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80024c2:	6822      	ldr	r2, [r4, #0]
 80024c4:	7819      	ldrb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 80024c6:	3301      	adds	r3, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80024c8:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 80024ca:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80024cc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80024ce:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80024d0:	3b01      	subs	r3, #1
 80024d2:	b29b      	uxth	r3, r3
 80024d4:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80024d6:	3a01      	subs	r2, #1
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80024d8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80024da:	b292      	uxth	r2, r2
 80024dc:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d017      	beq.n	8002512 <HAL_I2C_Mem_Write+0x116>
 80024e2:	2a00      	cmp	r2, #0
 80024e4:	d115      	bne.n	8002512 <HAL_I2C_Mem_Write+0x116>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80024e6:	9b02      	ldr	r3, [sp, #8]
 80024e8:	2180      	movs	r1, #128	; 0x80
 80024ea:	9300      	str	r3, [sp, #0]
 80024ec:	0020      	movs	r0, r4
 80024ee:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80024f0:	f7ff fdb8 	bl	8002064 <I2C_WaitOnFlagUntilTimeout>
 80024f4:	2800      	cmp	r0, #0
 80024f6:	d19a      	bne.n	800242e <HAL_I2C_Mem_Write+0x32>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80024f8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80024fa:	2bff      	cmp	r3, #255	; 0xff
 80024fc:	d92a      	bls.n	8002554 <HAL_I2C_Mem_Write+0x158>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80024fe:	23ff      	movs	r3, #255	; 0xff
 8002500:	8523      	strh	r3, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002502:	2380      	movs	r3, #128	; 0x80
 8002504:	22ff      	movs	r2, #255	; 0xff
 8002506:	9000      	str	r0, [sp, #0]
 8002508:	045b      	lsls	r3, r3, #17
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800250a:	0029      	movs	r1, r5
 800250c:	0020      	movs	r0, r4
 800250e:	f7ff fcef 	bl	8001ef0 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8002512:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002514:	2b00      	cmp	r3, #0
 8002516:	d1cc      	bne.n	80024b2 <HAL_I2C_Mem_Write+0xb6>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002518:	9a02      	ldr	r2, [sp, #8]
 800251a:	9910      	ldr	r1, [sp, #64]	; 0x40
 800251c:	0020      	movs	r0, r4
 800251e:	f7ff fd79 	bl	8002014 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002522:	2800      	cmp	r0, #0
 8002524:	d000      	beq.n	8002528 <HAL_I2C_Mem_Write+0x12c>
 8002526:	e782      	b.n	800242e <HAL_I2C_Mem_Write+0x32>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002528:	2120      	movs	r1, #32
 800252a:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 800252c:	4d0d      	ldr	r5, [pc, #52]	; (8002564 <HAL_I2C_Mem_Write+0x168>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800252e:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8002530:	685a      	ldr	r2, [r3, #4]
 8002532:	402a      	ands	r2, r5
 8002534:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002536:	0023      	movs	r3, r4
    __HAL_UNLOCK(hi2c);
 8002538:	3440      	adds	r4, #64	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 800253a:	3341      	adds	r3, #65	; 0x41
 800253c:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800253e:	7038      	strb	r0, [r7, #0]
    __HAL_UNLOCK(hi2c);
 8002540:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 8002542:	e775      	b.n	8002430 <HAL_I2C_Mem_Write+0x34>
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002544:	2380      	movs	r3, #128	; 0x80
      hi2c->XferSize = hi2c->XferCount;
 8002546:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002548:	049b      	lsls	r3, r3, #18
      hi2c->XferSize = hi2c->XferCount;
 800254a:	b292      	uxth	r2, r2
 800254c:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800254e:	b2d2      	uxtb	r2, r2
 8002550:	9000      	str	r0, [sp, #0]
 8002552:	e7a8      	b.n	80024a6 <HAL_I2C_Mem_Write+0xaa>
          hi2c->XferSize = hi2c->XferCount;
 8002554:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002556:	0033      	movs	r3, r6
          hi2c->XferSize = hi2c->XferCount;
 8002558:	b292      	uxth	r2, r2
 800255a:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800255c:	b2d2      	uxtb	r2, r2
 800255e:	9000      	str	r0, [sp, #0]
 8002560:	e7d3      	b.n	800250a <HAL_I2C_Mem_Write+0x10e>
 8002562:	46c0      	nop			; (mov r8, r8)
 8002564:	fe00e800 	.word	0xfe00e800

08002568 <HAL_I2C_Mem_Read>:
{
 8002568:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 800256a:	0007      	movs	r7, r0
{
 800256c:	b089      	sub	sp, #36	; 0x24
 800256e:	9307      	str	r3, [sp, #28]
 8002570:	ab0e      	add	r3, sp, #56	; 0x38
 8002572:	9206      	str	r2, [sp, #24]
 8002574:	cb04      	ldmia	r3!, {r2}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002576:	3741      	adds	r7, #65	; 0x41
{
 8002578:	881b      	ldrh	r3, [r3, #0]
 800257a:	9204      	str	r2, [sp, #16]
 800257c:	9305      	str	r3, [sp, #20]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800257e:	783b      	ldrb	r3, [r7, #0]
{
 8002580:	0004      	movs	r4, r0
 8002582:	000d      	movs	r5, r1
    return HAL_BUSY;
 8002584:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002586:	2b20      	cmp	r3, #32
 8002588:	d108      	bne.n	800259c <HAL_I2C_Mem_Read+0x34>
    if ((pData == NULL) || (Size == 0U))
 800258a:	2a00      	cmp	r2, #0
 800258c:	d002      	beq.n	8002594 <HAL_I2C_Mem_Read+0x2c>
 800258e:	9b05      	ldr	r3, [sp, #20]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d105      	bne.n	80025a0 <HAL_I2C_Mem_Read+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002594:	2380      	movs	r3, #128	; 0x80
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 800259a:	2001      	movs	r0, #1
}
 800259c:	b009      	add	sp, #36	; 0x24
 800259e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 80025a0:	0023      	movs	r3, r4
 80025a2:	3340      	adds	r3, #64	; 0x40
 80025a4:	9303      	str	r3, [sp, #12]
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d0f7      	beq.n	800259c <HAL_I2C_Mem_Read+0x34>
 80025ac:	2201      	movs	r2, #1
 80025ae:	9b03      	ldr	r3, [sp, #12]
 80025b0:	701a      	strb	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80025b2:	f7ff f9e7 	bl	8001984 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80025b6:	2180      	movs	r1, #128	; 0x80
    tickstart = HAL_GetTick();
 80025b8:	9002      	str	r0, [sp, #8]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80025ba:	9000      	str	r0, [sp, #0]
 80025bc:	2319      	movs	r3, #25
 80025be:	2201      	movs	r2, #1
 80025c0:	0209      	lsls	r1, r1, #8
 80025c2:	0020      	movs	r0, r4
 80025c4:	f7ff fd4e 	bl	8002064 <I2C_WaitOnFlagUntilTimeout>
 80025c8:	1e06      	subs	r6, r0, #0
 80025ca:	d1e6      	bne.n	800259a <HAL_I2C_Mem_Read+0x32>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80025cc:	2322      	movs	r3, #34	; 0x22
 80025ce:	703b      	strb	r3, [r7, #0]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80025d0:	0027      	movs	r7, r4
 80025d2:	331e      	adds	r3, #30
 80025d4:	3742      	adds	r7, #66	; 0x42
 80025d6:	703b      	strb	r3, [r7, #0]
    hi2c->pBuffPtr  = pData;
 80025d8:	9b04      	ldr	r3, [sp, #16]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025da:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 80025dc:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 80025de:	9b05      	ldr	r3, [sp, #20]
    hi2c->XferISR   = NULL;
 80025e0:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 80025e2:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80025e4:	9b02      	ldr	r3, [sp, #8]
 80025e6:	9a06      	ldr	r2, [sp, #24]
 80025e8:	9301      	str	r3, [sp, #4]
 80025ea:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80025ec:	0029      	movs	r1, r5
 80025ee:	9300      	str	r3, [sp, #0]
 80025f0:	0020      	movs	r0, r4
 80025f2:	9b07      	ldr	r3, [sp, #28]
 80025f4:	f7ff fdba 	bl	800216c <I2C_RequestMemoryRead>
 80025f8:	2800      	cmp	r0, #0
 80025fa:	d002      	beq.n	8002602 <HAL_I2C_Mem_Read+0x9a>
      __HAL_UNLOCK(hi2c);
 80025fc:	9b03      	ldr	r3, [sp, #12]
 80025fe:	701e      	strb	r6, [r3, #0]
 8002600:	e7cb      	b.n	800259a <HAL_I2C_Mem_Read+0x32>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002602:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002604:	4b35      	ldr	r3, [pc, #212]	; (80026dc <HAL_I2C_Mem_Read+0x174>)
 8002606:	2aff      	cmp	r2, #255	; 0xff
 8002608:	d958      	bls.n	80026bc <HAL_I2C_Mem_Read+0x154>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800260a:	22ff      	movs	r2, #255	; 0xff
 800260c:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800260e:	9300      	str	r3, [sp, #0]
 8002610:	2380      	movs	r3, #128	; 0x80
 8002612:	045b      	lsls	r3, r3, #17
 8002614:	0029      	movs	r1, r5
 8002616:	0020      	movs	r0, r4
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002618:	2680      	movs	r6, #128	; 0x80
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800261a:	f7ff fc69 	bl	8001ef0 <I2C_TransferConfig>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800261e:	04b6      	lsls	r6, r6, #18
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002620:	9b02      	ldr	r3, [sp, #8]
 8002622:	2200      	movs	r2, #0
 8002624:	9300      	str	r3, [sp, #0]
 8002626:	2104      	movs	r1, #4
 8002628:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800262a:	0020      	movs	r0, r4
 800262c:	f7ff fd1a 	bl	8002064 <I2C_WaitOnFlagUntilTimeout>
 8002630:	2800      	cmp	r0, #0
 8002632:	d1b2      	bne.n	800259a <HAL_I2C_Mem_Read+0x32>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002634:	6823      	ldr	r3, [r4, #0]
 8002636:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263a:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 800263c:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800263e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8002640:	3301      	adds	r3, #1
 8002642:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8002644:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002646:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8002648:	3b01      	subs	r3, #1
 800264a:	b29b      	uxth	r3, r3
 800264c:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800264e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002650:	b292      	uxth	r2, r2
 8002652:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002654:	2b00      	cmp	r3, #0
 8002656:	d018      	beq.n	800268a <HAL_I2C_Mem_Read+0x122>
 8002658:	2a00      	cmp	r2, #0
 800265a:	d116      	bne.n	800268a <HAL_I2C_Mem_Read+0x122>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800265c:	9b02      	ldr	r3, [sp, #8]
 800265e:	2180      	movs	r1, #128	; 0x80
 8002660:	9300      	str	r3, [sp, #0]
 8002662:	0020      	movs	r0, r4
 8002664:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002666:	f7ff fcfd 	bl	8002064 <I2C_WaitOnFlagUntilTimeout>
 800266a:	2800      	cmp	r0, #0
 800266c:	d000      	beq.n	8002670 <HAL_I2C_Mem_Read+0x108>
 800266e:	e794      	b.n	800259a <HAL_I2C_Mem_Read+0x32>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002670:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002672:	2bff      	cmp	r3, #255	; 0xff
 8002674:	d92a      	bls.n	80026cc <HAL_I2C_Mem_Read+0x164>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002676:	23ff      	movs	r3, #255	; 0xff
 8002678:	8523      	strh	r3, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800267a:	2380      	movs	r3, #128	; 0x80
 800267c:	22ff      	movs	r2, #255	; 0xff
 800267e:	9000      	str	r0, [sp, #0]
 8002680:	045b      	lsls	r3, r3, #17
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002682:	0029      	movs	r1, r5
 8002684:	0020      	movs	r0, r4
 8002686:	f7ff fc33 	bl	8001ef0 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 800268a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800268c:	2b00      	cmp	r3, #0
 800268e:	d1c7      	bne.n	8002620 <HAL_I2C_Mem_Read+0xb8>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002690:	9a02      	ldr	r2, [sp, #8]
 8002692:	9910      	ldr	r1, [sp, #64]	; 0x40
 8002694:	0020      	movs	r0, r4
 8002696:	f7ff fcbd 	bl	8002014 <I2C_WaitOnSTOPFlagUntilTimeout>
 800269a:	2800      	cmp	r0, #0
 800269c:	d000      	beq.n	80026a0 <HAL_I2C_Mem_Read+0x138>
 800269e:	e77c      	b.n	800259a <HAL_I2C_Mem_Read+0x32>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80026a0:	2120      	movs	r1, #32
 80026a2:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 80026a4:	4d0e      	ldr	r5, [pc, #56]	; (80026e0 <HAL_I2C_Mem_Read+0x178>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80026a6:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80026a8:	685a      	ldr	r2, [r3, #4]
 80026aa:	402a      	ands	r2, r5
 80026ac:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80026ae:	0023      	movs	r3, r4
    __HAL_UNLOCK(hi2c);
 80026b0:	3440      	adds	r4, #64	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 80026b2:	3341      	adds	r3, #65	; 0x41
 80026b4:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80026b6:	7038      	strb	r0, [r7, #0]
    __HAL_UNLOCK(hi2c);
 80026b8:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 80026ba:	e76f      	b.n	800259c <HAL_I2C_Mem_Read+0x34>
      hi2c->XferSize = hi2c->XferCount;
 80026bc:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80026be:	b292      	uxth	r2, r2
 80026c0:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80026c2:	9300      	str	r3, [sp, #0]
 80026c4:	2380      	movs	r3, #128	; 0x80
 80026c6:	b2d2      	uxtb	r2, r2
 80026c8:	049b      	lsls	r3, r3, #18
 80026ca:	e7a3      	b.n	8002614 <HAL_I2C_Mem_Read+0xac>
          hi2c->XferSize = hi2c->XferCount;
 80026cc:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80026ce:	0033      	movs	r3, r6
          hi2c->XferSize = hi2c->XferCount;
 80026d0:	b292      	uxth	r2, r2
 80026d2:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80026d4:	b2d2      	uxtb	r2, r2
 80026d6:	9000      	str	r0, [sp, #0]
 80026d8:	e7d3      	b.n	8002682 <HAL_I2C_Mem_Read+0x11a>
 80026da:	46c0      	nop			; (mov r8, r8)
 80026dc:	80002400 	.word	0x80002400
 80026e0:	fe00e800 	.word	0xfe00e800

080026e4 <My_I2C_Slave_Receive>:
  * @}
  */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
HAL_StatusTypeDef My_I2C_Slave_Receive(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t Timeout, GPIO_TypeDef *GPIOPORT, uint16_t GPIOPIN)
{
 80026e4:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t tickstart;

	if (hi2c->State == HAL_I2C_STATE_READY)
 80026e6:	0005      	movs	r5, r0
{
 80026e8:	b089      	sub	sp, #36	; 0x24
 80026ea:	9302      	str	r3, [sp, #8]
 80026ec:	ab0e      	add	r3, sp, #56	; 0x38
 80026ee:	9204      	str	r2, [sp, #16]
 80026f0:	cb04      	ldmia	r3!, {r2}
 80026f2:	9103      	str	r1, [sp, #12]
 80026f4:	881b      	ldrh	r3, [r3, #0]
 80026f6:	9206      	str	r2, [sp, #24]
 80026f8:	9307      	str	r3, [sp, #28]
	if (hi2c->State == HAL_I2C_STATE_READY)
 80026fa:	3541      	adds	r5, #65	; 0x41
 80026fc:	782f      	ldrb	r7, [r5, #0]
{
 80026fe:	0004      	movs	r4, r0
	if (hi2c->State == HAL_I2C_STATE_READY)
 8002700:	b2ff      	uxtb	r7, r7

		return HAL_OK;
	}
	else
	{
		return HAL_BUSY;
 8002702:	2002      	movs	r0, #2
	if (hi2c->State == HAL_I2C_STATE_READY)
 8002704:	2f20      	cmp	r7, #32
 8002706:	d108      	bne.n	800271a <My_I2C_Slave_Receive+0x36>
		if ((pData == NULL) || (Size == 0U))
 8002708:	2900      	cmp	r1, #0
 800270a:	d002      	beq.n	8002712 <My_I2C_Slave_Receive+0x2e>
 800270c:	9b04      	ldr	r3, [sp, #16]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d105      	bne.n	800271e <My_I2C_Slave_Receive+0x3a>
			hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002712:	2380      	movs	r3, #128	; 0x80
			return  1;
 8002714:	2001      	movs	r0, #1
			hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002716:	009b      	lsls	r3, r3, #2
 8002718:	6463      	str	r3, [r4, #68]	; 0x44
	}
}
 800271a:	b009      	add	sp, #36	; 0x24
 800271c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		__HAL_LOCK(hi2c);
 800271e:	0023      	movs	r3, r4
 8002720:	3340      	adds	r3, #64	; 0x40
 8002722:	781a      	ldrb	r2, [r3, #0]
 8002724:	2a01      	cmp	r2, #1
 8002726:	d0f8      	beq.n	800271a <My_I2C_Slave_Receive+0x36>
 8002728:	2201      	movs	r2, #1
 800272a:	701a      	strb	r2, [r3, #0]
		tickstart = HAL_GetTick();
 800272c:	f7ff f92a 	bl	8001984 <HAL_GetTick>
		hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002730:	2322      	movs	r3, #34	; 0x22
 8002732:	702b      	strb	r3, [r5, #0]
		hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8002734:	0023      	movs	r3, r4
 8002736:	3342      	adds	r3, #66	; 0x42
 8002738:	701f      	strb	r7, [r3, #0]
 800273a:	9305      	str	r3, [sp, #20]
		hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800273c:	2300      	movs	r3, #0
		hi2c->pBuffPtr  = pData;
 800273e:	9a03      	ldr	r2, [sp, #12]
		hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002740:	6463      	str	r3, [r4, #68]	; 0x44
		hi2c->pBuffPtr  = pData;
 8002742:	6262      	str	r2, [r4, #36]	; 0x24
		hi2c->XferCount = Size;
 8002744:	9a04      	ldr	r2, [sp, #16]
		hi2c->XferISR   = NULL;
 8002746:	6363      	str	r3, [r4, #52]	; 0x34
		hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8002748:	6823      	ldr	r3, [r4, #0]
		hi2c->XferCount = Size;
 800274a:	8562      	strh	r2, [r4, #42]	; 0x2a
		hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 800274c:	685a      	ldr	r2, [r3, #4]
 800274e:	4935      	ldr	r1, [pc, #212]	; (8002824 <My_I2C_Slave_Receive+0x140>)
		tickstart = HAL_GetTick();
 8002750:	0006      	movs	r6, r0
		hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8002752:	400a      	ands	r2, r1
 8002754:	605a      	str	r2, [r3, #4]
		if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_DIR, SET, Timeout, tickstart) != HAL_OK)
 8002756:	2180      	movs	r1, #128	; 0x80
		__HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002758:	2208      	movs	r2, #8
		if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_DIR, SET, Timeout, tickstart) != HAL_OK)
 800275a:	0249      	lsls	r1, r1, #9
		__HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800275c:	61da      	str	r2, [r3, #28]
		if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_DIR, SET, Timeout, tickstart) != HAL_OK)
 800275e:	9000      	str	r0, [sp, #0]
 8002760:	9b02      	ldr	r3, [sp, #8]
 8002762:	3a07      	subs	r2, #7
 8002764:	0020      	movs	r0, r4
 8002766:	f7ff fc7d 	bl	8002064 <I2C_WaitOnFlagUntilTimeout>
 800276a:	2800      	cmp	r0, #0
 800276c:	d007      	beq.n	800277e <My_I2C_Slave_Receive+0x9a>
			hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800276e:	2380      	movs	r3, #128	; 0x80
 8002770:	6822      	ldr	r2, [r4, #0]
 8002772:	021b      	lsls	r3, r3, #8
 8002774:	6851      	ldr	r1, [r2, #4]
			return 3;
 8002776:	2003      	movs	r0, #3
			hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002778:	430b      	orrs	r3, r1
 800277a:	6053      	str	r3, [r2, #4]
			return 3;
 800277c:	e7cd      	b.n	800271a <My_I2C_Slave_Receive+0x36>
		HAL_GPIO_TogglePin(GPIOPORT, GPIOPIN);	 // ACK to BLE end of received data
 800277e:	9907      	ldr	r1, [sp, #28]
 8002780:	9806      	ldr	r0, [sp, #24]
 8002782:	f7ff fb91 	bl	8001ea8 <HAL_GPIO_TogglePin>
		while (hi2c->XferCount > 0U)
 8002786:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
			if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002788:	0032      	movs	r2, r6
 800278a:	9902      	ldr	r1, [sp, #8]
 800278c:	0020      	movs	r0, r4
		while (hi2c->XferCount > 0U)
 800278e:	2b00      	cmp	r3, #0
 8002790:	d10b      	bne.n	80027aa <My_I2C_Slave_Receive+0xc6>
		if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002792:	f7ff fc3f 	bl	8002014 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002796:	2580      	movs	r5, #128	; 0x80
 8002798:	6823      	ldr	r3, [r4, #0]
 800279a:	022d      	lsls	r5, r5, #8
 800279c:	2800      	cmp	r0, #0
 800279e:	d028      	beq.n	80027f2 <My_I2C_Slave_Receive+0x10e>
			hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80027a0:	685a      	ldr	r2, [r3, #4]
			return 5;
 80027a2:	2005      	movs	r0, #5
			hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80027a4:	4315      	orrs	r5, r2
 80027a6:	605d      	str	r5, [r3, #4]
			return 5;
 80027a8:	e7b7      	b.n	800271a <My_I2C_Slave_Receive+0x36>
			if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027aa:	f7ff fbf3 	bl	8001f94 <I2C_WaitOnRXNEFlagUntilTimeout>
 80027ae:	6823      	ldr	r3, [r4, #0]
 80027b0:	2800      	cmp	r0, #0
 80027b2:	d013      	beq.n	80027dc <My_I2C_Slave_Receive+0xf8>
				hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80027b4:	2280      	movs	r2, #128	; 0x80
				return 4;
 80027b6:	2004      	movs	r0, #4
				hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80027b8:	6859      	ldr	r1, [r3, #4]
 80027ba:	0212      	lsls	r2, r2, #8
 80027bc:	430a      	orrs	r2, r1
 80027be:	605a      	str	r2, [r3, #4]
				if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80027c0:	699a      	ldr	r2, [r3, #24]
 80027c2:	4202      	tst	r2, r0
 80027c4:	d0a9      	beq.n	800271a <My_I2C_Slave_Receive+0x36>
					*hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80027c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80027ca:	7013      	strb	r3, [r2, #0]
					hi2c->pBuffPtr++;
 80027cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80027ce:	3301      	adds	r3, #1
 80027d0:	6263      	str	r3, [r4, #36]	; 0x24
					hi2c->XferCount--;
 80027d2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80027d4:	3b01      	subs	r3, #1
 80027d6:	b29b      	uxth	r3, r3
 80027d8:	8563      	strh	r3, [r4, #42]	; 0x2a
 80027da:	e79e      	b.n	800271a <My_I2C_Slave_Receive+0x36>
			*hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80027dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027de:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80027e0:	7013      	strb	r3, [r2, #0]
			hi2c->pBuffPtr++;
 80027e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80027e4:	3301      	adds	r3, #1
 80027e6:	6263      	str	r3, [r4, #36]	; 0x24
			hi2c->XferCount--;
 80027e8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80027ea:	3b01      	subs	r3, #1
 80027ec:	b29b      	uxth	r3, r3
 80027ee:	8563      	strh	r3, [r4, #42]	; 0x2a
 80027f0:	e7c9      	b.n	8002786 <My_I2C_Slave_Receive+0xa2>
		__HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80027f2:	2720      	movs	r7, #32
		if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, Timeout, tickstart) != HAL_OK)
 80027f4:	2201      	movs	r2, #1
		__HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80027f6:	61df      	str	r7, [r3, #28]
		if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, Timeout, tickstart) != HAL_OK)
 80027f8:	0029      	movs	r1, r5
 80027fa:	9b02      	ldr	r3, [sp, #8]
 80027fc:	9600      	str	r6, [sp, #0]
 80027fe:	0020      	movs	r0, r4
 8002800:	f7ff fc30 	bl	8002064 <I2C_WaitOnFlagUntilTimeout>
 8002804:	6823      	ldr	r3, [r4, #0]
			hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002806:	685a      	ldr	r2, [r3, #4]
 8002808:	4315      	orrs	r5, r2
 800280a:	605d      	str	r5, [r3, #4]
		if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, Timeout, tickstart) != HAL_OK)
 800280c:	2800      	cmp	r0, #0
 800280e:	d001      	beq.n	8002814 <My_I2C_Slave_Receive+0x130>
			return 6;
 8002810:	2006      	movs	r0, #6
 8002812:	e782      	b.n	800271a <My_I2C_Slave_Receive+0x36>
		hi2c->State = HAL_I2C_STATE_READY;
 8002814:	0023      	movs	r3, r4
 8002816:	3341      	adds	r3, #65	; 0x41
 8002818:	701f      	strb	r7, [r3, #0]
		hi2c->Mode  = HAL_I2C_MODE_NONE;
 800281a:	9b05      	ldr	r3, [sp, #20]
		__HAL_UNLOCK(hi2c);
 800281c:	3440      	adds	r4, #64	; 0x40
		hi2c->Mode  = HAL_I2C_MODE_NONE;
 800281e:	7018      	strb	r0, [r3, #0]
		__HAL_UNLOCK(hi2c);
 8002820:	7020      	strb	r0, [r4, #0]
		return HAL_OK;
 8002822:	e77a      	b.n	800271a <My_I2C_Slave_Receive+0x36>
 8002824:	ffff7fff 	.word	0xffff7fff

08002828 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002828:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800282a:	0004      	movs	r4, r0
 800282c:	3441      	adds	r4, #65	; 0x41
 800282e:	7822      	ldrb	r2, [r4, #0]
{
 8002830:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002832:	b2d2      	uxtb	r2, r2

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8002834:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002836:	2a20      	cmp	r2, #32
 8002838:	d118      	bne.n	800286c <HAL_I2CEx_ConfigAnalogFilter+0x44>
    __HAL_LOCK(hi2c);
 800283a:	001d      	movs	r5, r3
 800283c:	3540      	adds	r5, #64	; 0x40
 800283e:	782e      	ldrb	r6, [r5, #0]
 8002840:	2e01      	cmp	r6, #1
 8002842:	d013      	beq.n	800286c <HAL_I2CEx_ConfigAnalogFilter+0x44>
    __HAL_I2C_DISABLE(hi2c);
 8002844:	681b      	ldr	r3, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002846:	3022      	adds	r0, #34	; 0x22
 8002848:	7020      	strb	r0, [r4, #0]
    __HAL_I2C_DISABLE(hi2c);
 800284a:	681e      	ldr	r6, [r3, #0]
 800284c:	3823      	subs	r0, #35	; 0x23
 800284e:	4386      	bics	r6, r0
 8002850:	601e      	str	r6, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002852:	681e      	ldr	r6, [r3, #0]
 8002854:	4f06      	ldr	r7, [pc, #24]	; (8002870 <HAL_I2CEx_ConfigAnalogFilter+0x48>)
 8002856:	403e      	ands	r6, r7
 8002858:	601e      	str	r6, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 800285a:	681e      	ldr	r6, [r3, #0]
 800285c:	4331      	orrs	r1, r6
 800285e:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8002860:	6819      	ldr	r1, [r3, #0]
 8002862:	4308      	orrs	r0, r1
 8002864:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8002866:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8002868:	7022      	strb	r2, [r4, #0]
    __HAL_UNLOCK(hi2c);
 800286a:	7028      	strb	r0, [r5, #0]
  }
}
 800286c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800286e:	46c0      	nop			; (mov r8, r8)
 8002870:	ffffefff 	.word	0xffffefff

08002874 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002874:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002876:	0005      	movs	r5, r0
 8002878:	3541      	adds	r5, #65	; 0x41
 800287a:	782a      	ldrb	r2, [r5, #0]
{
 800287c:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800287e:	b2d2      	uxtb	r2, r2

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8002880:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002882:	2a20      	cmp	r2, #32
 8002884:	d117      	bne.n	80028b6 <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_LOCK(hi2c);
 8002886:	001c      	movs	r4, r3
 8002888:	3440      	adds	r4, #64	; 0x40
 800288a:	7826      	ldrb	r6, [r4, #0]
 800288c:	2e01      	cmp	r6, #1
 800288e:	d012      	beq.n	80028b6 <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_I2C_DISABLE(hi2c);
 8002890:	681b      	ldr	r3, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002892:	3022      	adds	r0, #34	; 0x22
 8002894:	7028      	strb	r0, [r5, #0]
    __HAL_I2C_DISABLE(hi2c);
 8002896:	681e      	ldr	r6, [r3, #0]
 8002898:	3823      	subs	r0, #35	; 0x23
 800289a:	4386      	bics	r6, r0
 800289c:	601e      	str	r6, [r3, #0]
    tmpreg = hi2c->Instance->CR1;
 800289e:	681e      	ldr	r6, [r3, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 80028a0:	4f05      	ldr	r7, [pc, #20]	; (80028b8 <HAL_I2CEx_ConfigDigitalFilter+0x44>)
    tmpreg |= DigitalFilter << 8U;
 80028a2:	0209      	lsls	r1, r1, #8
    tmpreg &= ~(I2C_CR1_DNF);
 80028a4:	403e      	ands	r6, r7
    tmpreg |= DigitalFilter << 8U;
 80028a6:	4331      	orrs	r1, r6
    hi2c->Instance->CR1 = tmpreg;
 80028a8:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 80028aa:	6819      	ldr	r1, [r3, #0]
 80028ac:	4308      	orrs	r0, r1
 80028ae:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 80028b0:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80028b2:	702a      	strb	r2, [r5, #0]
    __HAL_UNLOCK(hi2c);
 80028b4:	7020      	strb	r0, [r4, #0]
  }
}
 80028b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80028b8:	fffff0ff 	.word	0xfffff0ff

080028bc <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 80028bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80028be:	0004      	movs	r4, r0
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
  {
    return HAL_ERROR;
 80028c0:	2001      	movs	r0, #1
  if (hlptim == NULL)
 80028c2:	2c00      	cmp	r4, #0
 80028c4:	d042      	beq.n	800294c <HAL_LPTIM_Init+0x90>
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 80028c6:	0025      	movs	r5, r4
 80028c8:	352e      	adds	r5, #46	; 0x2e
 80028ca:	782b      	ldrb	r3, [r5, #0]
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d105      	bne.n	80028de <HAL_LPTIM_Init+0x22>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 80028d2:	0022      	movs	r2, r4
 80028d4:	322d      	adds	r2, #45	; 0x2d
 80028d6:	7013      	strb	r3, [r2, #0]

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 80028d8:	0020      	movs	r0, r4
 80028da:	f7fe ff13 	bl	8001704 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80028de:	2302      	movs	r3, #2

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 80028e0:	6826      	ldr	r6, [r4, #0]

  if (((hlptim->Init.Clock.Source) == LPTIM_CLOCKSOURCE_ULPTIM) || ((hlptim->Init.CounterSource) == LPTIM_COUNTERSOURCE_EXTERNAL))
 80028e2:	6867      	ldr	r7, [r4, #4]
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80028e4:	702b      	strb	r3, [r5, #0]
  tmpcfgr = hlptim->Instance->CFGR;
 80028e6:	68f3      	ldr	r3, [r6, #12]
 80028e8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  if (((hlptim->Init.Clock.Source) == LPTIM_CLOCKSOURCE_ULPTIM) || ((hlptim->Init.CounterSource) == LPTIM_COUNTERSOURCE_EXTERNAL))
 80028ea:	2f01      	cmp	r7, #1
 80028ec:	d003      	beq.n	80028f6 <HAL_LPTIM_Init+0x3a>
 80028ee:	2280      	movs	r2, #128	; 0x80
 80028f0:	0412      	lsls	r2, r2, #16
 80028f2:	4290      	cmp	r0, r2
 80028f4:	d101      	bne.n	80028fa <HAL_LPTIM_Init+0x3e>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 80028f6:	221e      	movs	r2, #30
 80028f8:	4393      	bics	r3, r2
  }
  if ((hlptim->Init.Trigger.Source) != LPTIM_TRIGSOURCE_SOFTWARE)
 80028fa:	4915      	ldr	r1, [pc, #84]	; (8002950 <HAL_LPTIM_Init+0x94>)
 80028fc:	6962      	ldr	r2, [r4, #20]
 80028fe:	468c      	mov	ip, r1
 8002900:	428a      	cmp	r2, r1
 8002902:	d001      	beq.n	8002908 <HAL_LPTIM_Init+0x4c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8002904:	4913      	ldr	r1, [pc, #76]	; (8002954 <HAL_LPTIM_Init+0x98>)
 8002906:	400b      	ands	r3, r1
  }

  /* Clear CKSEL, CKPOL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_CKPOL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8002908:	4913      	ldr	r1, [pc, #76]	; (8002958 <HAL_LPTIM_Init+0x9c>)
 800290a:	4019      	ands	r1, r3

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
              hlptim->Init.Clock.Prescaler |
              hlptim->Init.OutputPolarity  |
              hlptim->Init.UpdateMode      |
 800290c:	003b      	movs	r3, r7
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_CKPOL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 800290e:	9101      	str	r1, [sp, #4]
              hlptim->Init.UpdateMode      |
 8002910:	68a1      	ldr	r1, [r4, #8]
 8002912:	4303      	orrs	r3, r0
 8002914:	430b      	orrs	r3, r1
 8002916:	6a21      	ldr	r1, [r4, #32]
 8002918:	430b      	orrs	r3, r1
 800291a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800291c:	430b      	orrs	r3, r1
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800291e:	9901      	ldr	r1, [sp, #4]
 8002920:	430b      	orrs	r3, r1
              hlptim->Init.CounterSource);

  if (((hlptim->Init.Clock.Source) == LPTIM_CLOCKSOURCE_ULPTIM) || ((hlptim->Init.CounterSource) == LPTIM_COUNTERSOURCE_EXTERNAL))
 8002922:	2f01      	cmp	r7, #1
 8002924:	d003      	beq.n	800292e <HAL_LPTIM_Init+0x72>
 8002926:	2180      	movs	r1, #128	; 0x80
 8002928:	0409      	lsls	r1, r1, #16
 800292a:	4288      	cmp	r0, r1
 800292c:	d103      	bne.n	8002936 <HAL_LPTIM_Init+0x7a>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 800292e:	68e1      	ldr	r1, [r4, #12]
 8002930:	6920      	ldr	r0, [r4, #16]
 8002932:	4301      	orrs	r1, r0
 8002934:	430b      	orrs	r3, r1
                hlptim->Init.UltraLowPowerClock.SampleTime);
  }

  if ((hlptim->Init.Trigger.Source) != LPTIM_TRIGSOURCE_SOFTWARE)
 8002936:	4562      	cmp	r2, ip
 8002938:	d004      	beq.n	8002944 <HAL_LPTIM_Init+0x88>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800293a:	69a1      	ldr	r1, [r4, #24]
 800293c:	430a      	orrs	r2, r1
                hlptim->Init.Trigger.ActiveEdge |
 800293e:	69e1      	ldr	r1, [r4, #28]
 8002940:	430a      	orrs	r2, r1
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8002942:	4313      	orrs	r3, r2
                hlptim->Init.Trigger.SampleTime);
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8002944:	60f3      	str	r3, [r6, #12]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8002946:	2301      	movs	r3, #1

  /* Return function status */
  return HAL_OK;
 8002948:	2000      	movs	r0, #0
  hlptim->State = HAL_LPTIM_STATE_READY;
 800294a:	702b      	strb	r3, [r5, #0]
}
 800294c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800294e:	46c0      	nop			; (mov r8, r8)
 8002950:	0000ffff 	.word	0x0000ffff
 8002954:	ffff1f3f 	.word	0xffff1f3f
 8002958:	ff19f1f8 	.word	0xff19f1f8

0800295c <HAL_LPTIM_Counter_Start>:
  * @param  Period Specifies the Autoreload value.
  *         This parameter must be a value between 0x0000 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Start(LPTIM_HandleTypeDef *hlptim, uint32_t Period)
{
 800295c:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800295e:	0004      	movs	r4, r0
 8002960:	2302      	movs	r3, #2

  /* If clock source is not ULPTIM clock and counter source is external, then it must not be prescaled */
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM) && (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8002962:	6842      	ldr	r2, [r0, #4]
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8002964:	342e      	adds	r4, #46	; 0x2e
 8002966:	7023      	strb	r3, [r4, #0]
 8002968:	6803      	ldr	r3, [r0, #0]
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM) && (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800296a:	2a01      	cmp	r2, #1
 800296c:	d008      	beq.n	8002980 <HAL_LPTIM_Counter_Start+0x24>
 800296e:	2280      	movs	r2, #128	; 0x80
 8002970:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8002972:	0412      	lsls	r2, r2, #16
 8002974:	4290      	cmp	r0, r2
 8002976:	d103      	bne.n	8002980 <HAL_LPTIM_Counter_Start+0x24>
  {
    /* Check if clock is prescaled */
    assert_param(IS_LPTIM_CLOCK_PRESCALERDIV1(hlptim->Init.Clock.Prescaler));
    /* Set clock prescaler to 0 */
    hlptim->Instance->CFGR &= ~LPTIM_CFGR_PRESC;
 8002978:	68da      	ldr	r2, [r3, #12]
 800297a:	4807      	ldr	r0, [pc, #28]	; (8002998 <HAL_LPTIM_Counter_Start+0x3c>)
 800297c:	4002      	ands	r2, r0
 800297e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8002980:	2001      	movs	r0, #1
 8002982:	691a      	ldr	r2, [r3, #16]
 8002984:	4302      	orrs	r2, r0
 8002986:	611a      	str	r2, [r3, #16]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 8002988:	2204      	movs	r2, #4
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 800298a:	6199      	str	r1, [r3, #24]
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 800298c:	6919      	ldr	r1, [r3, #16]
 800298e:	430a      	orrs	r2, r1
 8002990:	611a      	str	r2, [r3, #16]

  /* Change the TIM state*/
  hlptim->State = HAL_LPTIM_STATE_READY;
 8002992:	7020      	strb	r0, [r4, #0]

  /* Return function status */
  return HAL_OK;
}
 8002994:	2000      	movs	r0, #0
 8002996:	bd10      	pop	{r4, pc}
 8002998:	fffff1ff 	.word	0xfffff1ff

0800299c <HAL_LPTIM_ReadCounter>:
uint32_t HAL_LPTIM_ReadCounter(LPTIM_HandleTypeDef *hlptim)
{
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  return (hlptim->Instance->CNT);
 800299c:	6803      	ldr	r3, [r0, #0]
 800299e:	69d8      	ldr	r0, [r3, #28]
}
 80029a0:	4770      	bx	lr
	...

080029a4 <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *lptim)
{
 80029a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029a6:	0004      	movs	r4, r0
 80029a8:	b085      	sub	sp, #20
  __ASM volatile ("cpsid i" : : : "memory");
 80029aa:	b672      	cpsid	i

  __disable_irq();

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)lptim->Instance)
 80029ac:	4e37      	ldr	r6, [pc, #220]	; (8002a8c <LPTIM_Disable+0xe8>)
 80029ae:	6803      	ldr	r3, [r0, #0]
 80029b0:	42b3      	cmp	r3, r6
 80029b2:	d167      	bne.n	8002a84 <LPTIM_Disable+0xe0>
  {
     case LPTIM1_BASE:
       tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 80029b4:	4a36      	ldr	r2, [pc, #216]	; (8002a90 <LPTIM_Disable+0xec>)
 80029b6:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 80029b8:	22c0      	movs	r2, #192	; 0xc0
 80029ba:	0312      	lsls	r2, r2, #12
 80029bc:	4011      	ands	r1, r2
 80029be:	9100      	str	r1, [sp, #0]
     default:
       break;
  }

  /* Save LPTIM configuration registers */
  tmpIER = lptim->Instance->IER;
 80029c0:	689a      	ldr	r2, [r3, #8]
 80029c2:	9201      	str	r2, [sp, #4]
  tmpCFGR = lptim->Instance->CFGR;
 80029c4:	68da      	ldr	r2, [r3, #12]
  tmpCMP = lptim->Instance->CMP;
 80029c6:	6958      	ldr	r0, [r3, #20]
  tmpCFGR = lptim->Instance->CFGR;
 80029c8:	9202      	str	r2, [sp, #8]
  tmpARR = lptim->Instance->ARR;
 80029ca:	699f      	ldr	r7, [r3, #24]

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)lptim->Instance)
 80029cc:	42b3      	cmp	r3, r6
 80029ce:	d109      	bne.n	80029e4 <LPTIM_Disable+0x40>
  {
     case LPTIM1_BASE:
       __HAL_RCC_LPTIM1_FORCE_RESET();
 80029d0:	2280      	movs	r2, #128	; 0x80
 80029d2:	492f      	ldr	r1, [pc, #188]	; (8002a90 <LPTIM_Disable+0xec>)
 80029d4:	0612      	lsls	r2, r2, #24
 80029d6:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 80029d8:	432a      	orrs	r2, r5
 80029da:	628a      	str	r2, [r1, #40]	; 0x28
       __HAL_RCC_LPTIM1_RELEASE_RESET();
 80029dc:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 80029de:	0052      	lsls	r2, r2, #1
 80029e0:	0852      	lsrs	r2, r2, #1
 80029e2:	628a      	str	r2, [r1, #40]	; 0x28

  /*********** Restore LPTIM Config ***********/
  uint32_t Ref_Time;
  uint32_t Time_Elapsed;

  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 80029e4:	0002      	movs	r2, r0
 80029e6:	433a      	orrs	r2, r7
 80029e8:	d040      	beq.n	8002a6c <LPTIM_Disable+0xc8>
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)lptim->Instance)
 80029ea:	42b3      	cmp	r3, r6
 80029ec:	d104      	bne.n	80029f8 <LPTIM_Disable+0x54>
    {
       case LPTIM1_BASE:
         __HAL_RCC_LPTIM1_CONFIG(0UL);
 80029ee:	4928      	ldr	r1, [pc, #160]	; (8002a90 <LPTIM_Disable+0xec>)
 80029f0:	4d28      	ldr	r5, [pc, #160]	; (8002a94 <LPTIM_Disable+0xf0>)
 80029f2:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80029f4:	402a      	ands	r2, r5
 80029f6:	64ca      	str	r2, [r1, #76]	; 0x4c
#endif /* LPTIM2 */
       default:
         break;
    }

    if (tmpCMP != 0UL)
 80029f8:	2800      	cmp	r0, #0
 80029fa:	d015      	beq.n	8002a28 <LPTIM_Disable+0x84>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      lptim->Instance->CR |= LPTIM_CR_ENABLE;
 80029fc:	2201      	movs	r2, #1
 80029fe:	6919      	ldr	r1, [r3, #16]
      /* Polling on CMP write ok status after above restore operation */
      Ref_Time = HAL_GetTick();
      do
      {
        Time_Elapsed = HAL_GetTick() - Ref_Time;
      } while ((!(__HAL_LPTIM_GET_FLAG(lptim, LPTIM_FLAG_CMPOK))) && (Time_Elapsed <= TIMEOUT));
 8002a00:	2508      	movs	r5, #8
      lptim->Instance->CR |= LPTIM_CR_ENABLE;
 8002a02:	430a      	orrs	r2, r1
 8002a04:	611a      	str	r2, [r3, #16]
      lptim->Instance->CMP = tmpCMP;
 8002a06:	6158      	str	r0, [r3, #20]
      Ref_Time = HAL_GetTick();
 8002a08:	f7fe ffbc 	bl	8001984 <HAL_GetTick>
 8002a0c:	9003      	str	r0, [sp, #12]
        Time_Elapsed = HAL_GetTick() - Ref_Time;
 8002a0e:	f7fe ffb9 	bl	8001984 <HAL_GetTick>
 8002a12:	9b03      	ldr	r3, [sp, #12]
 8002a14:	1ac0      	subs	r0, r0, r3
      } while ((!(__HAL_LPTIM_GET_FLAG(lptim, LPTIM_FLAG_CMPOK))) && (Time_Elapsed <= TIMEOUT));
 8002a16:	6823      	ldr	r3, [r4, #0]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	422a      	tst	r2, r5
 8002a1c:	d103      	bne.n	8002a26 <LPTIM_Disable+0x82>
 8002a1e:	22fa      	movs	r2, #250	; 0xfa
 8002a20:	0092      	lsls	r2, r2, #2
 8002a22:	4290      	cmp	r0, r2
 8002a24:	d9f3      	bls.n	8002a0e <LPTIM_Disable+0x6a>

      __HAL_LPTIM_CLEAR_FLAG(lptim, LPTIM_FLAG_CMPOK);
 8002a26:	605d      	str	r5, [r3, #4]
    }

    if (tmpARR != 0UL)
 8002a28:	2f00      	cmp	r7, #0
 8002a2a:	d015      	beq.n	8002a58 <LPTIM_Disable+0xb4>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      lptim->Instance->CR |= LPTIM_CR_ENABLE;
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	6823      	ldr	r3, [r4, #0]
      /* Polling on ARR write ok status after above restore operation */
      Ref_Time = HAL_GetTick();
      do
      {
        Time_Elapsed = HAL_GetTick() - Ref_Time;
      } while ((!(__HAL_LPTIM_GET_FLAG(lptim, LPTIM_FLAG_ARROK))) && (Time_Elapsed <= TIMEOUT));
 8002a30:	2510      	movs	r5, #16
      lptim->Instance->CR |= LPTIM_CR_ENABLE;
 8002a32:	6919      	ldr	r1, [r3, #16]
 8002a34:	430a      	orrs	r2, r1
 8002a36:	611a      	str	r2, [r3, #16]
      lptim->Instance->ARR = tmpARR;
 8002a38:	619f      	str	r7, [r3, #24]
      Ref_Time = HAL_GetTick();
 8002a3a:	f7fe ffa3 	bl	8001984 <HAL_GetTick>
 8002a3e:	0007      	movs	r7, r0
        Time_Elapsed = HAL_GetTick() - Ref_Time;
 8002a40:	f7fe ffa0 	bl	8001984 <HAL_GetTick>
      } while ((!(__HAL_LPTIM_GET_FLAG(lptim, LPTIM_FLAG_ARROK))) && (Time_Elapsed <= TIMEOUT));
 8002a44:	6823      	ldr	r3, [r4, #0]
        Time_Elapsed = HAL_GetTick() - Ref_Time;
 8002a46:	1bc0      	subs	r0, r0, r7
      } while ((!(__HAL_LPTIM_GET_FLAG(lptim, LPTIM_FLAG_ARROK))) && (Time_Elapsed <= TIMEOUT));
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	422a      	tst	r2, r5
 8002a4c:	d103      	bne.n	8002a56 <LPTIM_Disable+0xb2>
 8002a4e:	22fa      	movs	r2, #250	; 0xfa
 8002a50:	0092      	lsls	r2, r2, #2
 8002a52:	4290      	cmp	r0, r2
 8002a54:	d9f4      	bls.n	8002a40 <LPTIM_Disable+0x9c>

      __HAL_LPTIM_CLEAR_FLAG(lptim, LPTIM_FLAG_ARROK);
 8002a56:	605d      	str	r5, [r3, #4]
    }

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)lptim->Instance)
 8002a58:	6823      	ldr	r3, [r4, #0]
 8002a5a:	42b3      	cmp	r3, r6
 8002a5c:	d106      	bne.n	8002a6c <LPTIM_Disable+0xc8>
    {
       case LPTIM1_BASE:
         __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 8002a5e:	4a0c      	ldr	r2, [pc, #48]	; (8002a90 <LPTIM_Disable+0xec>)
 8002a60:	490c      	ldr	r1, [pc, #48]	; (8002a94 <LPTIM_Disable+0xf0>)
 8002a62:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8002a64:	400b      	ands	r3, r1
 8002a66:	9900      	ldr	r1, [sp, #0]
 8002a68:	430b      	orrs	r3, r1
 8002a6a:	64d3      	str	r3, [r2, #76]	; 0x4c
         break;
    }
  }

  /* Restore configuration registers (LPTIM should be disabled first) */
  lptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 8002a6c:	2101      	movs	r1, #1
 8002a6e:	6823      	ldr	r3, [r4, #0]
 8002a70:	691a      	ldr	r2, [r3, #16]
 8002a72:	438a      	bics	r2, r1
 8002a74:	611a      	str	r2, [r3, #16]
  lptim->Instance->IER = tmpIER;
 8002a76:	9a01      	ldr	r2, [sp, #4]
 8002a78:	609a      	str	r2, [r3, #8]
  lptim->Instance->CFGR = tmpCFGR;
 8002a7a:	9a02      	ldr	r2, [sp, #8]
 8002a7c:	60da      	str	r2, [r3, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 8002a7e:	b662      	cpsie	i

  __enable_irq();
}
 8002a80:	b005      	add	sp, #20
 8002a82:	bdf0      	pop	{r4, r5, r6, r7, pc}
  uint32_t tmpclksource = 0;
 8002a84:	2200      	movs	r2, #0
 8002a86:	9200      	str	r2, [sp, #0]
 8002a88:	e79a      	b.n	80029c0 <LPTIM_Disable+0x1c>
 8002a8a:	46c0      	nop			; (mov r8, r8)
 8002a8c:	40007c00 	.word	0x40007c00
 8002a90:	40021000 	.word	0x40021000
 8002a94:	fff3ffff 	.word	0xfff3ffff

08002a98 <HAL_LPTIM_Counter_Stop>:
 8002a98:	b510      	push	{r4, lr}
 8002a9a:	0004      	movs	r4, r0
 8002a9c:	2302      	movs	r3, #2
 8002a9e:	342e      	adds	r4, #46	; 0x2e
 8002aa0:	7023      	strb	r3, [r4, #0]
 8002aa2:	f7ff ff7f 	bl	80029a4 <LPTIM_Disable>
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	2000      	movs	r0, #0
 8002aaa:	7023      	strb	r3, [r4, #0]
 8002aac:	bd10      	pop	{r4, pc}
	...

08002ab0 <HAL_PWR_ConfigPVD>:
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));

  /* Set PLS[7:5] bits according to PVDLevel value */
  MODIFY_REG(PWR->CR, PWR_CR_PLS, sConfigPVD->PVDLevel);
 8002ab0:	21e0      	movs	r1, #224	; 0xe0
 8002ab2:	4a19      	ldr	r2, [pc, #100]	; (8002b18 <HAL_PWR_ConfigPVD+0x68>)
 8002ab4:	6813      	ldr	r3, [r2, #0]
 8002ab6:	438b      	bics	r3, r1
 8002ab8:	6801      	ldr	r1, [r0, #0]
 8002aba:	430b      	orrs	r3, r1
 8002abc:	6013      	str	r3, [r2, #0]
  
  /* Clear any previous config. Keep it clear if no event or IT mode is selected */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 8002abe:	4b17      	ldr	r3, [pc, #92]	; (8002b1c <HAL_PWR_ConfigPVD+0x6c>)
 8002ac0:	4a17      	ldr	r2, [pc, #92]	; (8002b20 <HAL_PWR_ConfigPVD+0x70>)
 8002ac2:	6859      	ldr	r1, [r3, #4]
 8002ac4:	4011      	ands	r1, r2
 8002ac6:	6059      	str	r1, [r3, #4]
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 8002ac8:	6819      	ldr	r1, [r3, #0]
 8002aca:	4011      	ands	r1, r2
 8002acc:	6019      	str	r1, [r3, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE(); 
 8002ace:	68d9      	ldr	r1, [r3, #12]
 8002ad0:	4011      	ands	r1, r2
 8002ad2:	60d9      	str	r1, [r3, #12]
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 8002ad4:	6899      	ldr	r1, [r3, #8]
 8002ad6:	400a      	ands	r2, r1

  /* Configure interrupt mode */
  if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 8002ad8:	2180      	movs	r1, #128	; 0x80
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 8002ada:	609a      	str	r2, [r3, #8]
  if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 8002adc:	6842      	ldr	r2, [r0, #4]
 8002ade:	0249      	lsls	r1, r1, #9
 8002ae0:	420a      	tst	r2, r1
 8002ae2:	d002      	beq.n	8002aea <HAL_PWR_ConfigPVD+0x3a>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 8002ae4:	6818      	ldr	r0, [r3, #0]
 8002ae6:	4301      	orrs	r1, r0
 8002ae8:	6019      	str	r1, [r3, #0]
  }
  
  /* Configure event mode */
  if((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 8002aea:	0391      	lsls	r1, r2, #14
 8002aec:	d504      	bpl.n	8002af8 <HAL_PWR_ConfigPVD+0x48>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 8002aee:	2180      	movs	r1, #128	; 0x80
 8002af0:	6858      	ldr	r0, [r3, #4]
 8002af2:	0249      	lsls	r1, r1, #9
 8002af4:	4301      	orrs	r1, r0
 8002af6:	6059      	str	r1, [r3, #4]
  }
  
  /* Configure the edge */
  if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 8002af8:	07d1      	lsls	r1, r2, #31
 8002afa:	d504      	bpl.n	8002b06 <HAL_PWR_ConfigPVD+0x56>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 8002afc:	2180      	movs	r1, #128	; 0x80
 8002afe:	6898      	ldr	r0, [r3, #8]
 8002b00:	0249      	lsls	r1, r1, #9
 8002b02:	4301      	orrs	r1, r0
 8002b04:	6099      	str	r1, [r3, #8]
  }
  
  if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 8002b06:	0792      	lsls	r2, r2, #30
 8002b08:	d504      	bpl.n	8002b14 <HAL_PWR_ConfigPVD+0x64>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 8002b0a:	2280      	movs	r2, #128	; 0x80
 8002b0c:	68d9      	ldr	r1, [r3, #12]
 8002b0e:	0252      	lsls	r2, r2, #9
 8002b10:	430a      	orrs	r2, r1
 8002b12:	60da      	str	r2, [r3, #12]
  }
}
 8002b14:	4770      	bx	lr
 8002b16:	46c0      	nop			; (mov r8, r8)
 8002b18:	40007000 	.word	0x40007000
 8002b1c:	40010400 	.word	0x40010400
 8002b20:	fffeffff 	.word	0xfffeffff

08002b24 <HAL_PWR_EnablePVD>:
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
  /* Enable the power voltage detector */
  SET_BIT(PWR->CR, PWR_CR_PVDE);
 8002b24:	2310      	movs	r3, #16
 8002b26:	4a02      	ldr	r2, [pc, #8]	; (8002b30 <HAL_PWR_EnablePVD+0xc>)
 8002b28:	6811      	ldr	r1, [r2, #0]
 8002b2a:	430b      	orrs	r3, r1
 8002b2c:	6013      	str	r3, [r2, #0]
}
 8002b2e:	4770      	bx	lr
 8002b30:	40007000 	.word	0x40007000

08002b34 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8002b34:	b510      	push	{r4, lr}

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8002b36:	2403      	movs	r4, #3
  tmpreg = PWR->CR;
 8002b38:	4a0a      	ldr	r2, [pc, #40]	; (8002b64 <HAL_PWR_EnterSTOPMode+0x30>)
 8002b3a:	6813      	ldr	r3, [r2, #0]
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8002b3c:	43a3      	bics	r3, r4

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8002b3e:	4318      	orrs	r0, r3

  /* Store the new value */
  PWR->CR = tmpreg;
 8002b40:	6010      	str	r0, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8002b42:	2204      	movs	r2, #4
 8002b44:	4b08      	ldr	r3, [pc, #32]	; (8002b68 <HAL_PWR_EnterSTOPMode+0x34>)
 8002b46:	6918      	ldr	r0, [r3, #16]
 8002b48:	4302      	orrs	r2, r0
 8002b4a:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8002b4c:	2901      	cmp	r1, #1
 8002b4e:	d105      	bne.n	8002b5c <HAL_PWR_EnterSTOPMode+0x28>
  __ASM volatile ("wfi");
 8002b50:	bf30      	wfi
    __WFE();
    __WFE();
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8002b52:	2104      	movs	r1, #4
 8002b54:	691a      	ldr	r2, [r3, #16]
 8002b56:	438a      	bics	r2, r1
 8002b58:	611a      	str	r2, [r3, #16]

}
 8002b5a:	bd10      	pop	{r4, pc}
  __ASM volatile ("sev");
 8002b5c:	bf40      	sev
  __ASM volatile ("wfe");
 8002b5e:	bf20      	wfe
 8002b60:	bf20      	wfe
 8002b62:	e7f6      	b.n	8002b52 <HAL_PWR_EnterSTOPMode+0x1e>
 8002b64:	40007000 	.word	0x40007000
 8002b68:	e000ed00 	.word	0xe000ed00

08002b6c <HAL_PWR_PVDCallback>:
__weak void HAL_PWR_PVDCallback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 8002b6c:	4770      	bx	lr
	...

08002b70 <HAL_PWR_PVD_IRQHandler>:
{
 8002b70:	b570      	push	{r4, r5, r6, lr}
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8002b72:	2580      	movs	r5, #128	; 0x80
 8002b74:	4c04      	ldr	r4, [pc, #16]	; (8002b88 <HAL_PWR_PVD_IRQHandler+0x18>)
 8002b76:	026d      	lsls	r5, r5, #9
 8002b78:	6963      	ldr	r3, [r4, #20]
 8002b7a:	422b      	tst	r3, r5
 8002b7c:	d002      	beq.n	8002b84 <HAL_PWR_PVD_IRQHandler+0x14>
    HAL_PWR_PVDCallback();
 8002b7e:	f7ff fff5 	bl	8002b6c <HAL_PWR_PVDCallback>
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8002b82:	6165      	str	r5, [r4, #20]
}
 8002b84:	bd70      	pop	{r4, r5, r6, pc}
 8002b86:	46c0      	nop			; (mov r8, r8)
 8002b88:	40010400 	.word	0x40010400

08002b8c <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b8c:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 8002b8e:	4b19      	ldr	r3, [pc, #100]	; (8002bf4 <HAL_RCC_GetSysClockFreq+0x68>)
{
 8002b90:	b510      	push	{r4, lr}
  tmpreg = RCC->CFGR;
 8002b92:	68d9      	ldr	r1, [r3, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 8002b94:	400a      	ands	r2, r1
 8002b96:	2a08      	cmp	r2, #8
 8002b98:	d029      	beq.n	8002bee <HAL_RCC_GetSysClockFreq+0x62>
 8002b9a:	2a0c      	cmp	r2, #12
 8002b9c:	d009      	beq.n	8002bb2 <HAL_RCC_GetSysClockFreq+0x26>
 8002b9e:	2a04      	cmp	r2, #4
 8002ba0:	d11d      	bne.n	8002bde <HAL_RCC_GetSysClockFreq+0x52>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002ba2:	6818      	ldr	r0, [r3, #0]
      {
        sysclockfreq =  (HSI_VALUE >> 2);
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
 8002ba4:	4b14      	ldr	r3, [pc, #80]	; (8002bf8 <HAL_RCC_GetSysClockFreq+0x6c>)
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002ba6:	06c0      	lsls	r0, r0, #27
        sysclockfreq =  HSI_VALUE;
 8002ba8:	17c0      	asrs	r0, r0, #31
 8002baa:	4018      	ands	r0, r3
 8002bac:	4b13      	ldr	r3, [pc, #76]	; (8002bfc <HAL_RCC_GetSysClockFreq+0x70>)
 8002bae:	18c0      	adds	r0, r0, r3
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
      break;
    }
  }
  return sysclockfreq;
}
 8002bb0:	bd10      	pop	{r4, pc}
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002bb2:	028a      	lsls	r2, r1, #10
 8002bb4:	4812      	ldr	r0, [pc, #72]	; (8002c00 <HAL_RCC_GetSysClockFreq+0x74>)
 8002bb6:	0f12      	lsrs	r2, r2, #28
 8002bb8:	5c82      	ldrb	r2, [r0, r2]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002bba:	0209      	lsls	r1, r1, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002bbc:	68d8      	ldr	r0, [r3, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002bbe:	0f89      	lsrs	r1, r1, #30
 8002bc0:	3101      	adds	r1, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002bc2:	03c0      	lsls	r0, r0, #15
 8002bc4:	d504      	bpl.n	8002bd0 <HAL_RCC_GetSysClockFreq+0x44>
        pllvco = (HSE_VALUE * pllm) / plld;
 8002bc6:	480f      	ldr	r0, [pc, #60]	; (8002c04 <HAL_RCC_GetSysClockFreq+0x78>)
         pllvco = (HSI_VALUE * pllm) / plld;
 8002bc8:	4350      	muls	r0, r2
 8002bca:	f7fd fa9d 	bl	8000108 <__udivsi3>
 8002bce:	e7ef      	b.n	8002bb0 <HAL_RCC_GetSysClockFreq+0x24>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	06db      	lsls	r3, r3, #27
 8002bd4:	d501      	bpl.n	8002bda <HAL_RCC_GetSysClockFreq+0x4e>
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8002bd6:	480c      	ldr	r0, [pc, #48]	; (8002c08 <HAL_RCC_GetSysClockFreq+0x7c>)
 8002bd8:	e7f6      	b.n	8002bc8 <HAL_RCC_GetSysClockFreq+0x3c>
         pllvco = (HSI_VALUE * pllm) / plld;
 8002bda:	4808      	ldr	r0, [pc, #32]	; (8002bfc <HAL_RCC_GetSysClockFreq+0x70>)
 8002bdc:	e7f4      	b.n	8002bc8 <HAL_RCC_GetSysClockFreq+0x3c>
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002bde:	2080      	movs	r0, #128	; 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002be0:	685b      	ldr	r3, [r3, #4]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002be2:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002be4:	041b      	lsls	r3, r3, #16
 8002be6:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002be8:	3301      	adds	r3, #1
 8002bea:	4098      	lsls	r0, r3
 8002bec:	e7e0      	b.n	8002bb0 <HAL_RCC_GetSysClockFreq+0x24>
      sysclockfreq = HSE_VALUE;
 8002bee:	4805      	ldr	r0, [pc, #20]	; (8002c04 <HAL_RCC_GetSysClockFreq+0x78>)
 8002bf0:	e7de      	b.n	8002bb0 <HAL_RCC_GetSysClockFreq+0x24>
 8002bf2:	46c0      	nop			; (mov r8, r8)
 8002bf4:	40021000 	.word	0x40021000
 8002bf8:	ff48e500 	.word	0xff48e500
 8002bfc:	00f42400 	.word	0x00f42400
 8002c00:	080034d4 	.word	0x080034d4
 8002c04:	007a1200 	.word	0x007a1200
 8002c08:	003d0900 	.word	0x003d0900

08002c0c <HAL_RCC_OscConfig>:
{
 8002c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c0e:	0005      	movs	r5, r0
 8002c10:	b087      	sub	sp, #28
  if(RCC_OscInitStruct == NULL)
 8002c12:	2800      	cmp	r0, #0
 8002c14:	d102      	bne.n	8002c1c <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 8002c16:	2001      	movs	r0, #1
}
 8002c18:	b007      	add	sp, #28
 8002c1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c1c:	230c      	movs	r3, #12
 8002c1e:	4cc0      	ldr	r4, [pc, #768]	; (8002f20 <HAL_RCC_OscConfig+0x314>)
 8002c20:	68e6      	ldr	r6, [r4, #12]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c22:	68e2      	ldr	r2, [r4, #12]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c24:	401e      	ands	r6, r3
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c26:	2380      	movs	r3, #128	; 0x80
 8002c28:	025b      	lsls	r3, r3, #9
 8002c2a:	401a      	ands	r2, r3
 8002c2c:	9201      	str	r2, [sp, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c2e:	6802      	ldr	r2, [r0, #0]
 8002c30:	07d2      	lsls	r2, r2, #31
 8002c32:	d43d      	bmi.n	8002cb0 <HAL_RCC_OscConfig+0xa4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c34:	682b      	ldr	r3, [r5, #0]
 8002c36:	079b      	lsls	r3, r3, #30
 8002c38:	d500      	bpl.n	8002c3c <HAL_RCC_OscConfig+0x30>
 8002c3a:	e083      	b.n	8002d44 <HAL_RCC_OscConfig+0x138>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002c3c:	682b      	ldr	r3, [r5, #0]
 8002c3e:	06db      	lsls	r3, r3, #27
 8002c40:	d528      	bpl.n	8002c94 <HAL_RCC_OscConfig+0x88>
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8002c42:	2e00      	cmp	r6, #0
 8002c44:	d000      	beq.n	8002c48 <HAL_RCC_OscConfig+0x3c>
 8002c46:	e0dd      	b.n	8002e04 <HAL_RCC_OscConfig+0x1f8>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002c48:	6823      	ldr	r3, [r4, #0]
 8002c4a:	059b      	lsls	r3, r3, #22
 8002c4c:	d502      	bpl.n	8002c54 <HAL_RCC_OscConfig+0x48>
 8002c4e:	69ab      	ldr	r3, [r5, #24]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d0e0      	beq.n	8002c16 <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c54:	6862      	ldr	r2, [r4, #4]
 8002c56:	49b3      	ldr	r1, [pc, #716]	; (8002f24 <HAL_RCC_OscConfig+0x318>)
 8002c58:	6a2b      	ldr	r3, [r5, #32]
 8002c5a:	400a      	ands	r2, r1
 8002c5c:	431a      	orrs	r2, r3
 8002c5e:	6062      	str	r2, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c60:	6861      	ldr	r1, [r4, #4]
 8002c62:	69ea      	ldr	r2, [r5, #28]
 8002c64:	0209      	lsls	r1, r1, #8
 8002c66:	0a09      	lsrs	r1, r1, #8
 8002c68:	0612      	lsls	r2, r2, #24
 8002c6a:	430a      	orrs	r2, r1
 8002c6c:	6062      	str	r2, [r4, #4]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002c6e:	2280      	movs	r2, #128	; 0x80
 8002c70:	0b5b      	lsrs	r3, r3, #13
 8002c72:	3301      	adds	r3, #1
 8002c74:	0212      	lsls	r2, r2, #8
 8002c76:	409a      	lsls	r2, r3
 8002c78:	0013      	movs	r3, r2
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002c7a:	68e1      	ldr	r1, [r4, #12]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8002c7c:	2000      	movs	r0, #0
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002c7e:	060a      	lsls	r2, r1, #24
 8002c80:	49a9      	ldr	r1, [pc, #676]	; (8002f28 <HAL_RCC_OscConfig+0x31c>)
 8002c82:	0f12      	lsrs	r2, r2, #28
 8002c84:	5c8a      	ldrb	r2, [r1, r2]
 8002c86:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002c88:	4aa8      	ldr	r2, [pc, #672]	; (8002f2c <HAL_RCC_OscConfig+0x320>)
 8002c8a:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8002c8c:	f7fe fe36 	bl	80018fc <HAL_InitTick>
        if(status != HAL_OK)
 8002c90:	2800      	cmp	r0, #0
 8002c92:	d1c1      	bne.n	8002c18 <HAL_RCC_OscConfig+0xc>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c94:	682b      	ldr	r3, [r5, #0]
 8002c96:	071b      	lsls	r3, r3, #28
 8002c98:	d500      	bpl.n	8002c9c <HAL_RCC_OscConfig+0x90>
 8002c9a:	e0ea      	b.n	8002e72 <HAL_RCC_OscConfig+0x266>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c9c:	682b      	ldr	r3, [r5, #0]
 8002c9e:	075b      	lsls	r3, r3, #29
 8002ca0:	d500      	bpl.n	8002ca4 <HAL_RCC_OscConfig+0x98>
 8002ca2:	e10c      	b.n	8002ebe <HAL_RCC_OscConfig+0x2b2>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ca4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d000      	beq.n	8002cac <HAL_RCC_OscConfig+0xa0>
 8002caa:	e191      	b.n	8002fd0 <HAL_RCC_OscConfig+0x3c4>
  return HAL_OK;
 8002cac:	2000      	movs	r0, #0
 8002cae:	e7b3      	b.n	8002c18 <HAL_RCC_OscConfig+0xc>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002cb0:	2e08      	cmp	r6, #8
 8002cb2:	d004      	beq.n	8002cbe <HAL_RCC_OscConfig+0xb2>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002cb4:	2e0c      	cmp	r6, #12
 8002cb6:	d109      	bne.n	8002ccc <HAL_RCC_OscConfig+0xc0>
 8002cb8:	9a01      	ldr	r2, [sp, #4]
 8002cba:	2a00      	cmp	r2, #0
 8002cbc:	d006      	beq.n	8002ccc <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cbe:	6823      	ldr	r3, [r4, #0]
 8002cc0:	039b      	lsls	r3, r3, #14
 8002cc2:	d5b7      	bpl.n	8002c34 <HAL_RCC_OscConfig+0x28>
 8002cc4:	686b      	ldr	r3, [r5, #4]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d1b4      	bne.n	8002c34 <HAL_RCC_OscConfig+0x28>
 8002cca:	e7a4      	b.n	8002c16 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ccc:	686a      	ldr	r2, [r5, #4]
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d111      	bne.n	8002cf6 <HAL_RCC_OscConfig+0xea>
 8002cd2:	6822      	ldr	r2, [r4, #0]
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002cd8:	f7fe fe54 	bl	8001984 <HAL_GetTick>
 8002cdc:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002cde:	2280      	movs	r2, #128	; 0x80
 8002ce0:	6823      	ldr	r3, [r4, #0]
 8002ce2:	0292      	lsls	r2, r2, #10
 8002ce4:	4213      	tst	r3, r2
 8002ce6:	d1a5      	bne.n	8002c34 <HAL_RCC_OscConfig+0x28>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ce8:	f7fe fe4c 	bl	8001984 <HAL_GetTick>
 8002cec:	1bc0      	subs	r0, r0, r7
 8002cee:	2864      	cmp	r0, #100	; 0x64
 8002cf0:	d9f5      	bls.n	8002cde <HAL_RCC_OscConfig+0xd2>
            return HAL_TIMEOUT;
 8002cf2:	2003      	movs	r0, #3
 8002cf4:	e790      	b.n	8002c18 <HAL_RCC_OscConfig+0xc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cf6:	21a0      	movs	r1, #160	; 0xa0
 8002cf8:	02c9      	lsls	r1, r1, #11
 8002cfa:	428a      	cmp	r2, r1
 8002cfc:	d105      	bne.n	8002d0a <HAL_RCC_OscConfig+0xfe>
 8002cfe:	2280      	movs	r2, #128	; 0x80
 8002d00:	6821      	ldr	r1, [r4, #0]
 8002d02:	02d2      	lsls	r2, r2, #11
 8002d04:	430a      	orrs	r2, r1
 8002d06:	6022      	str	r2, [r4, #0]
 8002d08:	e7e3      	b.n	8002cd2 <HAL_RCC_OscConfig+0xc6>
 8002d0a:	6821      	ldr	r1, [r4, #0]
 8002d0c:	4888      	ldr	r0, [pc, #544]	; (8002f30 <HAL_RCC_OscConfig+0x324>)
 8002d0e:	4001      	ands	r1, r0
 8002d10:	6021      	str	r1, [r4, #0]
 8002d12:	6821      	ldr	r1, [r4, #0]
 8002d14:	400b      	ands	r3, r1
 8002d16:	9305      	str	r3, [sp, #20]
 8002d18:	9b05      	ldr	r3, [sp, #20]
 8002d1a:	4986      	ldr	r1, [pc, #536]	; (8002f34 <HAL_RCC_OscConfig+0x328>)
 8002d1c:	6823      	ldr	r3, [r4, #0]
 8002d1e:	400b      	ands	r3, r1
 8002d20:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d22:	2a00      	cmp	r2, #0
 8002d24:	d1d8      	bne.n	8002cd8 <HAL_RCC_OscConfig+0xcc>
        tickstart = HAL_GetTick();
 8002d26:	f7fe fe2d 	bl	8001984 <HAL_GetTick>
 8002d2a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002d2c:	2280      	movs	r2, #128	; 0x80
 8002d2e:	6823      	ldr	r3, [r4, #0]
 8002d30:	0292      	lsls	r2, r2, #10
 8002d32:	4213      	tst	r3, r2
 8002d34:	d100      	bne.n	8002d38 <HAL_RCC_OscConfig+0x12c>
 8002d36:	e77d      	b.n	8002c34 <HAL_RCC_OscConfig+0x28>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d38:	f7fe fe24 	bl	8001984 <HAL_GetTick>
 8002d3c:	1bc0      	subs	r0, r0, r7
 8002d3e:	2864      	cmp	r0, #100	; 0x64
 8002d40:	d9f4      	bls.n	8002d2c <HAL_RCC_OscConfig+0x120>
 8002d42:	e7d6      	b.n	8002cf2 <HAL_RCC_OscConfig+0xe6>
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8002d44:	2220      	movs	r2, #32
    hsi_state = RCC_OscInitStruct->HSIState;
 8002d46:	68eb      	ldr	r3, [r5, #12]
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8002d48:	4213      	tst	r3, r2
 8002d4a:	d003      	beq.n	8002d54 <HAL_RCC_OscConfig+0x148>
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8002d4c:	6821      	ldr	r1, [r4, #0]
      hsi_state &= ~RCC_CR_HSIOUTEN;
 8002d4e:	4393      	bics	r3, r2
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8002d50:	4311      	orrs	r1, r2
 8002d52:	6021      	str	r1, [r4, #0]
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d54:	2e04      	cmp	r6, #4
 8002d56:	d004      	beq.n	8002d62 <HAL_RCC_OscConfig+0x156>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002d58:	2e0c      	cmp	r6, #12
 8002d5a:	d125      	bne.n	8002da8 <HAL_RCC_OscConfig+0x19c>
 8002d5c:	9a01      	ldr	r2, [sp, #4]
 8002d5e:	2a00      	cmp	r2, #0
 8002d60:	d122      	bne.n	8002da8 <HAL_RCC_OscConfig+0x19c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8002d62:	6822      	ldr	r2, [r4, #0]
 8002d64:	0752      	lsls	r2, r2, #29
 8002d66:	d502      	bpl.n	8002d6e <HAL_RCC_OscConfig+0x162>
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d100      	bne.n	8002d6e <HAL_RCC_OscConfig+0x162>
 8002d6c:	e753      	b.n	8002c16 <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d6e:	6861      	ldr	r1, [r4, #4]
 8002d70:	692a      	ldr	r2, [r5, #16]
 8002d72:	4871      	ldr	r0, [pc, #452]	; (8002f38 <HAL_RCC_OscConfig+0x32c>)
 8002d74:	0212      	lsls	r2, r2, #8
 8002d76:	4001      	ands	r1, r0
 8002d78:	430a      	orrs	r2, r1
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002d7a:	2109      	movs	r1, #9
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d7c:	6062      	str	r2, [r4, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002d7e:	6822      	ldr	r2, [r4, #0]
 8002d80:	438a      	bics	r2, r1
 8002d82:	4313      	orrs	r3, r2
 8002d84:	6023      	str	r3, [r4, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d86:	f7ff ff01 	bl	8002b8c <HAL_RCC_GetSysClockFreq>
 8002d8a:	68e3      	ldr	r3, [r4, #12]
 8002d8c:	4a66      	ldr	r2, [pc, #408]	; (8002f28 <HAL_RCC_OscConfig+0x31c>)
 8002d8e:	061b      	lsls	r3, r3, #24
 8002d90:	0f1b      	lsrs	r3, r3, #28
 8002d92:	5cd3      	ldrb	r3, [r2, r3]
 8002d94:	40d8      	lsrs	r0, r3
 8002d96:	4b65      	ldr	r3, [pc, #404]	; (8002f2c <HAL_RCC_OscConfig+0x320>)
 8002d98:	6018      	str	r0, [r3, #0]
      status = HAL_InitTick (TICK_INT_PRIORITY);
 8002d9a:	2000      	movs	r0, #0
 8002d9c:	f7fe fdae 	bl	80018fc <HAL_InitTick>
      if(status != HAL_OK)
 8002da0:	2800      	cmp	r0, #0
 8002da2:	d100      	bne.n	8002da6 <HAL_RCC_OscConfig+0x19a>
 8002da4:	e74a      	b.n	8002c3c <HAL_RCC_OscConfig+0x30>
 8002da6:	e737      	b.n	8002c18 <HAL_RCC_OscConfig+0xc>
      if(hsi_state != RCC_HSI_OFF)
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d019      	beq.n	8002de0 <HAL_RCC_OscConfig+0x1d4>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002dac:	2109      	movs	r1, #9
 8002dae:	6822      	ldr	r2, [r4, #0]
 8002db0:	438a      	bics	r2, r1
 8002db2:	4313      	orrs	r3, r2
 8002db4:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002db6:	f7fe fde5 	bl	8001984 <HAL_GetTick>
 8002dba:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002dbc:	2204      	movs	r2, #4
 8002dbe:	6823      	ldr	r3, [r4, #0]
 8002dc0:	4213      	tst	r3, r2
 8002dc2:	d007      	beq.n	8002dd4 <HAL_RCC_OscConfig+0x1c8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dc4:	6862      	ldr	r2, [r4, #4]
 8002dc6:	692b      	ldr	r3, [r5, #16]
 8002dc8:	495b      	ldr	r1, [pc, #364]	; (8002f38 <HAL_RCC_OscConfig+0x32c>)
 8002dca:	021b      	lsls	r3, r3, #8
 8002dcc:	400a      	ands	r2, r1
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	6063      	str	r3, [r4, #4]
 8002dd2:	e733      	b.n	8002c3c <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002dd4:	f7fe fdd6 	bl	8001984 <HAL_GetTick>
 8002dd8:	1bc0      	subs	r0, r0, r7
 8002dda:	2802      	cmp	r0, #2
 8002ddc:	d9ee      	bls.n	8002dbc <HAL_RCC_OscConfig+0x1b0>
 8002dde:	e788      	b.n	8002cf2 <HAL_RCC_OscConfig+0xe6>
        __HAL_RCC_HSI_DISABLE();
 8002de0:	2201      	movs	r2, #1
 8002de2:	6823      	ldr	r3, [r4, #0]
 8002de4:	4393      	bics	r3, r2
 8002de6:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002de8:	f7fe fdcc 	bl	8001984 <HAL_GetTick>
 8002dec:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002dee:	2204      	movs	r2, #4
 8002df0:	6823      	ldr	r3, [r4, #0]
 8002df2:	4213      	tst	r3, r2
 8002df4:	d100      	bne.n	8002df8 <HAL_RCC_OscConfig+0x1ec>
 8002df6:	e721      	b.n	8002c3c <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002df8:	f7fe fdc4 	bl	8001984 <HAL_GetTick>
 8002dfc:	1bc0      	subs	r0, r0, r7
 8002dfe:	2802      	cmp	r0, #2
 8002e00:	d9f5      	bls.n	8002dee <HAL_RCC_OscConfig+0x1e2>
 8002e02:	e776      	b.n	8002cf2 <HAL_RCC_OscConfig+0xe6>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002e04:	69ab      	ldr	r3, [r5, #24]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d020      	beq.n	8002e4c <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_MSI_ENABLE();
 8002e0a:	2380      	movs	r3, #128	; 0x80
 8002e0c:	6822      	ldr	r2, [r4, #0]
 8002e0e:	005b      	lsls	r3, r3, #1
 8002e10:	4313      	orrs	r3, r2
 8002e12:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002e14:	f7fe fdb6 	bl	8001984 <HAL_GetTick>
 8002e18:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002e1a:	2280      	movs	r2, #128	; 0x80
 8002e1c:	6823      	ldr	r3, [r4, #0]
 8002e1e:	0092      	lsls	r2, r2, #2
 8002e20:	4213      	tst	r3, r2
 8002e22:	d00d      	beq.n	8002e40 <HAL_RCC_OscConfig+0x234>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e24:	6863      	ldr	r3, [r4, #4]
 8002e26:	4a3f      	ldr	r2, [pc, #252]	; (8002f24 <HAL_RCC_OscConfig+0x318>)
 8002e28:	4013      	ands	r3, r2
 8002e2a:	6a2a      	ldr	r2, [r5, #32]
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	6063      	str	r3, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e30:	6862      	ldr	r2, [r4, #4]
 8002e32:	69eb      	ldr	r3, [r5, #28]
 8002e34:	0212      	lsls	r2, r2, #8
 8002e36:	061b      	lsls	r3, r3, #24
 8002e38:	0a12      	lsrs	r2, r2, #8
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	6063      	str	r3, [r4, #4]
 8002e3e:	e729      	b.n	8002c94 <HAL_RCC_OscConfig+0x88>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e40:	f7fe fda0 	bl	8001984 <HAL_GetTick>
 8002e44:	1bc0      	subs	r0, r0, r7
 8002e46:	2802      	cmp	r0, #2
 8002e48:	d9e7      	bls.n	8002e1a <HAL_RCC_OscConfig+0x20e>
 8002e4a:	e752      	b.n	8002cf2 <HAL_RCC_OscConfig+0xe6>
        __HAL_RCC_MSI_DISABLE();
 8002e4c:	6823      	ldr	r3, [r4, #0]
 8002e4e:	4a3b      	ldr	r2, [pc, #236]	; (8002f3c <HAL_RCC_OscConfig+0x330>)
 8002e50:	4013      	ands	r3, r2
 8002e52:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002e54:	f7fe fd96 	bl	8001984 <HAL_GetTick>
 8002e58:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002e5a:	2280      	movs	r2, #128	; 0x80
 8002e5c:	6823      	ldr	r3, [r4, #0]
 8002e5e:	0092      	lsls	r2, r2, #2
 8002e60:	4213      	tst	r3, r2
 8002e62:	d100      	bne.n	8002e66 <HAL_RCC_OscConfig+0x25a>
 8002e64:	e716      	b.n	8002c94 <HAL_RCC_OscConfig+0x88>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e66:	f7fe fd8d 	bl	8001984 <HAL_GetTick>
 8002e6a:	1bc0      	subs	r0, r0, r7
 8002e6c:	2802      	cmp	r0, #2
 8002e6e:	d9f4      	bls.n	8002e5a <HAL_RCC_OscConfig+0x24e>
 8002e70:	e73f      	b.n	8002cf2 <HAL_RCC_OscConfig+0xe6>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e72:	696a      	ldr	r2, [r5, #20]
 8002e74:	2301      	movs	r3, #1
 8002e76:	2a00      	cmp	r2, #0
 8002e78:	d010      	beq.n	8002e9c <HAL_RCC_OscConfig+0x290>
      __HAL_RCC_LSI_ENABLE();
 8002e7a:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8002e80:	f7fe fd80 	bl	8001984 <HAL_GetTick>
 8002e84:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002e86:	2202      	movs	r2, #2
 8002e88:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002e8a:	4213      	tst	r3, r2
 8002e8c:	d000      	beq.n	8002e90 <HAL_RCC_OscConfig+0x284>
 8002e8e:	e705      	b.n	8002c9c <HAL_RCC_OscConfig+0x90>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e90:	f7fe fd78 	bl	8001984 <HAL_GetTick>
 8002e94:	1bc0      	subs	r0, r0, r7
 8002e96:	2802      	cmp	r0, #2
 8002e98:	d9f5      	bls.n	8002e86 <HAL_RCC_OscConfig+0x27a>
 8002e9a:	e72a      	b.n	8002cf2 <HAL_RCC_OscConfig+0xe6>
      __HAL_RCC_LSI_DISABLE();
 8002e9c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8002e9e:	439a      	bics	r2, r3
 8002ea0:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8002ea2:	f7fe fd6f 	bl	8001984 <HAL_GetTick>
 8002ea6:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002ea8:	2202      	movs	r2, #2
 8002eaa:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002eac:	4213      	tst	r3, r2
 8002eae:	d100      	bne.n	8002eb2 <HAL_RCC_OscConfig+0x2a6>
 8002eb0:	e6f4      	b.n	8002c9c <HAL_RCC_OscConfig+0x90>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002eb2:	f7fe fd67 	bl	8001984 <HAL_GetTick>
 8002eb6:	1bc0      	subs	r0, r0, r7
 8002eb8:	2802      	cmp	r0, #2
 8002eba:	d9f5      	bls.n	8002ea8 <HAL_RCC_OscConfig+0x29c>
 8002ebc:	e719      	b.n	8002cf2 <HAL_RCC_OscConfig+0xe6>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ebe:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8002ec0:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ec2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002ec4:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 8002ec6:	9101      	str	r1, [sp, #4]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ec8:	421a      	tst	r2, r3
 8002eca:	d104      	bne.n	8002ed6 <HAL_RCC_OscConfig+0x2ca>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ecc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	9301      	str	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ed6:	2280      	movs	r2, #128	; 0x80
 8002ed8:	4f19      	ldr	r7, [pc, #100]	; (8002f40 <HAL_RCC_OscConfig+0x334>)
 8002eda:	0052      	lsls	r2, r2, #1
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	4213      	tst	r3, r2
 8002ee0:	d008      	beq.n	8002ef4 <HAL_RCC_OscConfig+0x2e8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ee2:	2280      	movs	r2, #128	; 0x80
 8002ee4:	68ab      	ldr	r3, [r5, #8]
 8002ee6:	0052      	lsls	r2, r2, #1
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d12b      	bne.n	8002f44 <HAL_RCC_OscConfig+0x338>
 8002eec:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	6523      	str	r3, [r4, #80]	; 0x50
 8002ef2:	e04c      	b.n	8002f8e <HAL_RCC_OscConfig+0x382>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ef4:	2280      	movs	r2, #128	; 0x80
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	0052      	lsls	r2, r2, #1
 8002efa:	4313      	orrs	r3, r2
 8002efc:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8002efe:	f7fe fd41 	bl	8001984 <HAL_GetTick>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f02:	2380      	movs	r3, #128	; 0x80
 8002f04:	005b      	lsls	r3, r3, #1
      tickstart = HAL_GetTick();
 8002f06:	9002      	str	r0, [sp, #8]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f08:	9303      	str	r3, [sp, #12]
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	9a03      	ldr	r2, [sp, #12]
 8002f0e:	4213      	tst	r3, r2
 8002f10:	d1e7      	bne.n	8002ee2 <HAL_RCC_OscConfig+0x2d6>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f12:	f7fe fd37 	bl	8001984 <HAL_GetTick>
 8002f16:	9b02      	ldr	r3, [sp, #8]
 8002f18:	1ac0      	subs	r0, r0, r3
 8002f1a:	2864      	cmp	r0, #100	; 0x64
 8002f1c:	d9f5      	bls.n	8002f0a <HAL_RCC_OscConfig+0x2fe>
 8002f1e:	e6e8      	b.n	8002cf2 <HAL_RCC_OscConfig+0xe6>
 8002f20:	40021000 	.word	0x40021000
 8002f24:	ffff1fff 	.word	0xffff1fff
 8002f28:	080034c4 	.word	0x080034c4
 8002f2c:	20000004 	.word	0x20000004
 8002f30:	fffeffff 	.word	0xfffeffff
 8002f34:	fffbffff 	.word	0xfffbffff
 8002f38:	ffffe0ff 	.word	0xffffe0ff
 8002f3c:	fffffeff 	.word	0xfffffeff
 8002f40:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d116      	bne.n	8002f76 <HAL_RCC_OscConfig+0x36a>
 8002f48:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002f4a:	4a53      	ldr	r2, [pc, #332]	; (8003098 <HAL_RCC_OscConfig+0x48c>)
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	6523      	str	r3, [r4, #80]	; 0x50
 8002f50:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002f52:	4a52      	ldr	r2, [pc, #328]	; (800309c <HAL_RCC_OscConfig+0x490>)
 8002f54:	4013      	ands	r3, r2
 8002f56:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8002f58:	f7fe fd14 	bl	8001984 <HAL_GetTick>
 8002f5c:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002f5e:	2280      	movs	r2, #128	; 0x80
 8002f60:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002f62:	0092      	lsls	r2, r2, #2
 8002f64:	4213      	tst	r3, r2
 8002f66:	d02a      	beq.n	8002fbe <HAL_RCC_OscConfig+0x3b2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f68:	f7fe fd0c 	bl	8001984 <HAL_GetTick>
 8002f6c:	4b4c      	ldr	r3, [pc, #304]	; (80030a0 <HAL_RCC_OscConfig+0x494>)
 8002f6e:	1bc0      	subs	r0, r0, r7
 8002f70:	4298      	cmp	r0, r3
 8002f72:	d9f4      	bls.n	8002f5e <HAL_RCC_OscConfig+0x352>
 8002f74:	e6bd      	b.n	8002cf2 <HAL_RCC_OscConfig+0xe6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f76:	21a0      	movs	r1, #160	; 0xa0
 8002f78:	00c9      	lsls	r1, r1, #3
 8002f7a:	428b      	cmp	r3, r1
 8002f7c:	d10b      	bne.n	8002f96 <HAL_RCC_OscConfig+0x38a>
 8002f7e:	2380      	movs	r3, #128	; 0x80
 8002f80:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8002f82:	00db      	lsls	r3, r3, #3
 8002f84:	430b      	orrs	r3, r1
 8002f86:	6523      	str	r3, [r4, #80]	; 0x50
 8002f88:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002f8a:	431a      	orrs	r2, r3
 8002f8c:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8002f8e:	f7fe fcf9 	bl	8001984 <HAL_GetTick>
 8002f92:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f94:	e00e      	b.n	8002fb4 <HAL_RCC_OscConfig+0x3a8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f96:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002f98:	4a3f      	ldr	r2, [pc, #252]	; (8003098 <HAL_RCC_OscConfig+0x48c>)
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	6523      	str	r3, [r4, #80]	; 0x50
 8002f9e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002fa0:	4a3e      	ldr	r2, [pc, #248]	; (800309c <HAL_RCC_OscConfig+0x490>)
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	e7a4      	b.n	8002ef0 <HAL_RCC_OscConfig+0x2e4>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fa6:	f7fe fced 	bl	8001984 <HAL_GetTick>
 8002faa:	4b3d      	ldr	r3, [pc, #244]	; (80030a0 <HAL_RCC_OscConfig+0x494>)
 8002fac:	1bc0      	subs	r0, r0, r7
 8002fae:	4298      	cmp	r0, r3
 8002fb0:	d900      	bls.n	8002fb4 <HAL_RCC_OscConfig+0x3a8>
 8002fb2:	e69e      	b.n	8002cf2 <HAL_RCC_OscConfig+0xe6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002fb4:	2280      	movs	r2, #128	; 0x80
 8002fb6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002fb8:	0092      	lsls	r2, r2, #2
 8002fba:	4213      	tst	r3, r2
 8002fbc:	d0f3      	beq.n	8002fa6 <HAL_RCC_OscConfig+0x39a>
    if(pwrclkchanged == SET)
 8002fbe:	9b01      	ldr	r3, [sp, #4]
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d000      	beq.n	8002fc6 <HAL_RCC_OscConfig+0x3ba>
 8002fc4:	e66e      	b.n	8002ca4 <HAL_RCC_OscConfig+0x98>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fc6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002fc8:	4a36      	ldr	r2, [pc, #216]	; (80030a4 <HAL_RCC_OscConfig+0x498>)
 8002fca:	4013      	ands	r3, r2
 8002fcc:	63a3      	str	r3, [r4, #56]	; 0x38
 8002fce:	e669      	b.n	8002ca4 <HAL_RCC_OscConfig+0x98>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fd0:	2e0c      	cmp	r6, #12
 8002fd2:	d043      	beq.n	800305c <HAL_RCC_OscConfig+0x450>
 8002fd4:	4a34      	ldr	r2, [pc, #208]	; (80030a8 <HAL_RCC_OscConfig+0x49c>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d12e      	bne.n	8003038 <HAL_RCC_OscConfig+0x42c>
        __HAL_RCC_PLL_DISABLE();
 8002fda:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002fdc:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8002fde:	4013      	ands	r3, r2
 8002fe0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002fe2:	f7fe fccf 	bl	8001984 <HAL_GetTick>
 8002fe6:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002fe8:	04b6      	lsls	r6, r6, #18
 8002fea:	6823      	ldr	r3, [r4, #0]
 8002fec:	4233      	tst	r3, r6
 8002fee:	d11d      	bne.n	800302c <HAL_RCC_OscConfig+0x420>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ff0:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8002ff2:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8002ff4:	68e2      	ldr	r2, [r4, #12]
 8002ff6:	430b      	orrs	r3, r1
 8002ff8:	492c      	ldr	r1, [pc, #176]	; (80030ac <HAL_RCC_OscConfig+0x4a0>)
 8002ffa:	400a      	ands	r2, r1
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	6b2a      	ldr	r2, [r5, #48]	; 0x30
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003000:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003002:	4313      	orrs	r3, r2
 8003004:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8003006:	2380      	movs	r3, #128	; 0x80
 8003008:	6822      	ldr	r2, [r4, #0]
 800300a:	045b      	lsls	r3, r3, #17
 800300c:	4313      	orrs	r3, r2
 800300e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003010:	f7fe fcb8 	bl	8001984 <HAL_GetTick>
 8003014:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003016:	04ad      	lsls	r5, r5, #18
 8003018:	6823      	ldr	r3, [r4, #0]
 800301a:	422b      	tst	r3, r5
 800301c:	d000      	beq.n	8003020 <HAL_RCC_OscConfig+0x414>
 800301e:	e645      	b.n	8002cac <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003020:	f7fe fcb0 	bl	8001984 <HAL_GetTick>
 8003024:	1b80      	subs	r0, r0, r6
 8003026:	2802      	cmp	r0, #2
 8003028:	d9f6      	bls.n	8003018 <HAL_RCC_OscConfig+0x40c>
 800302a:	e662      	b.n	8002cf2 <HAL_RCC_OscConfig+0xe6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800302c:	f7fe fcaa 	bl	8001984 <HAL_GetTick>
 8003030:	1bc0      	subs	r0, r0, r7
 8003032:	2802      	cmp	r0, #2
 8003034:	d9d9      	bls.n	8002fea <HAL_RCC_OscConfig+0x3de>
 8003036:	e65c      	b.n	8002cf2 <HAL_RCC_OscConfig+0xe6>
        __HAL_RCC_PLL_DISABLE();
 8003038:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800303a:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 800303c:	4013      	ands	r3, r2
 800303e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003040:	f7fe fca0 	bl	8001984 <HAL_GetTick>
 8003044:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003046:	04ad      	lsls	r5, r5, #18
 8003048:	6823      	ldr	r3, [r4, #0]
 800304a:	422b      	tst	r3, r5
 800304c:	d100      	bne.n	8003050 <HAL_RCC_OscConfig+0x444>
 800304e:	e62d      	b.n	8002cac <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003050:	f7fe fc98 	bl	8001984 <HAL_GetTick>
 8003054:	1b80      	subs	r0, r0, r6
 8003056:	2802      	cmp	r0, #2
 8003058:	d9f6      	bls.n	8003048 <HAL_RCC_OscConfig+0x43c>
 800305a:	e64a      	b.n	8002cf2 <HAL_RCC_OscConfig+0xe6>
        return HAL_ERROR;
 800305c:	0018      	movs	r0, r3
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800305e:	2b01      	cmp	r3, #1
 8003060:	d100      	bne.n	8003064 <HAL_RCC_OscConfig+0x458>
 8003062:	e5d9      	b.n	8002c18 <HAL_RCC_OscConfig+0xc>
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003064:	2280      	movs	r2, #128	; 0x80
        pll_config = RCC->CFGR;
 8003066:	68e3      	ldr	r3, [r4, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003068:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 800306a:	0252      	lsls	r2, r2, #9
 800306c:	401a      	ands	r2, r3
        return HAL_ERROR;
 800306e:	2001      	movs	r0, #1
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003070:	428a      	cmp	r2, r1
 8003072:	d000      	beq.n	8003076 <HAL_RCC_OscConfig+0x46a>
 8003074:	e5d0      	b.n	8002c18 <HAL_RCC_OscConfig+0xc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003076:	22f0      	movs	r2, #240	; 0xf0
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003078:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800307a:	0392      	lsls	r2, r2, #14
 800307c:	401a      	ands	r2, r3
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800307e:	428a      	cmp	r2, r1
 8003080:	d000      	beq.n	8003084 <HAL_RCC_OscConfig+0x478>
 8003082:	e5c9      	b.n	8002c18 <HAL_RCC_OscConfig+0xc>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003084:	20c0      	movs	r0, #192	; 0xc0
 8003086:	0400      	lsls	r0, r0, #16
 8003088:	4003      	ands	r3, r0
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800308a:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800308c:	1a18      	subs	r0, r3, r0
 800308e:	1e43      	subs	r3, r0, #1
 8003090:	4198      	sbcs	r0, r3
    return HAL_ERROR;
 8003092:	b2c0      	uxtb	r0, r0
 8003094:	e5c0      	b.n	8002c18 <HAL_RCC_OscConfig+0xc>
 8003096:	46c0      	nop			; (mov r8, r8)
 8003098:	fffffeff 	.word	0xfffffeff
 800309c:	fffffbff 	.word	0xfffffbff
 80030a0:	00001388 	.word	0x00001388
 80030a4:	efffffff 	.word	0xefffffff
 80030a8:	feffffff 	.word	0xfeffffff
 80030ac:	ff02ffff 	.word	0xff02ffff

080030b0 <HAL_RCC_ClockConfig>:
{
 80030b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80030b2:	1e06      	subs	r6, r0, #0
 80030b4:	9101      	str	r1, [sp, #4]
  if(RCC_ClkInitStruct == NULL)
 80030b6:	d101      	bne.n	80030bc <HAL_RCC_ClockConfig+0xc>
    return HAL_ERROR;
 80030b8:	2001      	movs	r0, #1
}
 80030ba:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030bc:	2201      	movs	r2, #1
 80030be:	4c51      	ldr	r4, [pc, #324]	; (8003204 <HAL_RCC_ClockConfig+0x154>)
 80030c0:	9901      	ldr	r1, [sp, #4]
 80030c2:	6823      	ldr	r3, [r4, #0]
 80030c4:	4013      	ands	r3, r2
 80030c6:	428b      	cmp	r3, r1
 80030c8:	d327      	bcc.n	800311a <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030ca:	6832      	ldr	r2, [r6, #0]
 80030cc:	0793      	lsls	r3, r2, #30
 80030ce:	d42f      	bmi.n	8003130 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030d0:	07d3      	lsls	r3, r2, #31
 80030d2:	d435      	bmi.n	8003140 <HAL_RCC_ClockConfig+0x90>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030d4:	2301      	movs	r3, #1
 80030d6:	6822      	ldr	r2, [r4, #0]
 80030d8:	9901      	ldr	r1, [sp, #4]
 80030da:	401a      	ands	r2, r3
 80030dc:	428a      	cmp	r2, r1
 80030de:	d900      	bls.n	80030e2 <HAL_RCC_ClockConfig+0x32>
 80030e0:	e081      	b.n	80031e6 <HAL_RCC_ClockConfig+0x136>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030e2:	6832      	ldr	r2, [r6, #0]
 80030e4:	4c48      	ldr	r4, [pc, #288]	; (8003208 <HAL_RCC_ClockConfig+0x158>)
 80030e6:	0753      	lsls	r3, r2, #29
 80030e8:	d500      	bpl.n	80030ec <HAL_RCC_ClockConfig+0x3c>
 80030ea:	e084      	b.n	80031f6 <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030ec:	0713      	lsls	r3, r2, #28
 80030ee:	d506      	bpl.n	80030fe <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80030f0:	68e2      	ldr	r2, [r4, #12]
 80030f2:	6933      	ldr	r3, [r6, #16]
 80030f4:	4945      	ldr	r1, [pc, #276]	; (800320c <HAL_RCC_ClockConfig+0x15c>)
 80030f6:	00db      	lsls	r3, r3, #3
 80030f8:	400a      	ands	r2, r1
 80030fa:	4313      	orrs	r3, r2
 80030fc:	60e3      	str	r3, [r4, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80030fe:	f7ff fd45 	bl	8002b8c <HAL_RCC_GetSysClockFreq>
 8003102:	68e3      	ldr	r3, [r4, #12]
 8003104:	4a42      	ldr	r2, [pc, #264]	; (8003210 <HAL_RCC_ClockConfig+0x160>)
 8003106:	061b      	lsls	r3, r3, #24
 8003108:	0f1b      	lsrs	r3, r3, #28
 800310a:	5cd3      	ldrb	r3, [r2, r3]
 800310c:	40d8      	lsrs	r0, r3
 800310e:	4b41      	ldr	r3, [pc, #260]	; (8003214 <HAL_RCC_ClockConfig+0x164>)
 8003110:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(TICK_INT_PRIORITY);
 8003112:	2000      	movs	r0, #0
 8003114:	f7fe fbf2 	bl	80018fc <HAL_InitTick>
 8003118:	e7cf      	b.n	80030ba <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800311a:	6823      	ldr	r3, [r4, #0]
 800311c:	9901      	ldr	r1, [sp, #4]
 800311e:	4393      	bics	r3, r2
 8003120:	430b      	orrs	r3, r1
 8003122:	6023      	str	r3, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003124:	6823      	ldr	r3, [r4, #0]
 8003126:	4013      	ands	r3, r2
 8003128:	9a01      	ldr	r2, [sp, #4]
 800312a:	4293      	cmp	r3, r2
 800312c:	d1c4      	bne.n	80030b8 <HAL_RCC_ClockConfig+0x8>
 800312e:	e7cc      	b.n	80030ca <HAL_RCC_ClockConfig+0x1a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003130:	20f0      	movs	r0, #240	; 0xf0
 8003132:	4935      	ldr	r1, [pc, #212]	; (8003208 <HAL_RCC_ClockConfig+0x158>)
 8003134:	68cb      	ldr	r3, [r1, #12]
 8003136:	4383      	bics	r3, r0
 8003138:	68b0      	ldr	r0, [r6, #8]
 800313a:	4303      	orrs	r3, r0
 800313c:	60cb      	str	r3, [r1, #12]
 800313e:	e7c7      	b.n	80030d0 <HAL_RCC_ClockConfig+0x20>
 8003140:	4d31      	ldr	r5, [pc, #196]	; (8003208 <HAL_RCC_ClockConfig+0x158>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003142:	6872      	ldr	r2, [r6, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003144:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003146:	2a02      	cmp	r2, #2
 8003148:	d119      	bne.n	800317e <HAL_RCC_ClockConfig+0xce>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800314a:	039b      	lsls	r3, r3, #14
 800314c:	d5b4      	bpl.n	80030b8 <HAL_RCC_ClockConfig+0x8>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800314e:	2103      	movs	r1, #3
 8003150:	68eb      	ldr	r3, [r5, #12]
 8003152:	438b      	bics	r3, r1
 8003154:	4313      	orrs	r3, r2
 8003156:	60eb      	str	r3, [r5, #12]
    tickstart = HAL_GetTick();
 8003158:	f7fe fc14 	bl	8001984 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800315c:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 800315e:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003160:	2b02      	cmp	r3, #2
 8003162:	d119      	bne.n	8003198 <HAL_RCC_ClockConfig+0xe8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003164:	220c      	movs	r2, #12
 8003166:	68eb      	ldr	r3, [r5, #12]
 8003168:	4013      	ands	r3, r2
 800316a:	2b08      	cmp	r3, #8
 800316c:	d0b2      	beq.n	80030d4 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800316e:	f7fe fc09 	bl	8001984 <HAL_GetTick>
 8003172:	4b29      	ldr	r3, [pc, #164]	; (8003218 <HAL_RCC_ClockConfig+0x168>)
 8003174:	1bc0      	subs	r0, r0, r7
 8003176:	4298      	cmp	r0, r3
 8003178:	d9f4      	bls.n	8003164 <HAL_RCC_ClockConfig+0xb4>
          return HAL_TIMEOUT;
 800317a:	2003      	movs	r0, #3
 800317c:	e79d      	b.n	80030ba <HAL_RCC_ClockConfig+0xa>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800317e:	2a03      	cmp	r2, #3
 8003180:	d102      	bne.n	8003188 <HAL_RCC_ClockConfig+0xd8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003182:	019b      	lsls	r3, r3, #6
 8003184:	d4e3      	bmi.n	800314e <HAL_RCC_ClockConfig+0x9e>
 8003186:	e797      	b.n	80030b8 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003188:	2a01      	cmp	r2, #1
 800318a:	d102      	bne.n	8003192 <HAL_RCC_ClockConfig+0xe2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800318c:	075b      	lsls	r3, r3, #29
 800318e:	d4de      	bmi.n	800314e <HAL_RCC_ClockConfig+0x9e>
 8003190:	e792      	b.n	80030b8 <HAL_RCC_ClockConfig+0x8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003192:	059b      	lsls	r3, r3, #22
 8003194:	d4db      	bmi.n	800314e <HAL_RCC_ClockConfig+0x9e>
 8003196:	e78f      	b.n	80030b8 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003198:	2b03      	cmp	r3, #3
 800319a:	d10b      	bne.n	80031b4 <HAL_RCC_ClockConfig+0x104>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800319c:	220c      	movs	r2, #12
 800319e:	68eb      	ldr	r3, [r5, #12]
 80031a0:	4013      	ands	r3, r2
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d096      	beq.n	80030d4 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031a6:	f7fe fbed 	bl	8001984 <HAL_GetTick>
 80031aa:	4b1b      	ldr	r3, [pc, #108]	; (8003218 <HAL_RCC_ClockConfig+0x168>)
 80031ac:	1bc0      	subs	r0, r0, r7
 80031ae:	4298      	cmp	r0, r3
 80031b0:	d9f4      	bls.n	800319c <HAL_RCC_ClockConfig+0xec>
 80031b2:	e7e2      	b.n	800317a <HAL_RCC_ClockConfig+0xca>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d010      	beq.n	80031da <HAL_RCC_ClockConfig+0x12a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80031b8:	220c      	movs	r2, #12
 80031ba:	68eb      	ldr	r3, [r5, #12]
 80031bc:	4213      	tst	r3, r2
 80031be:	d089      	beq.n	80030d4 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031c0:	f7fe fbe0 	bl	8001984 <HAL_GetTick>
 80031c4:	4b14      	ldr	r3, [pc, #80]	; (8003218 <HAL_RCC_ClockConfig+0x168>)
 80031c6:	1bc0      	subs	r0, r0, r7
 80031c8:	4298      	cmp	r0, r3
 80031ca:	d9f5      	bls.n	80031b8 <HAL_RCC_ClockConfig+0x108>
 80031cc:	e7d5      	b.n	800317a <HAL_RCC_ClockConfig+0xca>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031ce:	f7fe fbd9 	bl	8001984 <HAL_GetTick>
 80031d2:	4b11      	ldr	r3, [pc, #68]	; (8003218 <HAL_RCC_ClockConfig+0x168>)
 80031d4:	1bc0      	subs	r0, r0, r7
 80031d6:	4298      	cmp	r0, r3
 80031d8:	d8cf      	bhi.n	800317a <HAL_RCC_ClockConfig+0xca>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80031da:	220c      	movs	r2, #12
 80031dc:	68eb      	ldr	r3, [r5, #12]
 80031de:	4013      	ands	r3, r2
 80031e0:	2b04      	cmp	r3, #4
 80031e2:	d1f4      	bne.n	80031ce <HAL_RCC_ClockConfig+0x11e>
 80031e4:	e776      	b.n	80030d4 <HAL_RCC_ClockConfig+0x24>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031e6:	6822      	ldr	r2, [r4, #0]
 80031e8:	439a      	bics	r2, r3
 80031ea:	6022      	str	r2, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031ec:	6822      	ldr	r2, [r4, #0]
 80031ee:	421a      	tst	r2, r3
 80031f0:	d100      	bne.n	80031f4 <HAL_RCC_ClockConfig+0x144>
 80031f2:	e776      	b.n	80030e2 <HAL_RCC_ClockConfig+0x32>
 80031f4:	e760      	b.n	80030b8 <HAL_RCC_ClockConfig+0x8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031f6:	68e3      	ldr	r3, [r4, #12]
 80031f8:	4908      	ldr	r1, [pc, #32]	; (800321c <HAL_RCC_ClockConfig+0x16c>)
 80031fa:	400b      	ands	r3, r1
 80031fc:	68f1      	ldr	r1, [r6, #12]
 80031fe:	430b      	orrs	r3, r1
 8003200:	60e3      	str	r3, [r4, #12]
 8003202:	e773      	b.n	80030ec <HAL_RCC_ClockConfig+0x3c>
 8003204:	40022000 	.word	0x40022000
 8003208:	40021000 	.word	0x40021000
 800320c:	ffffc7ff 	.word	0xffffc7ff
 8003210:	080034c4 	.word	0x080034c4
 8003214:	20000004 	.word	0x20000004
 8003218:	00001388 	.word	0x00001388
 800321c:	fffff8ff 	.word	0xfffff8ff

08003220 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003220:	6803      	ldr	r3, [r0, #0]
{
 8003222:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003224:	0005      	movs	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003226:	069b      	lsls	r3, r3, #26
 8003228:	d53b      	bpl.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x82>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800322a:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 800322c:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800322e:	4c4f      	ldr	r4, [pc, #316]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003230:	055b      	lsls	r3, r3, #21
 8003232:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    FlagStatus       pwrclkchanged = RESET;
 8003234:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003236:	421a      	tst	r2, r3
 8003238:	d104      	bne.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x24>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800323a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800323c:	4313      	orrs	r3, r2
 800323e:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 8003240:	2301      	movs	r3, #1
 8003242:	9300      	str	r3, [sp, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003244:	2780      	movs	r7, #128	; 0x80
 8003246:	4e4a      	ldr	r6, [pc, #296]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8003248:	007f      	lsls	r7, r7, #1
 800324a:	6833      	ldr	r3, [r6, #0]
 800324c:	423b      	tst	r3, r7
 800324e:	d04f      	beq.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8003250:	6868      	ldr	r0, [r5, #4]
 8003252:	23c0      	movs	r3, #192	; 0xc0
 8003254:	26c0      	movs	r6, #192	; 0xc0
 8003256:	0001      	movs	r1, r0
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8003258:	6822      	ldr	r2, [r4, #0]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800325a:	03b6      	lsls	r6, r6, #14
 800325c:	029b      	lsls	r3, r3, #10
 800325e:	4030      	ands	r0, r6
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8003260:	4032      	ands	r2, r6
 8003262:	4019      	ands	r1, r3
 8003264:	001e      	movs	r6, r3
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8003266:	4290      	cmp	r0, r2
 8003268:	d153      	bne.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0xf2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800326a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800326c:	4033      	ands	r3, r6

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800326e:	d157      	bne.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x100>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003270:	6869      	ldr	r1, [r5, #4]
 8003272:	23c0      	movs	r3, #192	; 0xc0
 8003274:	000a      	movs	r2, r1
 8003276:	029b      	lsls	r3, r3, #10
 8003278:	401a      	ands	r2, r3
 800327a:	429a      	cmp	r2, r3
 800327c:	d107      	bne.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800327e:	6823      	ldr	r3, [r4, #0]
 8003280:	483c      	ldr	r0, [pc, #240]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8003282:	4003      	ands	r3, r0
 8003284:	20c0      	movs	r0, #192	; 0xc0
 8003286:	0380      	lsls	r0, r0, #14
 8003288:	4001      	ands	r1, r0
 800328a:	430b      	orrs	r3, r1
 800328c:	6023      	str	r3, [r4, #0]
 800328e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003290:	431a      	orrs	r2, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003292:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003294:	6522      	str	r2, [r4, #80]	; 0x50
    if(pwrclkchanged == SET)
 8003296:	2b01      	cmp	r3, #1
 8003298:	d103      	bne.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800329a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800329c:	4a36      	ldr	r2, [pc, #216]	; (8003378 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 800329e:	4013      	ands	r3, r2
 80032a0:	63a3      	str	r3, [r4, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80032a2:	682a      	ldr	r2, [r5, #0]
 80032a4:	0793      	lsls	r3, r2, #30
 80032a6:	d506      	bpl.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0x96>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80032a8:	200c      	movs	r0, #12
 80032aa:	4930      	ldr	r1, [pc, #192]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80032ac:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 80032ae:	4383      	bics	r3, r0
 80032b0:	68a8      	ldr	r0, [r5, #8]
 80032b2:	4303      	orrs	r3, r0
 80032b4:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80032b6:	0753      	lsls	r3, r2, #29
 80032b8:	d506      	bpl.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0xa8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80032ba:	492c      	ldr	r1, [pc, #176]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80032bc:	482f      	ldr	r0, [pc, #188]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80032be:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 80032c0:	4003      	ands	r3, r0
 80032c2:	68e8      	ldr	r0, [r5, #12]
 80032c4:	4303      	orrs	r3, r0
 80032c6:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80032c8:	0713      	lsls	r3, r2, #28
 80032ca:	d506      	bpl.n	80032da <HAL_RCCEx_PeriphCLKConfig+0xba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80032cc:	4927      	ldr	r1, [pc, #156]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80032ce:	482c      	ldr	r0, [pc, #176]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032d0:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 80032d2:	4003      	ands	r3, r0
 80032d4:	6928      	ldr	r0, [r5, #16]
 80032d6:	4303      	orrs	r3, r0
 80032d8:	64cb      	str	r3, [r1, #76]	; 0x4c
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
  }

  return HAL_OK;
 80032da:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80032dc:	0613      	lsls	r3, r2, #24
 80032de:	d517      	bpl.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0xf0>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80032e0:	4a22      	ldr	r2, [pc, #136]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80032e2:	4928      	ldr	r1, [pc, #160]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032e4:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80032e6:	400b      	ands	r3, r1
 80032e8:	6969      	ldr	r1, [r5, #20]
 80032ea:	430b      	orrs	r3, r1
 80032ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80032ee:	e00f      	b.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0xf0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032f0:	6833      	ldr	r3, [r6, #0]
 80032f2:	433b      	orrs	r3, r7
 80032f4:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80032f6:	f7fe fb45 	bl	8001984 <HAL_GetTick>
 80032fa:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032fc:	6833      	ldr	r3, [r6, #0]
 80032fe:	423b      	tst	r3, r7
 8003300:	d1a6      	bne.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003302:	f7fe fb3f 	bl	8001984 <HAL_GetTick>
 8003306:	9b01      	ldr	r3, [sp, #4]
 8003308:	1ac0      	subs	r0, r0, r3
 800330a:	2864      	cmp	r0, #100	; 0x64
 800330c:	d9f6      	bls.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0xdc>
          return HAL_TIMEOUT;
 800330e:	2003      	movs	r0, #3
}
 8003310:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8003312:	4299      	cmp	r1, r3
 8003314:	d1a9      	bne.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x4a>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003316:	6823      	ldr	r3, [r4, #0]
          return HAL_ERROR;
 8003318:	2001      	movs	r0, #1
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800331a:	039b      	lsls	r3, r3, #14
 800331c:	d5a5      	bpl.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x4a>
 800331e:	e7f7      	b.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0xf0>
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8003320:	428b      	cmp	r3, r1
 8003322:	d0a5      	beq.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x50>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003324:	682b      	ldr	r3, [r5, #0]
 8003326:	069b      	lsls	r3, r3, #26
 8003328:	d5a2      	bpl.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x50>
      __HAL_RCC_BACKUPRESET_FORCE();
 800332a:	2280      	movs	r2, #128	; 0x80
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800332c:	6d21      	ldr	r1, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_FORCE();
 800332e:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8003330:	0312      	lsls	r2, r2, #12
 8003332:	4302      	orrs	r2, r0
 8003334:	6522      	str	r2, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003336:	6d22      	ldr	r2, [r4, #80]	; 0x50
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8003338:	4b13      	ldr	r3, [pc, #76]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x168>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 800333a:	4814      	ldr	r0, [pc, #80]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x16c>)
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800333c:	400b      	ands	r3, r1
      __HAL_RCC_BACKUPRESET_RELEASE();
 800333e:	4002      	ands	r2, r0
 8003340:	6522      	str	r2, [r4, #80]	; 0x50
      RCC->CSR = temp_reg;
 8003342:	6523      	str	r3, [r4, #80]	; 0x50
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8003344:	05cb      	lsls	r3, r1, #23
 8003346:	d400      	bmi.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x12a>
 8003348:	e792      	b.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x50>
        tickstart = HAL_GetTick();
 800334a:	f7fe fb1b 	bl	8001984 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800334e:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 8003350:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003352:	00bf      	lsls	r7, r7, #2
 8003354:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003356:	423b      	tst	r3, r7
 8003358:	d000      	beq.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800335a:	e789      	b.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x50>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800335c:	f7fe fb12 	bl	8001984 <HAL_GetTick>
 8003360:	4b0b      	ldr	r3, [pc, #44]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x170>)
 8003362:	1b80      	subs	r0, r0, r6
 8003364:	4298      	cmp	r0, r3
 8003366:	d9f5      	bls.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x134>
 8003368:	e7d1      	b.n	800330e <HAL_RCCEx_PeriphCLKConfig+0xee>
 800336a:	46c0      	nop			; (mov r8, r8)
 800336c:	40021000 	.word	0x40021000
 8003370:	40007000 	.word	0x40007000
 8003374:	ffcfffff 	.word	0xffcfffff
 8003378:	efffffff 	.word	0xefffffff
 800337c:	fffff3ff 	.word	0xfffff3ff
 8003380:	ffffcfff 	.word	0xffffcfff
 8003384:	fff3ffff 	.word	0xfff3ffff
 8003388:	fffcffff 	.word	0xfffcffff
 800338c:	fff7ffff 	.word	0xfff7ffff
 8003390:	00001388 	.word	0x00001388

08003394 <__libc_init_array>:
 8003394:	b570      	push	{r4, r5, r6, lr}
 8003396:	2600      	movs	r6, #0
 8003398:	4d0c      	ldr	r5, [pc, #48]	; (80033cc <__libc_init_array+0x38>)
 800339a:	4c0d      	ldr	r4, [pc, #52]	; (80033d0 <__libc_init_array+0x3c>)
 800339c:	1b64      	subs	r4, r4, r5
 800339e:	10a4      	asrs	r4, r4, #2
 80033a0:	42a6      	cmp	r6, r4
 80033a2:	d109      	bne.n	80033b8 <__libc_init_array+0x24>
 80033a4:	2600      	movs	r6, #0
 80033a6:	f000 f821 	bl	80033ec <_init>
 80033aa:	4d0a      	ldr	r5, [pc, #40]	; (80033d4 <__libc_init_array+0x40>)
 80033ac:	4c0a      	ldr	r4, [pc, #40]	; (80033d8 <__libc_init_array+0x44>)
 80033ae:	1b64      	subs	r4, r4, r5
 80033b0:	10a4      	asrs	r4, r4, #2
 80033b2:	42a6      	cmp	r6, r4
 80033b4:	d105      	bne.n	80033c2 <__libc_init_array+0x2e>
 80033b6:	bd70      	pop	{r4, r5, r6, pc}
 80033b8:	00b3      	lsls	r3, r6, #2
 80033ba:	58eb      	ldr	r3, [r5, r3]
 80033bc:	4798      	blx	r3
 80033be:	3601      	adds	r6, #1
 80033c0:	e7ee      	b.n	80033a0 <__libc_init_array+0xc>
 80033c2:	00b3      	lsls	r3, r6, #2
 80033c4:	58eb      	ldr	r3, [r5, r3]
 80033c6:	4798      	blx	r3
 80033c8:	3601      	adds	r6, #1
 80033ca:	e7f2      	b.n	80033b2 <__libc_init_array+0x1e>
 80033cc:	080034e0 	.word	0x080034e0
 80033d0:	080034e0 	.word	0x080034e0
 80033d4:	080034e0 	.word	0x080034e0
 80033d8:	080034e4 	.word	0x080034e4

080033dc <memset>:
 80033dc:	0003      	movs	r3, r0
 80033de:	1812      	adds	r2, r2, r0
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d100      	bne.n	80033e6 <memset+0xa>
 80033e4:	4770      	bx	lr
 80033e6:	7019      	strb	r1, [r3, #0]
 80033e8:	3301      	adds	r3, #1
 80033ea:	e7f9      	b.n	80033e0 <memset+0x4>

080033ec <_init>:
 80033ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033ee:	46c0      	nop			; (mov r8, r8)
 80033f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033f2:	bc08      	pop	{r3}
 80033f4:	469e      	mov	lr, r3
 80033f6:	4770      	bx	lr

080033f8 <_fini>:
 80033f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033fa:	46c0      	nop			; (mov r8, r8)
 80033fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033fe:	bc08      	pop	{r3}
 8003400:	469e      	mov	lr, r3
 8003402:	4770      	bx	lr
